/*
 * Copyright (c) 2022 Acadia, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.acadiasoft.im.simmple;

import com.acadiasoft.im.simm.config.HoldingPeriod;
import com.acadiasoft.im.simm.config.SimmCalculationType;
import com.acadiasoft.im.simm.util.AssertUtils;
import com.acadiasoft.im.simmple.config.ImRole;
import com.acadiasoft.im.simmple.config.SimmpleConfig;
import com.acadiasoft.im.simmple.engine.Simmple;
import com.acadiasoft.im.simmple.model.Crif;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

/**
 * 
 * Generated by SimmDayGeneratorTest.printUnitTestsForSimmOptionalTenDayTest
 * 
 * @author joe.peterson
 *
 */
public class SimmOptionalTenDayTest implements SimmOptionalCrifMixin {

  /**
   * Required Passes: None Element Tested: IR Risk Weight with each sensitivity having a unique applicable regulation
   * Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testJ1() {
    List<Crif> sensitivities = Arrays.asList(JS_IR_47, JS_IR_48);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJ1", "Rates & Fx", "Delta", "IR Risk Weight with each sensitivity having a unique applicable regulation", "JS_IR_47,JS_IR_48", "None",
        "Total", " 112,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("112000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with one sensitivity having multiple applicable regulations
   * Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testJ2() {
    List<Crif> sensitivities = Arrays.asList(JS_IR_49, JS_IR_50, JS_IR_51);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJ2", "Rates & Fx", "Delta", "IR Risk Weight with one sensitivity having multiple applicable regulations", "JS_IR_49,JS_IR_50,JS_IR_51",
        "None", "Total", " 12,435,896 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("12435896"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with one sensitivity having multiple applicable regulations
   * Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testJ3() {
    List<Crif> sensitivities = Arrays.asList(JS_IR_49, JS_IR_50, JS_IR_52);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJ3", "Rates & Fx", "Delta", "IR Risk Weight with one sensitivity having multiple applicable regulations", "JS_IR_49,JS_IR_50,JS_IR_52",
        "None", "Total", " 27,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("27000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with a product specific AddOn applicable under one regulation
   * Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testJ4() {
    List<Crif> sensitivities = Arrays.asList(JS_IR_53, JS_IR_54, JS_AN_9, JS_AN_10);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJ4", "Rates & Fx", "Delta", "IR Risk Weight with a product specific AddOn applicable under one regulation",
        "JS_IR_53,JS_IR_54,JS_AN_9,JS_AN_10", "None", "Total", " 60,000,000 ", " -   ", " -   ", " -   ", " 10,000,000 ", new BigDecimal("70000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with one sensitivity having no applicable regulation Risk
   * Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testJ5() {
    List<Crif> sensitivities = Arrays.asList(JS_IR_49, JS_IR_50, JS_IR_55);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJ5", "Rates & Fx", "Delta", "IR Risk Weight with one sensitivity having no applicable regulation", "JS_IR_49,JS_IR_50,JS_IR_55", "None",
        "Total", " 15,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("15000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with two applicable regulations and a product class multiplier
   * applicable under one regulation Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testJ6() {
    List<Crif> sensitivities = Arrays.asList(JS_IR_53, JS_IR_56, JS_MUL_5);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJ6", "Rates & Fx", "Delta", "IR Risk Weight with two applicable regulations and a product class multiplier applicable under one regulation",
        "JS_IR_53,JS_IR_56,JS_MUL_5", "None", "Total", " 50,000,000 ", " -   ", " -   ", " -   ", " 25,000,000 ", new BigDecimal("75000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with three applicable regulations and two product class
   * multipliers applicable under different regulations Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testJ7() {
    List<Crif> sensitivities = Arrays.asList(JS_IR_53, JS_IR_56, JS_IR_57, JS_MUL_5, JS_MUL_6);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJ7", "Rates & Fx", "Delta",
        "IR Risk Weight with three applicable regulations and two product class multipliers applicable under different regulations", "JS_IR_53,JS_IR_56,JS_IR_57,JS_MUL_5,JS_MUL_6",
        "None", "Total", " 50,000,000 ", " -   ", " -   ", " -   ", " 25,000,000 ", new BigDecimal("75000000"), amount);
  }

  /**
   * Required Passes: J6-J7 Element Tested: IR Risk Weight with three applicable regulations and two product class
   * multipliers applicable under different regulations Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testJ8() {
    List<Crif> sensitivities = Arrays.asList(JS_IR_53, JS_IR_56, JS_IR_58, JS_MUL_5, JS_MUL_7);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJ8", "Rates & Fx", "Delta",
        "IR Risk Weight with three applicable regulations and two product class multipliers applicable under different regulations", "JS_IR_53,JS_IR_56,JS_IR_58,JS_MUL_5,JS_MUL_7",
        "J6-J7", "Total", " 72,000,000 ", " -   ", " -   ", " -   ", " 14,400,000 ", new BigDecimal("86400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with two applicable regulations across product classes Risk
   * Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testJ9() {
    List<Crif> sensitivities = Arrays.asList(JS_IR_59, JS_IR_60, JS_IR_61);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJ9", "Rates & Fx", "Delta", "IR Risk Weight with two applicable regulations across product classes", "JS_IR_59,JS_IR_60,JS_IR_61", "None",
        "Total", " 170,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("170000000"), amount);
  }

  /**
   * Required Passes: J9 Element Tested: "IR Risk Weight with two applicable regulations across product classes, with
   * product class multipliers" Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testJ10() {
    List<Crif> sensitivities = Arrays.asList(JS_IR_62, JS_IR_63, JS_MUL_8, JS_MUL_9);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJ10", "Rates & Fx", "Delta", "IR Risk Weight with two applicable regulations across product classes, with product class multipliers",
        "JS_IR_62,JS_IR_63,JS_MUL_8,JS_MUL_9", "J9", "Total", " 170,000,000 ", " -   ", " -   ", " -   ", " 135,000,000 ", new BigDecimal("305000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with sensitivity subject to SEC rules Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testJS1Segregated() {
    List<Crif> sensitivities = Arrays.asList(SS_IR_64, SS_IR_65, SS_IR_66);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.SEGREGATED).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJS1Segregated", "Rates & Fx", "Delta", "IR Risk Weight with sensitivity subject to SEC rules", "SS_IR_64,SS_IR_65,SS_IR_66", "None",
        "Segregated", " 90,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("90000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with sensitivity subject to SEC rules Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testJS1Unsegregated() {
    List<Crif> sensitivities = Arrays.asList(SS_IR_64, SS_IR_65, SS_IR_66);
    SimmpleConfig config = SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED)
        .simmCalculationType(SimmCalculationType.UNSEGREGATED).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJS1Unsegregated", "Rates & Fx", "Delta", "IR Risk Weight with sensitivity subject to SEC rules", "SS_IR_64,SS_IR_65,SS_IR_66", "None",
        "Unsegregated", " 217,862,342 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("217862342"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with sensitivity subject to SEC rules Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testJS1() {
    List<Crif> sensitivities = Arrays.asList(SS_IR_64, SS_IR_65, SS_IR_66);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJS1", "Rates & Fx", "Delta", "IR Risk Weight with sensitivity subject to SEC rules", "SS_IR_64,SS_IR_65,SS_IR_66", "None", "Total",
        " 217,862,342 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("217862342"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with sensitivity subject to SEC rules Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testJS2Segregated() {
    List<Crif> sensitivities = Arrays.asList(SS_IR_66, SS_IR_67, SS_IR_68);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.SEGREGATED).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJS2Segregated", "Rates & Fx", "Delta", "IR Risk Weight with sensitivity subject to SEC rules", "SS_IR_66,SS_IR_67,SS_IR_68", "None",
        "Segregated", " 182,467,531 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("182467531"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with sensitivity subject to SEC rules Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testJS2Unsegregated() {
    List<Crif> sensitivities = Arrays.asList(SS_IR_66, SS_IR_67, SS_IR_68);
    SimmpleConfig config = SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED)
        .simmCalculationType(SimmCalculationType.UNSEGREGATED).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJS2Unsegregated", "Rates & Fx", "Delta", "IR Risk Weight with sensitivity subject to SEC rules", "SS_IR_66,SS_IR_67,SS_IR_68", "None",
        "Unsegregated", " 102,956,301 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("102956301"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight with sensitivity subject to SEC rules Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testJS2() {
    List<Crif> sensitivities = Arrays.asList(SS_IR_66, SS_IR_67, SS_IR_68);
    SimmpleConfig config =
        SimmpleConfig.Builder().calculationCurrency("USD").holdingPeriod(HoldingPeriod.TEN_DAY).imRole(ImRole.SECURED).simmCalculationType(SimmCalculationType.TOTAL).build();
    BigDecimal amount = Simmple.calculateWorstOf(sensitivities, config).getImTree().getMargin();
    AssertUtils.assertEquals(true, "testJS2", "Rates & Fx", "Delta", "IR Risk Weight with sensitivity subject to SEC rules", "SS_IR_66,SS_IR_67,SS_IR_68", "None", "Total",
        " 182,467,531 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("182467531"), amount);
  }
}
