/*
 * Copyright (c) 2022 Acadia, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.acadiasoft.im.simm.engine;

import com.acadiasoft.im.base.fx.FxRate;
import com.acadiasoft.im.simm.config.HoldingPeriod;
import com.acadiasoft.im.simm.model.FixedAmount;
import com.acadiasoft.im.simm.model.Notional;
import com.acadiasoft.im.simm.model.NotionalFactor;
import com.acadiasoft.im.simm.model.ProductMultiplier;
import com.acadiasoft.im.simm.model.Sensitivity;
import com.acadiasoft.im.simm.util.AssertUtils;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.Test;

/**
 * 
 * Generated by SimmDayGeneratorTest.printUnitTestsForSimmTenDayTest
 * 
 * @author joe.peterson
 *
 */
public class SimmTenDayTest implements SimmCrifMixin {
  /**
   * Required Passes: None Element Tested: "IR Risk Weight (regular, 2w)" Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC1() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC1", "Rates & Fx", "Delta", "IR Risk Weight (regular, 2w)", "S_IR_1", "None", "Total", " 460,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("460000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC2() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC2", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_2", "None", "Total", " 288,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("288000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC3() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC3", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_3", "None", "Total", " 132,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("132000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC4() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC4", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_4", "None", "Total", " 198,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("198000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC5() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC5", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_5", "None", "Total", " 66,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("66000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC6() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC6", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_6", "None", "Total", " 112,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("112000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC7() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC7", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_7", "None", "Total", " 280,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("280000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC8() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC8", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_8", "None", "Total", " 520,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("520000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC9() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC9", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_9", "None", "Total", " 1,300,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1300000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC10() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC10", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_10", "None", "Total", " 1,855,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1855000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC11() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC11", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_11", "None", "Total", " 224,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("224000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC12() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC12", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_12", "None", "Total", " 222,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("222000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC13() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC13", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_13", "None", "Total", " 122,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("122000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC14() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC14", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_14", "None", "Total", " 228,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("228000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC15() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC15", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_15", "None", "Total", " 600,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("600000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC16() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC16", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_16", "None", "Total", " 1,188,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1188000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (inflation) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC17() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC17", "Rates & Fx", "Delta", "IR Risk Weight (inflation)", "S_IR_17", "None", "Total", " 630,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("630000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (xccy) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC18() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC18", "Rates & Fx", "Delta", "IR Risk Weight (xccy)", "S_IR_18", "None", "Total", " 630,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("630000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: "IR Risk Weight (low vol, 2w)" Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC19() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC19", "Rates & Fx", "Delta", "IR Risk Weight (low vol, 2w)", "S_IR_19", "None", "Total", " 15,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("15000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC20() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC20", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_20", "None", "Total", " 27,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("27000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC21() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC21", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_21", "None", "Total", " 13,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("13500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC22() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC22", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_22", "None", "Total", " 22,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("22000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC23() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC23", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_23", "None", "Total", " 39,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("39000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC24() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC24", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_24", "None", "Total", " 60,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("60000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC25() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC25", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_25", "None", "Total", " 90,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("90000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC26() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_26);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC26", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_26", "None", "Total", " 400,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("400000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC27() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC27", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_27", "None", "Total", " 570,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("570000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC28() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_28);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC28", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_28", "None", "Total", " 19,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("19000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC29() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_29);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC29", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_29", "None", "Total", " 40,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("40000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC30() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_30);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC30", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_30", "None", "Total", " 69,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("69000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (inflation) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC31() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_31);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC31", "Rates & Fx", "Delta", "IR Risk Weight (inflation)", "S_IR_31", "None", "Total", " 315,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("315000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (xccy) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC32() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC32", "Rates & Fx", "Delta", "IR Risk Weight (xccy)", "S_IR_32", "None", "Total", " 10,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("10500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: "IR Risk Weight (high vol, 2w)" Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC33() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC33", "Rates & Fx", "Delta", "IR Risk Weight (high vol, 2w)", "S_IR_33", "None", "Total", " 119,000,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("119000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC34() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_34);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC34", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_34", "None", "Total", " 139,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("139500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC35() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_35);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC35", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_35", "None", "Total", " 40,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("40000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC36() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_36);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC36", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_36", "None", "Total", " 82,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("82000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC37() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_37);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC37", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_37", "None", "Total", " 810,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("810000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC38() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_38);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC38", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_38", "None", "Total", " 920,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("920000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC39() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_39);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC39", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_39", "None", "Total", " 47,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("47500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC40() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_40);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC40", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_40", "None", "Total", " 95,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("95000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC41() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_41);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC41", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_41", "None", "Total", " 1,316,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1316000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC42() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_42);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC42", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_42", "None", "Total", " 3,240,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("3240000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC43() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_43);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC43", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_43", "None", "Total", " 84,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("84000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC44() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_44);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC44", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_44", "None", "Total", " 80,800,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("80800000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (inflation) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC45() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_45);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC45", "Rates & Fx", "Delta", "IR Risk Weight (inflation)", "S_IR_45", "None", "Total", " 126,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("126000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (xccy) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC46() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_46);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC46", "Rates & Fx", "Delta", "IR Risk Weight (xccy)", "S_IR_46", "None", "Total", " 21,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("21000000"), amount);
  }

  /**
   * Required Passes: "C8,C9" Element Tested: "Net Sensitivities (same tenor & subcurve, same sign)" Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC47() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_8, S_IR_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC47", "Rates & Fx", "Delta", "Net Sensitivities (same tenor & subcurve, same sign)", "S_IR_8,S_IR_9", "C8,C9", "Total", " 1,820,000,000 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("1820000000"), amount);
  }

  /**
   * Required Passes: "C4,C5" Element Tested: "Net Sensitivities (same tenor & subcurve, diff sign)" Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC48() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_4, S_IR_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC48", "Rates & Fx", "Delta", "Net Sensitivities (same tenor & subcurve, diff sign)", "S_IR_4,S_IR_5", "C4,C5", "Total", " 132,000,000 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("132000000"), amount);
  }

  /**
   * Required Passes: "C8-C10,C47" Element Tested: "Concentration (reg vol, well traded)" Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC49() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_8, S_IR_9, S_IR_10, S_IR_8, S_IR_9, S_IR_10, S_IR_8, S_IR_9, S_IR_10, S_IR_8, S_IR_9, S_IR_10, S_IR_8, S_IR_9, S_IR_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC49", "Rates & Fx", "Delta", "Concentration (reg vol, well traded)",
        "S_IR_8,S_IR_9,S_IR_10,S_IR_8,S_IR_9,S_IR_10,S_IR_8,S_IR_9,S_IR_10,S_IR_8,S_IR_9,S_IR_10,S_IR_8,S_IR_9,S_IR_10", "C8-C10,C47", "Total", " 22,324,612,441 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("22324612441"), amount);
  }

  /**
   * Required Passes: C14-C16 Element Tested: "Concentration (reg vol, less traded)" Risk Measure: Delta Group: Rates &
   * Fx
   */
  @Test
  public void testC50() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_14, S_IR_15, S_IR_16, S_IR_14, S_IR_15, S_IR_16, S_IR_14, S_IR_15, S_IR_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC50", "Rates & Fx", "Delta", "Concentration (reg vol, less traded)",
        "S_IR_14,S_IR_15,S_IR_16,S_IR_14,S_IR_15,S_IR_16,S_IR_14,S_IR_15,S_IR_16", "C14-C16", "Total", " 5,989,197,781 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5989197781"), amount);
  }

  /**
   * Required Passes: "C14-C18,C50" Element Tested: "Concentration (reg vol, w/inf & xccy)" Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC51() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_14, S_IR_15, S_IR_16, S_IR_14, S_IR_15, S_IR_16, S_IR_14, S_IR_15, S_IR_16, S_IR_17, S_IR_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC51", "Rates & Fx", "Delta", "Concentration (reg vol, w/inf & xccy)",
        "S_IR_14,S_IR_15,S_IR_16,S_IR_14,S_IR_15,S_IR_16,S_IR_14,S_IR_15,S_IR_16,S_IR_17,S_IR_18", "C14-C18,C50", "Total", " 5,369,436,086 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5369436086"), amount);
  }

  /**
   * Required Passes: C26-C28 Element Tested: Concentration (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC52() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_26, S_IR_27, S_IR_28, S_IR_26, S_IR_27, S_IR_28, S_IR_26, S_IR_27, S_IR_28);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC52", "Rates & Fx", "Delta", "Concentration (low vol)", "S_IR_26,S_IR_27,S_IR_28,S_IR_26,S_IR_27,S_IR_28,S_IR_26,S_IR_27,S_IR_28",
        "C26-C28", "Total", " 4,076,758,139 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("4076758139"), amount);
  }

  /**
   * Required Passes: "C26-C28,C31,C32,C52" Element Tested: "Concentration (low vol, w/inf & xccy)" Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC53() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_26, S_IR_27, S_IR_28, S_IR_26, S_IR_27, S_IR_28, S_IR_26, S_IR_27, S_IR_28, S_IR_31, S_IR_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC53", "Rates & Fx", "Delta", "Concentration (low vol, w/inf & xccy)",
        "S_IR_26,S_IR_27,S_IR_28,S_IR_26,S_IR_27,S_IR_28,S_IR_26,S_IR_27,S_IR_28,S_IR_31,S_IR_32", "C26-C28,C31,C32,C52", "Total", " 4,341,184,936 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("4341184936"), amount);
  }

  /**
   * Required Passes: C41-C44 Element Tested: Concentration (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC54() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_41, S_IR_42, S_IR_43, S_IR_44);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC54", "Rates & Fx", "Delta", "Concentration (high vol)", "S_IR_41,S_IR_42,S_IR_43,S_IR_44", "C41-C44", "Total", " 4,952,084,725 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("4952084725"), amount);
  }

  /**
   * Required Passes: "C41-C46,C54" Element Tested: "Concentration (high vol, w/inf & xccy)" Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC55() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_41, S_IR_42, S_IR_43, S_IR_44, S_IR_45, S_IR_46);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC55", "Rates & Fx", "Delta", "Concentration (high vol, w/inf & xccy)", "S_IR_41,S_IR_42,S_IR_43,S_IR_44,S_IR_45,S_IR_46", "C41-C46,C54",
        "Total", " 5,123,511,762 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("5123511762"), amount);
  }

  /**
   * Required Passes: "C3,C4" Element Tested: "Subcurve Correlation (same tenor, same sign)" Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC56() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_3, S_IR_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC56", "Rates & Fx", "Delta", "Subcurve Correlation (same tenor, same sign)", "S_IR_3,S_IR_4", "C3,C4", "Total", " 329,207,047 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("329207047"), amount);
  }

  /**
   * Required Passes: "C6,C7" Element Tested: "Subcurve Correlation (same tenor, diff sign)" Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC57() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_6, S_IR_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC57", "Rates & Fx", "Delta", "Subcurve Correlation (same tenor, diff sign)", "S_IR_6,S_IR_7", "C6,C7", "Total", " 169,856,410 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("169856410"), amount);
  }

  /**
   * Required Passes: "C2,C5" Element Tested: Tenor Correlation (diff subcurve) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC58() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_2, S_IR_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC58", "Rates & Fx", "Delta", "Tenor Correlation (diff subcurve)", "S_IR_2,S_IR_5", "C2,C5", "Total", " 335,434,066 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("335434066"), amount);
  }

  /**
   * Required Passes: "C11,C12" Element Tested: "Tenor Correlation (same sign, same subcurve)" Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC59() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_11, S_IR_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC59", "Rates & Fx", "Delta", "Tenor Correlation (same sign, same subcurve)", "S_IR_11,S_IR_12", "C11,C12", "Total", " 409,981,268 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("409981268"), amount);
  }

  /**
   * Required Passes: "C12,C13" Element Tested: "Tenor Correlation (diff sign, same subcurve)" Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC60() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_12, S_IR_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC60", "Rates & Fx", "Delta", "Tenor Correlation (diff sign, same subcurve)", "S_IR_12,S_IR_13", "C12,C13", "Total", " 160,339,390 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("160339390"), amount);
  }

  /**
   * Required Passes: "C19-C30,C52" Element Tested: Tenor Correlation (all tenors and subcurves) Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC61() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_19, S_IR_20, S_IR_21, S_IR_22, S_IR_23, S_IR_24, S_IR_25, S_IR_26, S_IR_27, S_IR_28, S_IR_29, S_IR_30);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC61", "Rates & Fx", "Delta", "Tenor Correlation (all tenors and subcurves)",
        "S_IR_19,S_IR_20,S_IR_21,S_IR_22,S_IR_23,S_IR_24,S_IR_25,S_IR_26,S_IR_27,S_IR_28,S_IR_29,S_IR_30", "C19-C30,C52", "Total", " 1,131,776,699 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("1131776699"), amount);
  }

  /**
   * Required Passes: "C19-C32,C52,C53,C61" Element Tested: "Tenor Correlation (all tenors and subcurves, w/inf & xccy)"
   * Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC62() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_19, S_IR_20, S_IR_21, S_IR_22, S_IR_23, S_IR_24, S_IR_25, S_IR_26, S_IR_27, S_IR_28, S_IR_29, S_IR_30, S_IR_31, S_IR_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC62", "Rates & Fx", "Delta", "Tenor Correlation (all tenors and subcurves, w/inf & xccy)",
        "S_IR_19,S_IR_20,S_IR_21,S_IR_22,S_IR_23,S_IR_24,S_IR_25,S_IR_26,S_IR_27,S_IR_28,S_IR_29,S_IR_30,S_IR_31,S_IR_32", "C19-C32,C52,C53,C61", "Total", " 1,285,123,641 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("1285123641"), amount);
  }

  /**
   * Required Passes: "C1,C22,C33" Element Tested: Inter bucket correlation (all pos) Risk Measure: Delta Group: Rates &
   * Fx
   */
  @Test
  public void testC63() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_1, S_IR_22, S_IR_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC63", "Rates & Fx", "Delta", "Inter bucket correlation (all pos)", "S_IR_1,S_IR_22,S_IR_33", "C1,C22,C33", "Total", " 508,561,147 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("508561147"), amount);
  }

  /**
   * Required Passes: "C1,C19,C33" Element Tested: Inter bucket correlation (one neg) Risk Measure: Delta Group: Rates &
   * Fx
   */
  @Test
  public void testC64() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_1, S_IR_19, S_IR_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC64", "Rates & Fx", "Delta", "Inter bucket correlation (one neg)", "S_IR_1,S_IR_19,S_IR_33", "C1,C19,C33", "Total", " 498,088,747 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("498088747"), amount);
  }

  /**
   * Required Passes: "C2,C19,C35" Element Tested: Inter bucket correlation (all neg) Risk Measure: Delta Group: Rates &
   * Fx
   */
  @Test
  public void testC65() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_2, S_IR_19, S_IR_35);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC65", "Rates & Fx", "Delta", "Inter bucket correlation (all neg)", "S_IR_2,S_IR_19,S_IR_35", "C2,C19,C35", "Total", " 304,401,380 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("304401380"), amount);
  }

  /**
   * Required Passes: "C3,C21,C37,C38" Element Tested: Inter bucket correlation (exceeds concentration threshold) Risk
   * Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC66() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_3, S_IR_21, S_IR_37, S_IR_38, S_IR_37, S_IR_38);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC66", "Rates & Fx", "Delta", "Inter bucket correlation (exceeds concentration threshold)", "S_IR_3,S_IR_21,S_IR_37,S_IR_38,S_IR_37,S_IR_38",
        "C3,C21,C37,C38", "Total", " 3,683,062,897 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("3683062897"), amount);
  }

  /**
   * Required Passes: C1-C66 Element Tested: All jurisdiction independent IR sensitivities Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC67() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC67", "Rates & Fx", "Delta", "All jurisdiction independent IR sensitivities", "All S_IR", "C1-C66", "Total", " 11,126,437,227 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("11126437227"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight & correlation (net to zero) Risk Measure: Delta Group: Rates &
   * Fx
   */
  @Test
  public void testC68() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_1, S_FX_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC68", "Rates & Fx", "Delta", "FX Risk Weight & correlation (net to zero)", "S_FX_1,S_FX_2", "None", "Total", " -   ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("0"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight & correlation (AmountCurrency qualifier) Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC69() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_3, S_FX_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC69", "Rates & Fx", "Delta", "FX Risk Weight & correlation (AmountCurrency qualifier)", "S_FX_3,S_FX_4", "None", "Total",
        " 37,000,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("37000000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight (RR) & correlation (RR) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC70() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_5, S_FX_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC70", "Rates & Fx", "Delta", "FX Risk Weight (RR) & correlation (RR)", "S_FX_5,S_FX_6", "None", "Total", " 6,697,306,623 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("6697306623"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight (RR) & correlation (RR) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC71() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_7, S_FX_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC71", "Rates & Fx", "Delta", "FX Risk Weight (RR) & correlation (RR)", "S_FX_7,S_FX_8", "None", "Total", " 1,518,353,055 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("1518353055"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight (RH) & correlation (RH) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC72() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_9, S_FX_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC72", "Rates & Fx", "Delta", "FX Risk Weight (RH) & correlation (RH)", "S_FX_9,S_FX_10", "None", "Total", " 3,755,176,481 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("3755176481"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight (RH) & correlation (HR) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC73() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_11, S_FX_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC73", "Rates & Fx", "Delta", "FX Risk Weight (RH) & correlation (HR)", "S_FX_11,S_FX_12", "None", "Total", " 556,243,630 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("556243630"), amount);
  }

  /**
   * Required Passes: None Element Tested: Concentration (significantly trading) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC74() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_3, S_FX_6, S_FX_3, S_FX_6, S_FX_3, S_FX_6, S_FX_3, S_FX_6, S_FX_3, S_FX_6, S_FX_3, S_FX_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC74", "Rates & Fx", "Delta", "Concentration (significantly trading)",
        "S_FX_3,S_FX_6,S_FX_3,S_FX_6,S_FX_3,S_FX_6,S_FX_3,S_FX_6,S_FX_3,S_FX_6,S_FX_3,S_FX_6", "None", "Total", " 690,162,764,639 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("690162764639"), amount);
  }

  /**
   * Required Passes: None Element Tested: Concentration (frequently traded) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC75() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC75", "Rates & Fx", "Delta", "Concentration (frequently traded)", "S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8",
        "None", "Total", " 20,557,487,687 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("20557487687"), amount);
  }

  /**
   * Required Passes: None Element Tested: Concentration (others) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC76() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_10, S_FX_10, S_FX_10, S_FX_10, S_FX_10, S_FX_10, S_FX_10, S_FX_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC76", "Rates & Fx", "Delta", "Concentration (others)", "S_FX_10,S_FX_10,S_FX_10,S_FX_10,S_FX_10,S_FX_10,S_FX_10,S_FX_10", "None", "Total",
        " 46,159,930,676 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("46159930676"), amount);
  }

  /**
   * Required Passes: "C69,C70,C74" Element Tested: FX Intercurrency Correlation (3 ccys) Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC77() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_3, S_FX_4, S_FX_5, S_FX_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC77", "Rates & Fx", "Delta", "FX Intercurrency Correlation (3 ccys)", "S_FX_3,S_FX_4,S_FX_5,S_FX_6", "C69,C70,C74", "Total",
        " 44,232,872,284 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("44232872284"), amount);
  }

  /**
   * Required Passes: "C70,C71,C75" Element Tested: FX Intercurrency Correlation (4 ccys) Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC78() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_5, S_FX_6, S_FX_7, S_FX_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC78", "Rates & Fx", "Delta", "FX Intercurrency Correlation (4 ccys)", "S_FX_5,S_FX_6,S_FX_7,S_FX_8", "C70,C71,C75", "Total",
        " 6,867,662,484 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("6867662484"), amount);
  }

  /**
   * Required Passes: "C70,C72,C76" Element Tested: FX Intercurrency Correlation (exceeds concentration threshold) Risk
   * Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC79() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities =
        Arrays.asList(S_FX_5, S_FX_6, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC79", "Rates & Fx", "Delta", "FX Intercurrency Correlation (exceeds concentration threshold)",
        "S_FX_5,S_FX_6,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10", "C70,C72,C76", "Total",
        " 44,852,574,720 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("44852574720"), amount);
  }

  /**
   * Required Passes: C68-C79 Element Tested: All FX sensitivities Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC80() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_FX);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC80", "Rates & Fx", "Delta", "All FX sensitivities", "All S_FX", "C68-C79", "Total", " 45,609,126,471 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("45609126471"), amount);
  }

  /**
   * Required Passes: C1-C80 Element Tested: All Rates & FX Sensitivities Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC81() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_FX);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC81", "Rates & Fx", "Delta", "All Rates & FX Sensitivities", "All S_IR,S_FX", "C1-C80", "Total", " 52,644,493,455 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("52644493455"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC82() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC82", "Credit", "Delta", "CRQ Risk Weight (bkt 1)", "S_CRQ_1", "None", "Total", " 60,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("60000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC83() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC83", "Credit", "Delta", "CRQ Risk Weight (bkt 1)", "S_CRQ_2", "None", "Total", " 22,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("22500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC84() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC84", "Credit", "Delta", "CRQ Risk Weight (bkt 2)", "S_CRQ_3", "None", "Total", " 16,380,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("16380000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC85() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC85", "Credit", "Delta", "CRQ Risk Weight (bkt 2)", "S_CRQ_4", "None", "Total", " 16,380,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("16380000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 3) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC86() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC86", "Credit", "Delta", "CRQ Risk Weight (bkt 3)", "S_CRQ_5", "None", "Total", " 14,040,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("14040000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 3) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC87() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC87", "Credit", "Delta", "CRQ Risk Weight (bkt 3)", "S_CRQ_6", "None", "Total", " 7,800,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("7800000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 4) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC88() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC88", "Credit", "Delta", "CRQ Risk Weight (bkt 4)", "S_CRQ_7", "None", "Total", " 9,900,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("9900000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 4) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC89() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC89", "Credit", "Delta", "CRQ Risk Weight (bkt 4)", "S_CRQ_8", "None", "Total", " 5,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 5) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC90() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC90", "Credit", "Delta", "CRQ Risk Weight (bkt 5)", "S_CRQ_9", "None", "Total", " 12,060,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("12060000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 5) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC91() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC91", "Credit", "Delta", "CRQ Risk Weight (bkt 5)", "S_CRQ_10", "None", "Total", " 6,700,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("6700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 6) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC92() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC92", "Credit", "Delta", "CRQ Risk Weight (bkt 6)", "S_CRQ_11", "None", "Total", " 8,460,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("8460000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 7) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC93() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC93", "Credit", "Delta", "CRQ Risk Weight (bkt 7)", "S_CRQ_12", "None", "Total", " 93,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("93500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 8) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC94() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC94", "Credit", "Delta", "CRQ Risk Weight (bkt 8)", "S_CRQ_13", "None", "Total", " 66,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("66500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 9) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC95() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC95", "Credit", "Delta", "CRQ Risk Weight (bkt 9)", "S_CRQ_14", "None", "Total", " 47,160,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("47160000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 10) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC96() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC96", "Credit", "Delta", "CRQ Risk Weight (bkt 10)", "S_CRQ_15", "None", "Total", " 25,100,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("25100000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 11) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC97() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC97", "Credit", "Delta", "CRQ Risk Weight (bkt 11)", "S_CRQ_16", "None", "Total", " 30,960,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("30960000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 12) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC98() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC98", "Credit", "Delta", "CRQ Risk Weight (bkt 12)", "S_CRQ_17", "None", "Total", " 24,700,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("24700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC99() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC99", "Credit", "Delta", "CRQ Risk Weight (residual)", "S_CRQ_18", "None", "Total", " 119,700,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("119700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC100() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC100", "Credit", "Delta", "CRQ Risk Weight (residual)", "S_CRQ_19", "None", "Total", " 66,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("66500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC101() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC101", "Credit", "Delta", "CRQ Risk Weight (residual)", "S_CRQ_20", "None", "Total", " 119,700,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("119700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC102() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC102", "Credit", "Delta", "CRQ Risk Weight (residual)", "S_CRQ_21", "None", "Total", " 119,700,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("119700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC103() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC103", "Credit", "Delta", "CRQ Risk Weight (residual)", "S_CRQ_22", "None", "Total", " 66,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("66500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (base corr) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC104() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC104", "Credit", "Delta", "CRQ Risk Weight (base corr)", "S_CRQ_23", "None", "Total", " -   ", " -   ", " -   ", " 5,000,000 ", " -   ",
        new BigDecimal("5000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (base corr) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC105() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC105", "Credit", "Delta", "CRQ Risk Weight (base corr)", "S_CRQ_24", "None", "Total", " -   ", " -   ", " -   ", " 2,000,000 ", " -   ",
        new BigDecimal("2000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (base corr) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC106() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC106", "Credit", "Delta", "CRQ Risk Weight (base corr)", "S_CRQ_25", "None", "Total", " -   ", " -   ", " -   ", " 4,000,000 ", " -   ",
        new BigDecimal("4000000"), amount);
  }

  /**
   * Required Passes: "C82,C83" Element Tested: CRQ Concentration (bkt 1) (diff tenors) Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC107() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_1, S_CRQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC107", "Credit", "Delta", "CRQ Concentration (bkt 1) (diff tenors)", "S_CRQ_1,S_CRQ_1,S_CRQ_2", "C82,C83", "Total", " 118,829,109 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("118829109"), amount);
  }

  /**
   * Required Passes: C85 Element Tested: CRQ Concentration (bkt 2-6) (same sign) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC108() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_4, S_CRQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC108", "Credit", "Delta", "CRQ Concentration (bkt 2-6) (same sign)", "S_CRQ_4,S_CRQ_4", "C85", "Total", " 45,093,957 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("45093957"), amount);
  }

  /**
   * Required Passes: C93 Element Tested: CRQ Concentration (bkt 7) (all neg) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC109() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_12, S_CRQ_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC109", "Credit", "Delta", "CRQ Concentration (bkt 7) (all neg)", "S_CRQ_12,S_CRQ_12", "C93", "Total", " 196,029,264 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("196029264"), amount);
  }

  /**
   * Required Passes: C95 Element Tested: CRQ Concentration (bkt 8-12) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC110() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_14, S_CRQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC110", "Credit", "Delta", "CRQ Concentration (bkt 8-12)", "S_CRQ_14,S_CRQ_14", "C95", "Total", " 129,830,952 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("129830952"), amount);
  }

  /**
   * Required Passes: "C82,C83,C107" Element Tested: "CRQ Intra-bucket Correlation (same name, diff tenor)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC111() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC111", "Credit", "Delta", "CRQ Intra-bucket Correlation (same name, diff tenor)", "S_CRQ_1,S_CRQ_2", "C82,C83,C107", "Total",
        " 39,940,581 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("39940581"), amount);
  }

  /**
   * Required Passes: "C84,C85,C108" Element Tested: "CRQ Intra-bucket Correlation (same name, diff ccy)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC112() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_3, S_CRQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC112", "Credit", "Delta", "CRQ Intra-bucket Correlation (same name, diff ccy)", "S_CRQ_3,S_CRQ_4", "C84,C85,C108", "Total", " 6,128,835 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("6128835"), amount);
  }

  /**
   * Required Passes: "C86,C87" Element Tested: "CRQ Intra-bucket Correlation (same name, diff tenor, diff ccy)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC113() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_5, S_CRQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC113", "Credit", "Delta", "CRQ Intra-bucket Correlation (same name, diff tenor, diff ccy)", "S_CRQ_5,S_CRQ_6", "C86,C87", "Total",
        " 7,366,769 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("7366769"), amount);
  }

  /**
   * Required Passes: "C88,C89" Element Tested: "CRQ Intra-bucket Correlation (same name, same tenor, same ccy)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC114() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_7, S_CRQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC114", "Credit", "Delta", "CRQ Intra-bucket Correlation (same name, same tenor, same ccy)", "S_CRQ_7,S_CRQ_8", "C88,C89", "Total",
        " 4,400,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("4400000"), amount);
  }

  /**
   * Required Passes: "C90,C91" Element Tested: CRQ Intra-bucket Correlation (diff name) Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC115() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_9, S_CRQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC115", "Credit", "Delta", "CRQ Intra-bucket Correlation (diff name)", "S_CRQ_9,S_CRQ_10", "C90,C91", "Total", " 11,066,161 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("11066161"), amount);
  }

  /**
   * Required Passes: "C99,C100" Element Tested: "CRQ Intra-bucket Correlation (residual, same name, diff tenor)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC116() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_18, S_CRQ_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC116", "Credit", "Delta", "CRQ Intra-bucket Correlation (residual, same name, diff tenor)", "S_CRQ_18,S_CRQ_19", "C99,C100", "Total",
        " 103,876,321 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("103876321"), amount);
  }

  /**
   * Required Passes: "C100,C101" Element Tested: "CRQ Intra-bucket Correlation (residual, diff name)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC117() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_19, S_CRQ_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC117", "Credit", "Delta", "CRQ Intra-bucket Correlation (residual, diff name)", "S_CRQ_19,S_CRQ_20", "C100,C101", "Total", " 103,876,321 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("103876321"), amount);
  }

  /**
   * Required Passes: "C84,C86" Element Tested: CRQ Inter-bucket Correlation (exceeds concentration threshold) Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC118() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_3, S_CRQ_3, S_CRQ_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC118", "Credit", "Delta", "CRQ Inter-bucket Correlation (exceeds concentration threshold)", "S_CRQ_3,S_CRQ_3,S_CRQ_5", "C84,C86", "Total",
        " 53,038,252 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("53038252"), amount);
  }

  /**
   * Required Passes: "C82,C84" Element Tested: "CRQ Inter-bucket Correlation (same sign, pos)" Risk Measure: Delta
   * Group: Credit
   */
  @Test
  public void testC119() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC119", "Credit", "Delta", "CRQ Inter-bucket Correlation (same sign, pos)", "S_CRQ_1,S_CRQ_3", "C82,C84", "Total", " 67,645,550 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("67645550"), amount);
  }

  /**
   * Required Passes: "C83,C85,C108" Element Tested: "CRQ Inter-bucket Correlation (same sign, neg)" Risk Measure: Delta
   * Group: Credit
   */
  @Test
  public void testC120() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_2, S_CRQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC120", "Credit", "Delta", "CRQ Inter-bucket Correlation (same sign, neg)", "S_CRQ_2,S_CRQ_4", "C83,C85,C108", "Total", " 32,247,642 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("32247642"), amount);
  }

  /**
   * Required Passes: "C82,C85,C108" Element Tested: CRQ Inter-bucket Correlation (diff sign) Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC121() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC121", "Credit", "Delta", "CRQ Inter-bucket Correlation (diff sign)", "S_CRQ_1,S_CRQ_4", "C82,C85,C108", "Total", " 56,220,000 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("56220000"), amount);
  }

  /**
   * Required Passes: "C82,C85,C99,C108,C121" Element Tested: CRQ Inter-bucket Correlation (diff sign) Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC122() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_4, S_CRQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC122", "Credit", "Delta", "CRQ Inter-bucket Correlation (diff sign)", "S_CRQ_1,S_CRQ_4,S_CRQ_18", "C82,C85,C99,C108,C121", "Total",
        " 175,920,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("175920000"), amount);
  }

  /**
   * Required Passes: "C82,C84,C86,C88,C90,C92,C118,C119" Element Tested: "CRQ Inter-bucket Correlation (bkts 1-3, 4-6)"
   * Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC123() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3, S_CRQ_5, S_CRQ_7, S_CRQ_9, S_CRQ_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC123", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 1-3, 4-6)", "S_CRQ_1,S_CRQ_3,S_CRQ_5,S_CRQ_7,S_CRQ_9,S_CRQ_11",
        "C82,C84,C86,C88,C90,C92,C118,C119", "Total", " 91,501,837 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("91501837"), amount);
  }

  /**
   * Required Passes: "C82,C84,C86,C93-C95,C109,C110,C118,C119" Element Tested: "CRQ Inter-bucket Correlation (bkts 1-3,
   * 7-9)" Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC124() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3, S_CRQ_5, S_CRQ_12, S_CRQ_13, S_CRQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC124", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 1-3, 7-9)", "S_CRQ_1,S_CRQ_3,S_CRQ_5,S_CRQ_12,S_CRQ_13,S_CRQ_14",
        "C82,C84,C86,C93-C95,C109,C110,C118,C119", "Total", " 112,567,457 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("112567457"), amount);
  }

  /**
   * Required Passes: "C82,C84,C86,C96-C98,C118,C119" Element Tested: "CRQ Inter-bucket Correlation (bkts 1-3, 10-12)"
   * Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC125() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3, S_CRQ_5, S_CRQ_15, S_CRQ_16, S_CRQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC125", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 1-3, 10-12)", "S_CRQ_1,S_CRQ_3,S_CRQ_5,S_CRQ_15,S_CRQ_16,S_CRQ_17",
        "C82,C84,C86,C96-C98,C118,C119", "Total", " 77,786,088 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("77786088"), amount);
  }

  /**
   * Required Passes: "C88,C90,C92-C95,C109,C110" Element Tested: "CRQ Inter-bucket Correlation (bkts 4-6, 7-9)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC126() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_7, S_CRQ_9, S_CRQ_11, S_CRQ_12, S_CRQ_13, S_CRQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC126", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 4-6, 7-9)", "S_CRQ_7,S_CRQ_9,S_CRQ_11,S_CRQ_12,S_CRQ_13,S_CRQ_14",
        "C88,C90,C92-C95,C109,C110", "Total", " 111,920,821 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("111920821"), amount);
  }

  /**
   * Required Passes: "C88,C90,C92,C96-C98" Element Tested: "CRQ Inter-bucket Correlation (bkts 4-6, 10-12)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC127() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_7, S_CRQ_9, S_CRQ_11, S_CRQ_15, S_CRQ_16, S_CRQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC127", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 4-6, 10-12)", "S_CRQ_7,S_CRQ_9,S_CRQ_11,S_CRQ_15,S_CRQ_16,S_CRQ_17",
        "C88,C90,C92,C96-C98", "Total", " 41,555,111 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("41555111"), amount);
  }

  /**
   * Required Passes: "C93-C98,C109,C110" Element Tested: "CRQ Inter-bucket Correlation (bkts 7-9, 10-12)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC128() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_12, S_CRQ_13, S_CRQ_14, S_CRQ_15, S_CRQ_16, S_CRQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC128", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 7-9, 10-12)", "S_CRQ_12,S_CRQ_13,S_CRQ_14,S_CRQ_15,S_CRQ_16,S_CRQ_17",
        "C93-C98,C109,C110", "Total", " 128,959,054 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("128959054"), amount);
  }

  /**
   * Required Passes: "C82,C84,C86,C88,C90,C92-C98,C109,C110,C118,C119,C123-C128" Element Tested: CRQ Inter-bucket
   * Correlation (all) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC129() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3, S_CRQ_5, S_CRQ_7, S_CRQ_9, S_CRQ_11, S_CRQ_12, S_CRQ_13, S_CRQ_14, S_CRQ_15, S_CRQ_16, S_CRQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC129", "Credit", "Delta", "CRQ Inter-bucket Correlation (all)",
        "S_CRQ_1,S_CRQ_3,S_CRQ_5,S_CRQ_7,S_CRQ_9,S_CRQ_11,S_CRQ_12,S_CRQ_13,S_CRQ_14,S_CRQ_15,S_CRQ_16,S_CRQ_17", "C82,C84,C86,C88,C90,C92-C98,C109,C110,C118,C119,C123-C128",
        "Total", " 120,487,095 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("120487095"), amount);
  }

  /**
   * Required Passes: "C82,C84,C86,C88,C90,C92-C99,C109,C110,C118,C119,C123-C129" Element Tested: CRQ Inter-bucket
   * Correlation (all + residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC130() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3, S_CRQ_5, S_CRQ_7, S_CRQ_9, S_CRQ_11, S_CRQ_12, S_CRQ_13, S_CRQ_14, S_CRQ_15, S_CRQ_16, S_CRQ_17, S_CRQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC130", "Credit", "Delta", "CRQ Inter-bucket Correlation (all + residual)",
        "S_CRQ_1,S_CRQ_3,S_CRQ_5,S_CRQ_7,S_CRQ_9,S_CRQ_11,S_CRQ_12,S_CRQ_13,S_CRQ_14,S_CRQ_15,S_CRQ_16,S_CRQ_17,S_CRQ_18",
        "C82,C84,C86,C88,C90,C92-C99,C109,C110,C118,C119,C123-C129", "Total", " 240,187,095 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("240187095"), amount);
  }

  /**
   * Required Passes: "C104,C105" Element Tested: CRQ Base Corr Netting Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC131() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_23, S_CRQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC131", "Credit", "Delta", "CRQ Base Corr Netting", "S_CRQ_23,S_CRQ_24", "C104,C105", "Total", " -   ", " -   ", " -   ", " 3,000,000 ",
        " -   ", new BigDecimal("3000000"), amount);
  }

  /**
   * Required Passes: "C104-C106,C131" Element Tested: CRQ Base Corr Correlation Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC132() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_23, S_CRQ_24, S_CRQ_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC132", "Credit", "Delta", "CRQ Base Corr Correlation", "S_CRQ_23,S_CRQ_24,S_CRQ_25", "C104-C106,C131", "Total", " -   ", " -   ", " -   ",
        " 5,546,170 ", " -   ", new BigDecimal("5546170"), amount);
  }

  /**
   * Required Passes: C82-C132 Element Tested: All Credit Qualifying (no multiplier) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC133() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CRQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC133", "Credit", "Delta", "All Credit Qualifying (no multiplier)", "All S_CRQ", "C82-C132", "Total", " 345,351,405 ", " -   ", " -   ",
        " 5,546,170 ", " -   ", new BigDecimal("350897575"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC134() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC134", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_1", "None", "Total", " 1,680,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1680000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC135() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC135", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_2", "None", "Total", " 840,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("840000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC136() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC136", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_3", "None", "Total", " 840,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("840000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC137() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC137", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_4", "None", "Total", " 560,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("560000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC138() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC138", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_5", "None", "Total", " 840,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("840000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC139() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC139", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_6", "None", "Total", " 1,120,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1120000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC140() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC140", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_7", "None", "Total", " 520,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("520000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC141() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC141", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_8", "None", "Total", " 260,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("260000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC142() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC142", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_9", "None", "Total", " 260,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("260000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC143() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC143", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_10", "None", "Total", " 260,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("260000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC144() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC144", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_11", "None", "Total", " 260,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("260000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC145() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC145", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_12", "None", "Total", " 390,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("390000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC146() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC146", "Credit", "Delta", "CRNQ Risk Weight (residual)", "S_CRNQ_13", "None", "Total", " 520,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("520000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC147() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC147", "Credit", "Delta", "CRNQ Risk Weight (residual)", "S_CRNQ_14", "None", "Total", " 260,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("260000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC148() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC148", "Credit", "Delta", "CRNQ Risk Weight (residual)", "S_CRNQ_15", "None", "Total", " 390,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("390000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC149() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC149", "Credit", "Delta", "CRNQ Risk Weight (residual)", "S_CRNQ_16", "None", "Total", " 130,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("130000000"), amount);
  }

  /**
   * Required Passes: "C134,C135" Element Tested: CRNQ Concentration (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC150() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_1, S_CRNQ_2, S_CRNQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC150", "Credit", "Delta", "CRNQ Concentration (bkt 1)", "S_CRNQ_1,S_CRNQ_2,S_CRNQ_2", "C134,C135", "Total", " 3,602,373,954 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("3602373954"), amount);
  }

  /**
   * Required Passes: "C140,C143" Element Tested: CRNQ Concentration (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC151() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_7, S_CRNQ_7, S_CRNQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC151", "Credit", "Delta", "CRNQ Concentration (bkt 2)", "S_CRNQ_7,S_CRNQ_7,S_CRNQ_10", "C140,C143", "Total", " 1,163,917,523 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("1163917523"), amount);
  }

  /**
   * Required Passes: "C146,C148" Element Tested: CRNQ Concentration (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC152() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_13, S_CRNQ_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC152", "Credit", "Delta", "CRNQ Concentration (residual)", "S_CRNQ_13,S_CRNQ_15", "C146,C148", "Total", " 935,638,819 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("935638819"), amount);
  }

  /**
   * Required Passes: "C134,C135,C150" Element Tested: "CRNQ Intra-bucket correlation (same name, same sign)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC153() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_1, S_CRNQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC153", "Credit", "Delta", "CRNQ Intra-bucket correlation (same name, same sign)", "S_CRNQ_1,S_CRNQ_2", "C134,C135,C150", "Total",
        " 2,417,099,088 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("2417099088"), amount);
  }

  /**
   * Required Passes: "C135,C136" Element Tested: "CRNQ Intra-bucket correlation (same name, opp sign)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC154() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_2, S_CRNQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC154", "Credit", "Delta", "CRNQ Intra-bucket correlation (same name, opp sign)", "S_CRNQ_2,S_CRNQ_3", "C135,C136", "Total", " 504,000,000 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("504000000"), amount);
  }

  /**
   * Required Passes: "C136,C137" Element Tested: "CRNQ Intra-bucket correlation (diff name, same sign)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC155() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_3, S_CRNQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC155", "Credit", "Delta", "CRNQ Intra-bucket correlation (diff name, same sign)", "S_CRNQ_3,S_CRNQ_4", "C136,C137", "Total",
        " 1,128,368,734 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("1128368734"), amount);
  }

  /**
   * Required Passes: "C136,C139" Element Tested: "CRNQ Intra-bucket correlation (diff name, opp sign)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC156() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_3, S_CRNQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC156", "Credit", "Delta", "CRNQ Intra-bucket correlation (diff name, opp sign)", "S_CRNQ_3,S_CRNQ_6", "C136,C139", "Total",
        " 1,570,997,136 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("1570997136"), amount);
  }

  /**
   * Required Passes: "C146,C147" Element Tested: CRNQ Intra-bucket correlation (residual) Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC157() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_13, S_CRNQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC157", "Credit", "Delta", "CRNQ Intra-bucket correlation (residual)", "S_CRNQ_13,S_CRNQ_14", "C146,C147", "Total", " 450,333,210 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("450333210"), amount);
  }

  /**
   * Required Passes: "C134,C140" Element Tested: CRNQ Intra-bucket correlation (exceeds concentration threshold) Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC158() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_1, S_CRNQ_1, S_CRNQ_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC158", "Credit", "Delta", "CRNQ Intra-bucket correlation (exceeds concentration threshold)", "S_CRNQ_1,S_CRNQ_1,S_CRNQ_7", "C134,C140",
        "Total", " 3,600,000,104 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("3600000104"), amount);
  }

  /**
   * Required Passes: "C134,C140,C158" Element Tested: "CRNQ Inter-bucket correlation (same sign, pos)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC159() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_1, S_CRNQ_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC159", "Credit", "Delta", "CRNQ Inter-bucket correlation (same sign, pos)", "S_CRNQ_1,S_CRNQ_7", "C134,C140,C158", "Total",
        " 1,547,229,783 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("1547229783"), amount);
  }

  /**
   * Required Passes: "C136,C141" Element Tested: "CRNQ Inter-bucket correlation (same sign, neg)" Risk Measure: Delta
   * Group: Credit
   */
  @Test
  public void testC160() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_3, S_CRNQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC160", "Credit", "Delta", "CRNQ Inter-bucket correlation (same sign, neg)", "S_CRNQ_3,S_CRNQ_8", "C136,C141", "Total", " 973,611,832 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("973611832"), amount);
  }

  /**
   * Required Passes: "C135,C141" Element Tested: CRNQ Inter-bucket correlation (diff sign) Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC161() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_2, S_CRNQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC161", "Credit", "Delta", "CRNQ Inter-bucket correlation (diff sign)", "S_CRNQ_2,S_CRNQ_8", "C135,C141", "Total", " 773,614,891 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("773614891"), amount);
  }

  /**
   * Required Passes: "C135,C141,C146,C161" Element Tested: CRNQ Inter-bucket correlation (w/residual) Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC162() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_2, S_CRNQ_8, S_CRNQ_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC162", "Credit", "Delta", "CRNQ Inter-bucket correlation (w/residual)", "S_CRNQ_2,S_CRNQ_8,S_CRNQ_13", "C135,C141,C146,C161", "Total",
        " 1,293,614,891 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("1293614891"), amount);
  }

  /**
   * Required Passes: C134-C162 Element Tested: All Credit Non Qualifying Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC163() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CRNQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC163", "Credit", "Delta", "All Credit Non Qualifying", "All S_CRNQ", "C134-C162", "Total", " 2,612,979,889 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("2612979889"), amount);
  }

  /**
   * Required Passes: C82-C163 Element Tested: All Credit Qualifying and Non-Qualifying Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC164() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC164", "Credit", "Delta", "All Credit Qualifying and Non-Qualifying", "All S_CRQ,S_CRNQ", "C82-C163", "Total", " 2,814,519,403 ", " -   ",
        " -   ", " 5,546,170 ", " -   ", new BigDecimal("2817983743"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 1) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC165() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC165", "Equities", "Delta", "EQ Risk Weight (bkt 1)", "S_EQ_1", "None", "Total", " 156,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("156000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 1) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC166() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC166", "Equities", "Delta", "EQ Risk Weight (bkt 1)", "S_EQ_2", "None", "Total", " 26,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("26000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 2) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC167() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC167", "Equities", "Delta", "EQ Risk Weight (bkt 2)", "S_EQ_3", "None", "Total", " 56,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("56000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 2) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC168() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC168", "Equities", "Delta", "EQ Risk Weight (bkt 2)", "S_EQ_4", "None", "Total", " 28,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("28000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 3) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC169() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC169", "Equities", "Delta", "EQ Risk Weight (bkt 3)", "S_EQ_5", "None", "Total", " 68,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("68000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 3) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC170() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC170", "Equities", "Delta", "EQ Risk Weight (bkt 3)", "S_EQ_6", "None", "Total", " 34,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("34000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 4) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC171() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC171", "Equities", "Delta", "EQ Risk Weight (bkt 4)", "S_EQ_7", "None", "Total", " 56,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("56000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 4) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC172() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC172", "Equities", "Delta", "EQ Risk Weight (bkt 4)", "S_EQ_8", "None", "Total", " 28,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("28000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 5) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC173() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC173", "Equities", "Delta", "EQ Risk Weight (bkt 5)", "S_EQ_9", "None", "Total", " 230,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("230000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 5) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC174() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC174", "Equities", "Delta", "EQ Risk Weight (bkt 5)", "S_EQ_10", "None", "Total", " 46,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("46000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 6) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC175() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC175", "Equities", "Delta", "EQ Risk Weight (bkt 6)", "S_EQ_11", "None", "Total", " 100,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("100000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 6) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC176() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC176", "Equities", "Delta", "EQ Risk Weight (bkt 6)", "S_EQ_12", "None", "Total", " 50,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("50000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 7) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC177() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC177", "Equities", "Delta", "EQ Risk Weight (bkt 7)", "S_EQ_13", "None", "Total", " 116,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("116000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 7) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC178() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC178", "Equities", "Delta", "EQ Risk Weight (bkt 7)", "S_EQ_14", "None", "Total", " 58,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("58000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 8) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC179() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC179", "Equities", "Delta", "EQ Risk Weight (bkt 8)", "S_EQ_15", "None", "Total", " 108,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("108000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 8) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC180() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC180", "Equities", "Delta", "EQ Risk Weight (bkt 8)", "S_EQ_16", "None", "Total", " 54,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("54000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 9) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC181() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC181", "Equities", "Delta", "EQ Risk Weight (bkt 9)", "S_EQ_17", "None", "Total", " 12,800,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("12800000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 9) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC182() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC182", "Equities", "Delta", "EQ Risk Weight (bkt 9)", "S_EQ_18", "None", "Total", " 32,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("32000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 10) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC183() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC183", "Equities", "Delta", "EQ Risk Weight (bkt 10)", "S_EQ_19", "None", "Total", " 19,200,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("19200000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 10) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC184() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC184", "Equities", "Delta", "EQ Risk Weight (bkt 10)", "S_EQ_20", "None", "Total", " 16,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("16000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 11) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC185() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC185", "Equities", "Delta", "EQ Risk Weight (bkt 11)", "S_EQ_21", "None", "Total", " 18,000,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("18000000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 11) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC186() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC186", "Equities", "Delta", "EQ Risk Weight (bkt 11)", "S_EQ_22", "None", "Total", " 36,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("36000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 11) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC187() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC187", "Equities", "Delta", "EQ Risk Weight (bkt 11)", "S_EQ_23", "None", "Total", " 18,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("18000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 12) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC188() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC188", "Equities", "Delta", "EQ Risk Weight (bkt 12)", "S_EQ_24", "None", "Total", " 54,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("54000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 12) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC189() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC189", "Equities", "Delta", "EQ Risk Weight (bkt 12)", "S_EQ_25", "None", "Total", " 36,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("36000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 12) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC190() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_26);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC190", "Equities", "Delta", "EQ Risk Weight (bkt 12)", "S_EQ_26", "None", "Total", " 18,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("18000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (residual) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC191() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC191", "Equities", "Delta", "EQ Risk Weight (residual)", "S_EQ_27", "None", "Total", " 17,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("17000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (residual) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC192() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_28);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC192", "Equities", "Delta", "EQ Risk Weight (residual)", "S_EQ_28", "None", "Total", " 10,200,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("10200000"), amount);
  }

  /**
   * Required Passes: C165 Element Tested: EQ Concentration (bkt 1-4) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC193() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC193", "Equities", "Delta", "EQ Concentration (bkt 1-4)", "S_EQ_1,S_EQ_1", "C165", "Total", " 341,778,876 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("341778876"), amount);
  }

  /**
   * Required Passes: C173 Element Tested: EQ Concentration (bkt 5-8) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC194() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_9, S_EQ_9, S_EQ_9, S_EQ_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC194", "Equities", "Delta", "EQ Concentration (bkt 5-8)", "S_EQ_9,S_EQ_9,S_EQ_9,S_EQ_9", "C173", "Total", " 1,269,720,629 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("1269720629"), amount);
  }

  /**
   * Required Passes: C182 Element Tested: EQ Concentration (bkt 9) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC195() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_18, S_EQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC195", "Equities", "Delta", "EQ Concentration (bkt 9)", "S_EQ_18,S_EQ_18", "C182", "Total", " 76,494,631 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("76494631"), amount);
  }

  /**
   * Required Passes: C183 Element Tested: EQ Concentration (bkt 10) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC196() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_19, S_EQ_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC196", "Equities", "Delta", "EQ Concentration (bkt 10)", "S_EQ_19,S_EQ_19", "C183", "Total", " 54,305,801 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("54305801"), amount);
  }

  /**
   * Required Passes: C185 Element Tested: EQ Concentration (bkt 11-12) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC197() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC197", "Equities", "Delta", "EQ Concentration (bkt 11-12)",
        "S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21", "C185", "Total", " 392,792,202,425 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("392792202425"), amount);
  }

  /**
   * Required Passes: C191 Element Tested: EQ Concentration (residual) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC198() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_27, S_EQ_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC198", "Equities", "Delta", "EQ Concentration (residual)", "S_EQ_27,S_EQ_27", "C191", "Total", " 43,893,811 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("43893811"), amount);
  }

  /**
   * Required Passes: "C165,C166,C193" Element Tested: EQ Intra Bucket Correlation (Bkt 1) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC199() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC199", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 1)", "S_EQ_1,S_EQ_2", "C165,C166,C193", "Total", " 162,702,674 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("162702674"), amount);
  }

  /**
   * Required Passes: "C167,C168" Element Tested: EQ Intra Bucket Correlation (Bkt 2) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC200() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_3, S_EQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC200", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 2)", "S_EQ_3,S_EQ_4", "C167,C168", "Total", " 56,557,228 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("56557228"), amount);
  }

  /**
   * Required Passes: "C169,C170" Element Tested: EQ Intra Bucket Correlation (Bkt 3) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC201() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_5, S_EQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC201", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 3)", "S_EQ_5,S_EQ_6", "C169,C170", "Total", " 66,278,202 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("66278202"), amount);
  }

  /**
   * Required Passes: "C171,C172" Element Tested: EQ Intra Bucket Correlation (Bkt 4) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC202() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_7, S_EQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC202", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 4)", "S_EQ_7,S_EQ_8", "C171,C172", "Total", " 68,813,952 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("68813952"), amount);
  }

  /**
   * Required Passes: "C173,C174,C194" Element Tested: EQ Intra Bucket Correlation (Bkt 5) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC203() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_9, S_EQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC203", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 5)", "S_EQ_9,S_EQ_10", "C173,C174,C194", "Total", " 244,709,624 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("244709624"), amount);
  }

  /**
   * Required Passes: "C175,C176" Element Tested: EQ Intra Bucket Correlation (Bkt 6) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC204() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_11, S_EQ_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC204", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 6)", "S_EQ_11,S_EQ_12", "C175,C176", "Total", " 94,868,330 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("94868330"), amount);
  }

  /**
   * Required Passes: "C177,C178" Element Tested: EQ Intra Bucket Correlation (Bkt 7) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC205() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_13, S_EQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC205", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 7)", "S_EQ_13,S_EQ_14", "C177,C178", "Total", " 109,434,181 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("109434181"), amount);
  }

  /**
   * Required Passes: "C179,C180" Element Tested: EQ Intra Bucket Correlation (Bkt 8) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC206() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_15, S_EQ_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC206", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 8)", "S_EQ_15,S_EQ_16", "C179,C180", "Total", " 135,753,895 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("135753895"), amount);
  }

  /**
   * Required Passes: "C181,C182,C195" Element Tested: EQ Intra Bucket Correlation (Bkt 9) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC207() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_17, S_EQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC207", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 9)", "S_EQ_17,S_EQ_18", "C181,C182,C195", "Total", " 32,127,745 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("32127745"), amount);
  }

  /**
   * Required Passes: "C183,C184,C196" Element Tested: EQ Intra Bucket Correlation (Bkt 10) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC208() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_19, S_EQ_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC208", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 10)", "S_EQ_19,S_EQ_20", "C183,C184,C196", "Total", " 22,400,000 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("22400000"), amount);
  }

  /**
   * Required Passes: "C186,C187" Element Tested: EQ Intra Bucket Correlation (Bkt 11) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC209() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_22, S_EQ_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC209", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 11)", "S_EQ_22,S_EQ_23", "C186,C187", "Total", " 32,199,379 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("32199379"), amount);
  }

  /**
   * Required Passes: "C189,C190" Element Tested: EQ Intra Bucket Correlation (Bkt 12) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC210() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_25, S_EQ_26);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC210", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 12)", "S_EQ_25,S_EQ_26", "C189,C190", "Total", " 32,199,379 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("32199379"), amount);
  }

  /**
   * Required Passes: "C165,C166,C193,C199" Element Tested: EQ Intra Bucket Correlation (exceeds concentration
   * threshold) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC211() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_1, S_EQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC211", "Equities", "Delta", "EQ Intra Bucket Correlation (exceeds concentration threshold)", "S_EQ_1,S_EQ_1,S_EQ_2", "C165,C166,C193,C199",
        "Total", " 347,000,173 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("347000173"), amount);
  }

  /**
   * Required Passes: "C165,C168,C193" Element Tested: "EQ Inter-bucket Correlation (same sign, pos)" Risk Measure:
   * Delta Group: Equities
   */
  @Test
  public void testC212() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC212", "Equities", "Delta", "EQ Inter-bucket Correlation (same sign, pos)", "S_EQ_1,S_EQ_4", "C165,C168,C193", "Total", " 163,912,172 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("163912172"), amount);
  }

  /**
   * Required Passes: "C167,C170" Element Tested: "EQ Inter-bucket Correlation (same sign, neg)" Risk Measure: Delta
   * Group: Equities
   */
  @Test
  public void testC213() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_3, S_EQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC213", "Equities", "Delta", "EQ Inter-bucket Correlation (same sign, neg)", "S_EQ_3,S_EQ_6", "C167,C170", "Total", " 72,415,468 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("72415468"), amount);
  }

  /**
   * Required Passes: "C165,C167,C193" Element Tested: EQ Inter-bucket Correlation (diff sign) Risk Measure: Delta
   * Group: Equities
   */
  @Test
  public void testC214() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC214", "Equities", "Delta", "EQ Inter-bucket Correlation (diff sign)", "S_EQ_1,S_EQ_3", "C165,C167,C193", "Total", " 154,847,021 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("154847021"), amount);
  }

  /**
   * Required Passes: "C165,C167,C191,C193,C198,C214" Element Tested: EQ Inter-bucket Correlation (w/residual) Risk
   * Measure: Delta Group: Equities
   */
  @Test
  public void testC215() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3, S_EQ_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC215", "Equities", "Delta", "EQ Inter-bucket Correlation (w/residual)", "S_EQ_1,S_EQ_3,S_EQ_27", "C165,C167,C191,C193,C198,C214", "Total",
        " 171,847,021 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("171847021"), amount);
  }

  /**
   * Required Passes: "C165,C167,C169,C171,C173,C175,C193,C194,C214" Element Tested: "EQ Inter-bucket Correlation (bks
   * 1-3, 4-6)" Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC216() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3, S_EQ_5, S_EQ_7, S_EQ_9, S_EQ_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC216", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 1-3, 4-6)", "S_EQ_1,S_EQ_3,S_EQ_5,S_EQ_7,S_EQ_9,S_EQ_11",
        "C165,C167,C169,C171,C173,C175,C193,C194,C214", "Total", " 288,358,666 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("288358666"), amount);
  }

  /**
   * Required Passes: "C165,C167,C169,C177,C179,C181,C193,C214" Element Tested: "EQ Inter-bucket Correlation (bks 1-3,
   * 7-9)" Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC217() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3, S_EQ_5, S_EQ_13, S_EQ_15, S_EQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC217", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 1-3, 7-9)", "S_EQ_1,S_EQ_3,S_EQ_5,S_EQ_13,S_EQ_15,S_EQ_17",
        "C165,C167,C169,C177,C179,C181,C193,C214", "Total", " 222,721,782 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("222721782"), amount);
  }

  /**
   * Required Passes: "C165,C167,C169,C183,C185,C188,C193,C196,C197,C214" Element Tested: "EQ Inter-bucket Correlation
   * (bks 1-3, 10-12)" Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC218() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3, S_EQ_5, S_EQ_19, S_EQ_21, S_EQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC218", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 1-3, 10-12)", "S_EQ_1,S_EQ_3,S_EQ_5,S_EQ_19,S_EQ_21,S_EQ_24",
        "C165,C167,C169,C183,C185,C188,C193,C196,C197,C214", "Total", " 18,059,756,588 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("18059756588"), amount);
  }

  /**
   * Required Passes: "C171,C173,C175,C177,C179,C181,C194" Element Tested: "EQ Inter-bucket Correlation (bks 4-6, 7-9)"
   * Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC219() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_7, S_EQ_9, S_EQ_11, S_EQ_13, S_EQ_15, S_EQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC219", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 4-6, 7-9)", "S_EQ_7,S_EQ_9,S_EQ_11,S_EQ_13,S_EQ_15,S_EQ_17",
        "C171,C173,C175,C177,C179,C181,C194", "Total", " 261,969,097 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("261969097"), amount);
  }

  /**
   * Required Passes: "C171,C173,C175,C183,C185,C188,C194,C196,C197" Element Tested: "EQ Inter-bucket Correlation (bks
   * 4-6, 10-12)" Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC220() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_7, S_EQ_9, S_EQ_11, S_EQ_19, S_EQ_21, S_EQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC220", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 4-6, 10-12)", "S_EQ_7,S_EQ_9,S_EQ_11,S_EQ_19,S_EQ_21,S_EQ_24",
        "C171,C173,C175,C183,C185,C188,C194,C196,C197", "Total", " 18,048,203,818 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("18048203818"), amount);
  }

  /**
   * Required Passes: "C177,C179,C181,C183,C185,C188,C196,C197" Element Tested: "EQ Inter-bucket Correlation (bks 7-9,
   * 10-12)" Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC221() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_13, S_EQ_15, S_EQ_17, S_EQ_19, S_EQ_21, S_EQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC221", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 7-9, 10-12)", "S_EQ_13,S_EQ_15,S_EQ_17,S_EQ_19,S_EQ_21,S_EQ_24",
        "C177,C179,C181,C183,C185,C188,C196,C197", "Total", " 18,035,193,539 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("18035193539"), amount);
  }

  /**
   * Required Passes: "C165,C167,C169,C171,C173,C175,C177,C179,C181,C183,C185,C188,C193,C194,C196,C197,C214,C216-C221"
   * Element Tested: EQ Inter-bucket Correlation (all) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC222() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3, S_EQ_5, S_EQ_7, S_EQ_9, S_EQ_11, S_EQ_13, S_EQ_15, S_EQ_17, S_EQ_19, S_EQ_21, S_EQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC222", "Equities", "Delta", "EQ Inter-bucket Correlation (all)",
        "S_EQ_1,S_EQ_3,S_EQ_5,S_EQ_7,S_EQ_9,S_EQ_11,S_EQ_13,S_EQ_15,S_EQ_17,S_EQ_19,S_EQ_21,S_EQ_24",
        "C165,C167,C169,C171,C173,C175,C177,C179,C181,C183,C185,C188,C193,C194,C196,C197,C214,C216-C221", "Total", " 18,084,782,657 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("18084782657"), amount);
  }

  /**
   * Required Passes: C165-C222 Element Tested: All Equity Sensitivities Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC223() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_EQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC223", "Equities", "Delta", "All Equity Sensitivities", "All S_EQ", "C165-C222", "Total", " 18,106,127,194 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("18106127194"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 1) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC224() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC224", "Commodities", "Delta", "CM Risk Weight (bkt 1)", "S_CM_1", "None", "Total", " 4,050,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("4050000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 1) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC225() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC225", "Commodities", "Delta", "CM Risk Weight (bkt 1)", "S_CM_2", "None", "Total", " 27,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("27000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 2) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC226() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC226", "Commodities", "Delta", "CM Risk Weight (bkt 2)", "S_CM_3", "None", "Total", " 43,500,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("43500000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 2) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC227() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC227", "Commodities", "Delta", "CM Risk Weight (bkt 2)", "S_CM_4", "None", "Total", " 29,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("29000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 3) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC228() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC228", "Commodities", "Delta", "CM Risk Weight (bkt 3)", "S_CM_5", "None", "Total", " 11,880,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("11880000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 3) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC229() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC229", "Commodities", "Delta", "CM Risk Weight (bkt 3)", "S_CM_6", "None", "Total", " 33,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("33000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 4) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC230() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC230", "Commodities", "Delta", "CM Risk Weight (bkt 4)", "S_CM_7", "None", "Total", " 250,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("250000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 4) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC231() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC231", "Commodities", "Delta", "CM Risk Weight (bkt 4)", "S_CM_8", "None", "Total", " 25,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("25000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 5) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC232() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC232", "Commodities", "Delta", "CM Risk Weight (bkt 5)", "S_CM_9", "None", "Total", " 350,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("350000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 5) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC233() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC233", "Commodities", "Delta", "CM Risk Weight (bkt 5)", "S_CM_10", "None", "Total", " 35,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("35000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 6) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC234() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC234", "Commodities", "Delta", "CM Risk Weight (bkt 6)", "S_CM_11", "None", "Total", " 15,600,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("15600000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 6) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC235() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC235", "Commodities", "Delta", "CM Risk Weight (bkt 6)", "S_CM_12", "None", "Total", " 24,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("24000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 7) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC236() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC236", "Commodities", "Delta", "CM Risk Weight (bkt 7)", "S_CM_13", "None", "Total", " 400,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("400000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 8) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC237() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC237", "Commodities", "Delta", "CM Risk Weight (bkt 8)", "S_CM_14", "None", "Total", " 15,900,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("15900000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 8) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC238() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC238", "Commodities", "Delta", "CM Risk Weight (bkt 8)", "S_CM_15", "None", "Total", " 53,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("53000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 9) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC239() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC239", "Commodities", "Delta", "CM Risk Weight (bkt 9)", "S_CM_16", "None", "Total", " 440,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("440000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 9) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC240() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC240", "Commodities", "Delta", "CM Risk Weight (bkt 9)", "S_CM_17", "None", "Total", " 44,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("44000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 10) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC241() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC241", "Commodities", "Delta", "CM Risk Weight (bkt 10)", "S_CM_18", "None", "Total", " 2,958,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("2958000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 10) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC242() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC242", "Commodities", "Delta", "CM Risk Weight (bkt 10)", "S_CM_19", "None", "Total", " 58,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("58000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 11) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC243() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC243", "Commodities", "Delta", "CM Risk Weight (bkt 11)", "S_CM_20", "None", "Total", " 6,000,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("6000000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 11) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC244() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC244", "Commodities", "Delta", "CM Risk Weight (bkt 11)", "S_CM_21", "None", "Total", " 20,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("20000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 12) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC245() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC245", "Commodities", "Delta", "CM Risk Weight (bkt 12)", "S_CM_22", "None", "Total", " 16,800,000,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("16800000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 12) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC246() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC246", "Commodities", "Delta", "CM Risk Weight (bkt 12)", "S_CM_23", "None", "Total", " 21,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("21000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 13) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC247() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC247", "Commodities", "Delta", "CM Risk Weight (bkt 13)", "S_CM_24", "None", "Total", " 260,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("260000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 13) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC248() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC248", "Commodities", "Delta", "CM Risk Weight (bkt 13)", "S_CM_25", "None", "Total", " 13,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("13000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 14) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC249() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_26);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC249", "Commodities", "Delta", "CM Risk Weight (bkt 14)", "S_CM_26", "None", "Total", " 160,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("160000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 14) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC250() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC250", "Commodities", "Delta", "CM Risk Weight (bkt 14)", "S_CM_27", "None", "Total", " 16,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("16000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 15) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC251() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_28);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC251", "Commodities", "Delta", "CM Risk Weight (bkt 15)", "S_CM_28", "None", "Total", " 130,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("130000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 15) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC252() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_29);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC252", "Commodities", "Delta", "CM Risk Weight (bkt 15)", "S_CM_29", "None", "Total", " 13,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("13000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 16) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC253() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_30);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC253", "Commodities", "Delta", "CM Risk Weight (bkt 16)", "S_CM_30", "None", "Total", " 1,450,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1450000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 16) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC254() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_31);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC254", "Commodities", "Delta", "CM Risk Weight (bkt 16)", "S_CM_31", "None", "Total", " 116,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("116000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 17) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC255() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC255", "Commodities", "Delta", "CM Risk Weight (bkt 17)", "S_CM_32", "None", "Total", " 22,100,000,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("22100000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 17) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC256() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC256", "Commodities", "Delta", "CM Risk Weight (bkt 17)", "S_CM_33", "None", "Total", " 34,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("34000000"), amount);
  }

  /**
   * Required Passes: C224 Element Tested: CM Concentration (bkt 1) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC257() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC257", "Commodities", "Delta", "CM Concentration (bkt 1)", "S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1", "C224",
        "Total", " 89,088,122,375 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("89088122375"), amount);
  }

  /**
   * Required Passes: C226 Element Tested: CM Concentration (bkt 2) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC258() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC258", "Commodities", "Delta", "CM Concentration (bkt 2)", "S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3", "C226",
        "Total", " 1,162,586,402,319 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("1162586402319"), amount);
  }

  /**
   * Required Passes: C228 Element Tested: CM Concentration (bkt 3-5) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC259() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC259", "Commodities", "Delta", "CM Concentration (bkt 3-5)", "S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5",
        "C228", "Total", " 172,879,393,526 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("172879393526"), amount);
  }

  /**
   * Required Passes: C234 Element Tested: CM Concentration (bkt 6-7) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC260() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC260", "Commodities", "Delta", "CM Concentration (bkt 6-7)",
        "S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11", "C234", "Total", " 222,334,207,894 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("222334207894"), amount);
  }

  /**
   * Required Passes: C237 Element Tested: CM Concentration (bkt 8-9) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC261() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC261", "Commodities", "Delta", "CM Concentration (bkt 8-9)",
        "S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14", "C237", "Total", " 167,600,715,989 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("167600715989"), amount);
  }

  /**
   * Required Passes: C241 Element Tested: CM Concentration (bkt 10) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC262() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_18, S_CM_18, S_CM_18, S_CM_18, S_CM_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC262", "Commodities", "Delta", "CM Concentration (bkt 10)", "S_CM_18,S_CM_18,S_CM_18,S_CM_18,S_CM_18", "C241", "Total", " 32,751,907,020 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("32751907020"), amount);
  }

  /**
   * Required Passes: C243 Element Tested: CM Concentration (bkt 11) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC263() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC263", "Commodities", "Delta", "CM Concentration (bkt 11)",
        "S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20", "C243", "Total", " 142,749,285,429 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("142749285429"), amount);
  }

  /**
   * Required Passes: C245 Element Tested: CM Concentration (bkt 12) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC264() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC264", "Commodities", "Delta", "CM Concentration (bkt 12)",
        "S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22", "C245", "Total", " 375,659,420,220 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("375659420220"), amount);
  }

  /**
   * Required Passes: C247 Element Tested: CM Concentration (bkt 13-15) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC265() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC265", "Commodities", "Delta", "CM Concentration (bkt 13-15)",
        "S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24", "C247", "Total", " 3,676,955,262 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("3676955262"), amount);
  }

  /**
   * Required Passes: C253 Element Tested: CM Concentration (bkt 16) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC266() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC266", "Commodities", "Delta", "CM Concentration (bkt 16)",
        "S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30", "C253", "Total", " 31,793,353,200 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("31793353200"), amount);
  }

  /**
   * Required Passes: C255 Element Tested: CM Concentration (bkt 17) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC267() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC267", "Commodities", "Delta", "CM Concentration (bkt 17)",
        "S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32", "C255", "Total", " 398,413,415,939 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("398413415939"), amount);
  }

  /**
   * Required Passes: "C224,C225,C257" Element Tested: CM Intra Bucket Correlation (Bkt 1) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC268() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1, S_CM_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC268", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 1)", "S_CM_1,S_CM_2", "C224,C225,C257", "Total", " 4,072,706,348 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("4072706348"), amount);
  }

  /**
   * Required Passes: "C226,C227,C258" Element Tested: CM Intra Bucket Correlation (Bkt 2) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC269() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3, S_CM_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC269", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 2)", "S_CM_3,S_CM_4", "C226,C227,C258", "Total", " 43,471,580,383 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("43471580383"), amount);
  }

  /**
   * Required Passes: "C228,C229,C259" Element Tested: CM Intra Bucket Correlation (Bkt 3) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC270() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_5, S_CM_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC270", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 3)", "S_CM_5,S_CM_6", "C228,C229,C259", "Total", " 11,848,323,603 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("11848323603"), amount);
  }

  /**
   * Required Passes: "C230,C231" Element Tested: CM Intra Bucket Correlation (Bkt 4) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC271() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_7, S_CM_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC271", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 4)", "S_CM_7,S_CM_8", "C230,C231", "Total", " 274,317,334 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("274317334"), amount);
  }

  /**
   * Required Passes: "C232,C233" Element Tested: CM Intra Bucket Correlation (Bkt 5) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC272() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_9, S_CM_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC272", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 5)", "S_CM_9,S_CM_10", "C232,C233", "Total", " 384,363,110 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("384363110"), amount);
  }

  /**
   * Required Passes: "C234,C235,C260" Element Tested: CM Intra Bucket Correlation (Bkt 6) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC273() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_11, S_CM_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC273", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 6)", "S_CM_11,S_CM_12", "C234,C235,C260", "Total", " 15,578,884,171 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("15578884171"), amount);
  }

  /**
   * Required Passes: "C237,C238,C261" Element Tested: CM Intra Bucket Correlation (Bkt 8) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC274() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_14, S_CM_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC274", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 8)", "S_CM_14,S_CM_15", "C237,C238,C261", "Total", " 15,926,037,015 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("15926037015"), amount);
  }

  /**
   * Required Passes: "C239,C240" Element Tested: CM Intra Bucket Correlation (Bkt 9) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC275() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_16, S_CM_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC275", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 9)", "S_CM_16,S_CM_17", "C239,C240", "Total", " 475,932,768 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("475932768"), amount);
  }

  /**
   * Required Passes: "C241,C242,C262" Element Tested: CM Intra Bucket Correlation (Bkt 10) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC276() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_18, S_CM_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC276", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 10)", "S_CM_18,S_CM_19", "C241,C242,C262", "Total", " 2,931,772,351 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("2931772351"), amount);
  }

  /**
   * Required Passes: "C243,C244,C263" Element Tested: CM Intra Bucket Correlation (Bkt 11) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC277() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_20, S_CM_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC277", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 11)", "S_CM_20,S_CM_21", "C243,C244,C263", "Total", " 5,989,023,293 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("5989023293"), amount);
  }

  /**
   * Required Passes: "C245,C246,C264" Element Tested: CM Intra Bucket Correlation (Bkt 12) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC278() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_22, S_CM_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC278", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 12)", "S_CM_22,S_CM_23", "C245,C246,C264", "Total", " 16,809,670,342 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("16809670342"), amount);
  }

  /**
   * Required Passes: "C247,C248,C265" Element Tested: CM Intra Bucket Correlation (Bkt 13) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC279() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_24, S_CM_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC279", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 13)", "S_CM_24,S_CM_25", "C247,C248,C265", "Total", " 268,757,512 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("268757512"), amount);
  }

  /**
   * Required Passes: "C249,C250" Element Tested: CM Intra Bucket Correlation (Bkt 14) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC280() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_26, S_CM_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC280", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 14)", "S_CM_26,S_CM_27", "C249,C250", "Total", " 157,906,301 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("157906301"), amount);
  }

  /**
   * Required Passes: "C251,C252" Element Tested: CM Intra Bucket Correlation (Bkt 15) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC281() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_28, S_CM_29);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC281", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 15)", "S_CM_28,S_CM_29", "C251,C252", "Total", " 127,903,088 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("127903088"), amount);
  }

  /**
   * Required Passes: "C253,C254,C266" Element Tested: CM Intra Bucket Correlation (Bkt 16) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC282() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_30, S_CM_31);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC282", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 16)", "S_CM_30,S_CM_31", "C253,C254,C266", "Total", " 1,454,632,600 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("1454632600"), amount);
  }

  /**
   * Required Passes: "C255,C256,C267" Element Tested: CM Intra Bucket Correlation (Bkt 17) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC283() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_32, S_CM_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC283", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 17)", "S_CM_32,S_CM_33", "C255,C256,C267", "Total", " 22,134,000,000 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("22134000000"), amount);
  }

  /**
   * Required Passes: "C237,C241,C261,C262" Element Tested: CM Intra Bucket Correlation (exceeds concentration
   * threshold) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC284() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_18, S_CM_18, S_CM_18, S_CM_18, S_CM_18, S_CM_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC284", "Commodities", "Delta", "CM Intra Bucket Correlation (exceeds concentration threshold)",
        "S_CM_18,S_CM_18,S_CM_18,S_CM_18,S_CM_18,S_CM_14", "C237,C241,C261,C262", "Total", " 35,830,671,048 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("35830671048"),
        amount);
  }

  /**
   * Required Passes: "C226,C229,C258" Element Tested: "CM Inter Bucket Correlation (same sign, pos)" Risk Measure:
   * Delta Group: Commodities
   */
  @Test
  public void testC285() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3, S_CM_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC285", "Commodities", "Delta", "CM Inter Bucket Correlation (same sign, pos)", "S_CM_3,S_CM_6", "C226,C229,C258", "Total",
        " 43,531,021,456 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("43531021456"), amount);
  }

  /**
   * Required Passes: "C227,C228,C259" Element Tested: "CM Inter Bucket Correlation (same sign, neg)" Risk Measure:
   * Delta Group: Commodities
   */
  @Test
  public void testC286() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_4, S_CM_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC286", "Commodities", "Delta", "CM Inter Bucket Correlation (same sign, neg)", "S_CM_4,S_CM_5", "C227,C228,C259", "Total",
        " 11,907,264,111 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("11907264111"), amount);
  }

  /**
   * Required Passes: "C226,C228,C258,C259" Element Tested: CM Inter Bucket Correlation (diff signs) Risk Measure: Delta
   * Group: Commodities
   */
  @Test
  public void testC287() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3, S_CM_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC287", "Commodities", "Delta", "CM Inter Bucket Correlation (diff signs)", "S_CM_3,S_CM_5", "C226,C228,C258,C259", "Total",
        " 32,585,855,827 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("32585855827"), amount);
  }

  /**
   * Required Passes: "C226,C228,C254,C258,C259,C287" Element Tested: CM Inter Bucket Correlation (w/residual) Risk
   * Measure: Delta Group: Commodities
   */
  @Test
  public void testC288() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3, S_CM_5, S_CM_31);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC288", "Commodities", "Delta", "CM Inter Bucket Correlation (w/residual)", "S_CM_3,S_CM_5,S_CM_31", "C226,C228,C254,C258,C259,C287",
        "Total", " 32,586,062,297 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("32586062297"), amount);
  }

  /**
   * Required Passes: "C224,C226,C228,C230,C232,C234,C236,C237,C257-C261,C287" Element Tested: "CM Inter Bucket
   * Correlation (bkts 1-4, 5-8)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC289() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1, S_CM_3, S_CM_5, S_CM_7, S_CM_9, S_CM_11, S_CM_13, S_CM_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC289", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 1-4, 5-8)", "S_CM_1,S_CM_3,S_CM_5,S_CM_7,S_CM_9,S_CM_11,S_CM_13,S_CM_14",
        "C224,C226,C228,C230,C232,C234,C236,C237,C257-C261,C287", "Total", " 38,830,298,222 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("38830298222"), amount);
  }

  /**
   * Required Passes: "C224,C226,C228,C230,C239,C241,C243,C245,C257-C259,C262-C264,C287" Element Tested: "CM Inter
   * Bucket Correlation (bkts 1-4, 9-12)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC290() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1, S_CM_3, S_CM_5, S_CM_7, S_CM_16, S_CM_18, S_CM_20, S_CM_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC290", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 1-4, 9-12)",
        "S_CM_1,S_CM_3,S_CM_5,S_CM_7,S_CM_16,S_CM_18,S_CM_20,S_CM_22", "C224,C226,C228,C230,C239,C241,C243,C245,C257-C259,C262-C264,C287", "Total", " 32,956,763,743 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("32956763743"), amount);
  }

  /**
   * Required Passes: "C224,C226,C228,C230,C247,C249,C251,C253,C255,C257-C259,C265-C267,C287" Element Tested: "CM Inter
   * Bucket Correlation (bkts 1-4, 13-17)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC291() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1, S_CM_3, S_CM_5, S_CM_7, S_CM_24, S_CM_26, S_CM_28, S_CM_30, S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC291", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 1-4, 13-17)",
        "S_CM_1,S_CM_3,S_CM_5,S_CM_7,S_CM_24,S_CM_26,S_CM_28,S_CM_30,S_CM_32", "C224,C226,C228,C230,C247,C249,C251,C253,C255,C257-C259,C265-C267,C287", "Total", " 50,676,532,715 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("50676532715"), amount);
  }

  /**
   * Required Passes: "C232,C234,C236,C237,C239,C241,C243,C245,C260-C264,C284" Element Tested: "CM Inter Bucket
   * Correlation (bkts 5-8, 9-12)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC292() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_9, S_CM_11, S_CM_13, S_CM_14, S_CM_16, S_CM_18, S_CM_20, S_CM_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC292", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 5-8, 9-12)",
        "S_CM_9,S_CM_11,S_CM_13,S_CM_14,S_CM_16,S_CM_18,S_CM_20,S_CM_22", "C232,C234,C236,C237,C239,C241,C243,C245,C260-C264,C284", "Total", " 22,978,696,490 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("22978696490"), amount);
  }

  /**
   * Required Passes: "C232,C234,C236,C237,C247,C249,C251,C253,C255,C260,C261,C265-C267" Element Tested: "CM Inter
   * Bucket Correlation (bkts 5-8, 13-17)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC293() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_9, S_CM_11, S_CM_13, S_CM_14, S_CM_24, S_CM_26, S_CM_28, S_CM_30, S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC293", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 5-8, 13-17)",
        "S_CM_9,S_CM_11,S_CM_13,S_CM_14,S_CM_24,S_CM_26,S_CM_28,S_CM_30,S_CM_32", "C232,C234,C236,C237,C247,C249,C251,C253,C255,C260,C261,C265-C267", "Total", " 28,051,210,740 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("28051210740"), amount);
  }

  /**
   * Required Passes: "C239,C241,C243,C245,C247,C249,C251,C253,C255,C262-C267" Element Tested: "CM Inter Bucket
   * Correlation (bkts 9-12, 13-17)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC294() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_16, S_CM_18, S_CM_20, S_CM_22, S_CM_24, S_CM_26, S_CM_28, S_CM_30, S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC294", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 9-12, 13-17)",
        "S_CM_16,S_CM_18,S_CM_20,S_CM_22,S_CM_24,S_CM_26,S_CM_28,S_CM_30,S_CM_32", "C239,C241,C243,C245,C247,C249,C251,C253,C255,C262-C267", "Total", " 25,022,507,316 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("25022507316"), amount);
  }

  /**
   * Required Passes:
   * "C224,C226,C228,C230,C232,C234,C236,C237,C239,C241,C243,C245,C247,C249,C251,C253,C255,C257-C267,C284,C287,C289-C294"
   * Element Tested: CM Inter Bucket Correlation (all) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC295() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities =
        Arrays.asList(S_CM_1, S_CM_3, S_CM_5, S_CM_7, S_CM_9, S_CM_11, S_CM_13, S_CM_14, S_CM_16, S_CM_18, S_CM_20, S_CM_22, S_CM_24, S_CM_26, S_CM_28, S_CM_30, S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC295", "Commodities", "Delta", "CM Inter Bucket Correlation (all)",
        "S_CM_1,S_CM_3,S_CM_5,S_CM_7,S_CM_9,S_CM_11,S_CM_13,S_CM_14,S_CM_16,S_CM_18,S_CM_20,S_CM_22,S_CM_24,S_CM_26,S_CM_28,S_CM_30,S_CM_32",
        "C224,C226,C228,C230,C232,C234,C236,C237,C239,C241,C243,C245,C247,C249,C251,C253,C255,C257-C267,C284,C287,C289-C294", "Total", " 50,897,384,966 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("50897384966"), amount);
  }

  /**
   * Required Passes: C224-C295 Element Tested: All Commodities Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC296() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CM);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC296", "Commodities", "Delta", "All Commodities", "All S_CM", "C224-C295", "Total", " 50,946,483,417 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("50946483417"), amount);
  }

  /**
   * Required Passes: C1-C296 Element Tested: All Delta Sensitivities (no multiplier) Risk Measure: Delta Group: Global
   */
  @Test
  public void testC297() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_EQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC297", "Global", "Delta", "All Delta Sensitivities (no multiplier)", "All S_IR,S_CRQ,S_CRNQ,S_CM,S_FX,S_EQ", "C1-C296", "Total",
        " 122,777,576,190 ", " -   ", " -   ", " 5,546,170 ", " -   ", new BigDecimal("122780567849"), amount);
  }

  /**
   * Required Passes: C1-C297 Element Tested: All Delta Sensitivities (with multiplier) Risk Measure: Delta Group:
   * Global
   */
  @Test
  public void testC298() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = new ArrayList<ProductMultiplier>();
    multipliers.addAll(S_MUL);

    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_EQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC298", "Global", "Delta", "All Delta Sensitivities (with multiplier)", "All S_IR,S_CRQ,S_CRNQ,S_CM,S_FX,S_EQ,S_MUL", "C1-C297", "Total",
        " 122,777,576,190 ", " -   ", " -   ", " 5,546,170 ", " 8,988,637,205 ", new BigDecimal("131769205053"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC299() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC299", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_1", "None", "Total", " -   ", " 126,000,000 ", " 15,335,953 ",
        " -   ", " -   ", new BigDecimal("141335953"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC300() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC300", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_2", "None", "Total", " -   ", " 36,000,000 ", " 6,572,551 ",
        " -   ", " -   ", new BigDecimal("42572551"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC301() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC301", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_3", "None", "Total", " -   ", " 45,000,000 ", " 10,954,252 ",
        " -   ", " -   ", new BigDecimal("55954252"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC302() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC302", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_4", "None", "Total", " -   ", " 36,000,000 ", " 13,145,103 ",
        " -   ", " -   ", new BigDecimal("49145103"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC303() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC303", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_5", "None", "Total", " -   ", " 14,400,000 ", " 10,516,082 ",
        " -   ", " -   ", new BigDecimal("24916082"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC304() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC304", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_6", "None", "Total", " -   ", " 9,000,000 ", " 10,954,252 ",
        " -   ", " -   ", new BigDecimal("19954252"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC305() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC305", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_7", "None", "Total", " -   ", " 9,000,000 ", " 16,431,378 ",
        " -   ", " -   ", new BigDecimal("25431378"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC306() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC306", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_8", "None", "Total", " -   ", " 3,600,000 ", " 13,145,103 ",
        " -   ", " -   ", new BigDecimal("16745103"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC307() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC307", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_9", "None", "Total", " -   ", " 18,000,000 ", " 131,451,025 ",
        " -   ", " -   ", new BigDecimal("149451025"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC308() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC308", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_10", "None", "Total", " -   ", " 18,000,000 ", " 262,902,050 ",
        " -   ", " -   ", new BigDecimal("280902050"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC309() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC309", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_11", "None", "Total", " -   ", " 18,000,000 ", " 788,706,151 ",
        " -   ", " -   ", new BigDecimal("806706151"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC310() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC310", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_12", "None", "Total", " -   ", " 18,000,000 ",
        " 1,713,558,006 ", " -   ", " -   ", new BigDecimal("1731558006"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC311() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC311", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_13", "None", "Total", " -   ", " 18,000,000 ", " -   ",
        " -   ", " -   ", new BigDecimal("18000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC312() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC312", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_14", "None", "Total", " -   ", " 18,000,000 ", " -   ",
        " -   ", " -   ", new BigDecimal("18000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC313() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC313", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_15", "None", "Total", " -   ", " 18,000,000 ", " -   ",
        " -   ", " -   ", new BigDecimal("18000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC314() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC314", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_16", "None", "Total", " -   ", " 14,400,000 ", " 1,752,680 ",
        " -   ", " -   ", new BigDecimal("16152680"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC315() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC315", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_17", "None", "Total", " -   ", " 7,200,000 ", " 1,314,510 ",
        " -   ", " -   ", new BigDecimal("8514510"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC316() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC316", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_18", "None", "Total", " -   ", " 3,600,000 ", " 657,255 ",
        " -   ", " -   ", new BigDecimal("4257255"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC317() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC317", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_19", "None", "Total", " -   ", " 1,800,000 ", " 657,255 ",
        " -   ", " -   ", new BigDecimal("2457255"), amount);
  }

  /**
   * Required Passes: C299 Element Tested: "Concentration (reg vol, well traded)" Risk Measure: Vega & Curvature Group:
   * Rates & Fx
   */
  @Test
  public void testC318() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1, S_IRV_1, S_IRV_1, S_IRV_1, S_IRV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC318", "Rates & Fx", "Vega & Curvature", "Concentration (reg vol, well traded)", "S_IRV_1,S_IRV_1,S_IRV_1,S_IRV_1,S_IRV_1", "C299", "Total",
        " -   ", " 648,810,100 ", " 76,679,765 ", " -   ", " -   ", new BigDecimal("725489864"), amount);
  }

  /**
   * Required Passes: C301 Element Tested: "Concentration (reg vol, less traded)" Risk Measure: Vega & Curvature Group:
   * Rates & Fx
   */
  @Test
  public void testC319() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_3, S_IRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC319", "Rates & Fx", "Vega & Curvature", "Concentration (reg vol, less traded)", "S_IRV_3,S_IRV_3", "C301", "Total", " -   ",
        " 92,827,912 ", " 21,908,504 ", " -   ", " -   ", new BigDecimal("114736416"), amount);
  }

  /**
   * Required Passes: "C301,C316,C319" Element Tested: "Concentration (reg vol, w/inf" Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC320() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_3, S_IRV_3, S_IRV_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC320", "Rates & Fx", "Vega & Curvature", "Concentration (reg vol, w/inf", "S_IRV_3,S_IRV_3,S_IRV_18", "C301,C316,C319", "Total", " -   ",
        " 96,131,718 ", " 22,092,162 ", " -   ", " -   ", new BigDecimal("118223880"), amount);
  }

  /**
   * Required Passes: C300 Element Tested: Concentration (low vol) Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC321() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_2, S_IRV_2, S_IRV_2, S_IRV_2, S_IRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC321", "Rates & Fx", "Vega & Curvature", "Concentration (low vol)", "S_IRV_2,S_IRV_2,S_IRV_2,S_IRV_2,S_IRV_2", "C300", "Total", " -   ",
        " 238,415,824 ", " 32,862,756 ", " -   ", " -   ", new BigDecimal("271278581"), amount);
  }

  /**
   * Required Passes: "C300,C315,C321" Element Tested: "Concentration (low vol, w/inf)" Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC322() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_2, S_IRV_2, S_IRV_2, S_IRV_2, S_IRV_2, S_IRV_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC322", "Rates & Fx", "Vega & Curvature", "Concentration (low vol, w/inf)", "S_IRV_2,S_IRV_2,S_IRV_2,S_IRV_2,S_IRV_2,S_IRV_17",
        "C300,C315,C321", "Total", " -   ", " 246,901,199 ", " 33,235,492 ", " -   ", " -   ", new BigDecimal("280136691"), amount);
  }

  /**
   * Required Passes: C303 Element Tested: Concentration (high vol) Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC323() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_5, S_IRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC323", "Rates & Fx", "Vega & Curvature", "Concentration (high vol)", "S_IRV_5,S_IRV_5", "C303", "Total", " -   ", " 33,255,376 ",
        " 21,032,164 ", " -   ", " -   ", new BigDecimal("54287540"), amount);
  }

  /**
   * Required Passes: "C303,C323" Element Tested: "Concentration (high vol, w/inf)" Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC324() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_5, S_IRV_5, S_IRV_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC324", "Rates & Fx", "Vega & Curvature", "Concentration (high vol, w/inf)", "S_IRV_5,S_IRV_5,S_IRV_20", "C303,C323", "Total", " -   ",
        " 35,127,989 ", " 21,417,029 ", " -   ", " -   ", new BigDecimal("56545018"), amount);
  }

  /**
   * Required Passes: "C299,C307,C318" Element Tested: Intra-currency Correlation (Same Sign - Pos) Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC325() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1, S_IRV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC325", "Rates & Fx", "Vega & Curvature", "Intra-currency Correlation (Same Sign - Pos)", "S_IRV_1,S_IRV_9", "C299,C307,C318", "Total",
        " -   ", " 133,029,621 ", " 135,919,728 ", " -   ", " -   ", new BigDecimal("268949348"), amount);
  }

  /**
   * Required Passes: "C311,C312" Element Tested: Intra-currency Correlation (Same Sign - Neg) Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC326() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_13, S_IRV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC326", "Rates & Fx", "Vega & Curvature", "Intra-currency Correlation (Same Sign - Neg)", "S_IRV_13,S_IRV_14", "C311,C312", "Total", " -   ",
        " 32,896,200 ", " -   ", " -   ", " -   ", new BigDecimal("32896200"), amount);
  }

  /**
   * Required Passes: "C311,C312" Element Tested: "Intra-currency Correlation (Same Sign - Neg, mid theta)" Risk
   * Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC327() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_6, S_IRV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC327", "Rates & Fx", "Vega & Curvature", "Intra-currency Correlation (Same Sign - Neg, mid theta)", "S_IRV_6,S_IRV_14", "C311,C312",
        "Total", " -   ", " 9,859,006 ", " 8,425,947 ", " -   ", " -   ", new BigDecimal("18284953"), amount);
  }

  /**
   * Required Passes: "C300,C313,C321" Element Tested: Intra-currency Correlation (Opposite sign) Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC328() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_2, S_IRV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC328", "Rates & Fx", "Vega & Curvature", "Intra-currency Correlation (Opposite sign)", "S_IRV_2,S_IRV_15", "C300,C313,C321", "Total",
        " -   ", " 18,706,149 ", " 2,590,105 ", " -   ", " -   ", new BigDecimal("21296254"), amount);
  }

  /**
   * Required Passes: "C300,C313,C315,C321,C322,C328" Element Tested: "Intra-currency Correlation (Opposite sign,
   * w/Inflation)" Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC329() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_2, S_IRV_15, S_IRV_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC329", "Rates & Fx", "Vega & Curvature", "Intra-currency Correlation (Opposite sign, w/Inflation)", "S_IRV_2,S_IRV_15,S_IRV_17",
        "C300,C313,C315,C321,C322,C328", "Total", " -   ", " 22,308,384 ", " 3,159,335 ", " -   ", " -   ", new BigDecimal("25467719"), amount);
  }

  /**
   * Required Passes: "C300,C313,C315,C321,C322,C328,C329" Element Tested: IRV Inflation Vol Aggregate same-currency
   * (Opposite sign) Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC330() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_16, S_IRV_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC330", "Rates & Fx", "Vega & Curvature", "IRV Inflation Vol Aggregate same-currency (Opposite sign)", "S_IRV_16,S_IRV_21",
        "C300,C313,C315,C321,C322,C328,C329", "Total", " -   ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("0"), amount);
  }

  /**
   * Required Passes: "C300,C313,C315,C321,C322,C328,C329" Element Tested: "IRV Inflation Vol Aggregate same-currency
   * (Opposite sign, zero theta)" Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC331() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_19, S_IRV_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC331", "Rates & Fx", "Vega & Curvature", "IRV Inflation Vol Aggregate same-currency (Opposite sign, zero theta)", "S_IRV_19,S_IRV_22",
        "C300,C313,C315,C321,C322,C328,C329", "Total", " -   ", " -   ", " 438,170 ", " -   ", " -   ", new BigDecimal("438170"), amount);
  }

  /**
   * Required Passes: "C299,C300,C318,C321" Element Tested: Inter-currency Correlation Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC332() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1, S_IRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC332", "Rates & Fx", "Vega & Curvature", "Inter-currency Correlation", "S_IRV_1,S_IRV_2", "C299,C300,C318,C321", "Total", " -   ",
        " 139,101,689 ", " 17,764,799 ", " -   ", " -   ", new BigDecimal("156866488"), amount);
  }

  /**
   * Required Passes: "C299,C303,C318,C323" Element Tested: Inter-currency Correlation (exceeds concentration threshold)
   * Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC333() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1, S_IRV_5, S_IRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC333", "Rates & Fx", "Vega & Curvature", "Inter-currency Correlation (exceeds concentration threshold)", "S_IRV_1,S_IRV_5,S_IRV_5",
        "C299,C303,C318,C323", "Total", " -   ", " 136,834,732 ", " 28,185,945 ", " -   ", " -   ", new BigDecimal("165020677"), amount);
  }

  /**
   * Required Passes: "C299-C301,C318,C319,C321,C332" Element Tested: Inter-currency Correlation (3 ccys) Risk Measure:
   * Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC334() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1, S_IRV_2, S_IRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC334", "Rates & Fx", "Vega & Curvature", "Inter-currency Correlation (3 ccys)", "S_IRV_1,S_IRV_2,S_IRV_3", "C299-C301,C318,C319,C321,C332",
        "Total", " -   ", " 157,713,284 ", " 22,719,948 ", " -   ", " -   ", new BigDecimal("180433232"), amount);
  }

  /**
   * Required Passes: C299-C334 Element Tested: All Interest Rate Vol Sensitivities Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC335() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IRV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC335", "Rates & Fx", "Vega & Curvature", "All Interest Rate Vol Sensitivities", "All S_IRV", "C299-C334", "Total", " -   ", " 192,184,005 ",
        " 2,254,360,815 ", " -   ", " -   ", new BigDecimal("2446544820"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC336() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC336", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_1", "None", "Total", " -   ", " 95,269,069 ",
        " 198,403,826 ", " -   ", " -   ", new BigDecimal("293672895"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC337() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC337", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_2", "None", "Total", " -   ", " 396,954,452 ",
        " 206,670,653 ", " -   ", " -   ", new BigDecimal("603625105"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (HR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC338() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC338", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (HR) & Scaling", "S_FXV_3", "None", "Total", " -   ", " 583,630,330 ",
        " 151,930,858 ", " -   ", " -   ", new BigDecimal("735561188"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC339() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC339", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_4", "None", "Total", " -   ", " 79,390,890 ", " -   ",
        " -   ", " -   ", new BigDecimal("79390890"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC340() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC340", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_5", "None", "Total", " -   ", " 59,543,168 ", " -   ",
        " -   ", " -   ", new BigDecimal("59543168"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC341() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC341", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_6", "None", "Total", " -   ", " 47,634,534 ",
        " 8,266,826 ", " -   ", " -   ", new BigDecimal("55901360"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC342() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC342", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_7", "None", "Total", " -   ", " 93,981,649 ", " -   ",
        " -   ", " -   ", new BigDecimal("93981649"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RH) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC343() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC343", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RH) & Scaling", "S_FXV_8", "None", "Total", " -   ", " 218,861,374 ",
        " 11,394,814 ", " -   ", " -   ", new BigDecimal("230256188"), amount);
  }

  /**
   * Required Passes: C336 Element Tested: FXV Concentration (sig:sig) Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC344() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1,
        S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC344", "Rates & Fx", "Vega & Curvature", "FXV Concentration (sig:sig)",
        "S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1", "C336",
        "Total", " -   ", " 2,292,687,841 ", " 3,968,076,529 ", " -   ", " -   ", new BigDecimal("6260764369"), amount);
  }

  /**
   * Required Passes: C338 Element Tested: FXV Concentration (freq:sig) Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC345() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3,
        S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC345", "Rates & Fx", "Vega & Curvature", "FXV Concentration (freq:sig)",
        "S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3", "C338",
        "Total", " -   ", " 51,018,909,096 ", " 3,038,617,162 ", " -   ", " -   ", new BigDecimal("54057526257"), amount);
  }

  /**
   * Required Passes: C339 Element Tested: FXV Concentration (sig:other) Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC346() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC346", "Rates & Fx", "Vega & Curvature", "FXV Concentration (sig:other)",
        "S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4", "C339", "Total", " -   ", " 1,391,315,861 ", " -   ", " -   ", " -   ",
        new BigDecimal("1391315861"), amount);
  }

  /**
   * Required Passes: C340 Element Tested: FXV Concentration (freq:freq) Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC347() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC347", "Rates & Fx", "Vega & Curvature", "FXV Concentration (freq:freq)",
        "S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5", "C340", "Total", " -   ", " 957,416,562 ", " -   ", " -   ", " -   ",
        new BigDecimal("957416562"), amount);
  }

  /**
   * Required Passes: C341 Element Tested: FXV Concentration (freq:other) Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC348() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC348", "Rates & Fx", "Vega & Curvature", "FXV Concentration (freq:other)",
        "S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6", "C341", "Total", " -   ", " 685,071,525 ", " 82,668,261 ", " -   ", " -   ",
        new BigDecimal("767739786"), amount);
  }

  /**
   * Required Passes: C342 Element Tested: FXV Concentration (other:other) Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC349() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC349", "Rates & Fx", "Vega & Curvature", "FXV Concentration (other:other)",
        "S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7", "C342", "Total", " -   ", " 1,898,530,684 ", " -   ", " -   ", " -   ",
        new BigDecimal("1898530684"), amount);
  }

  /**
   * Required Passes: "C336,C337,C344" Element Tested: FXV Aggregate (swapped currencies) Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC350() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC350", "Rates & Fx", "Vega & Curvature", "FXV Aggregate (swapped currencies)", "S_FXV_1,S_FXV_2", "C336,C337,C344", "Total", " -   ",
        " 492,223,521 ", " 405,074,479 ", " -   ", " -   ", new BigDecimal("897298000"), amount);
  }

  /**
   * Required Passes: "C336,C350" Element Tested: "FXV Aggregate (diff ccys, opposite sign)" Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC351() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC351", "Rates & Fx", "Vega & Curvature", "FXV Aggregate (diff ccys,  opposite sign)", "S_FXV_1,S_FXV_9", "C336,C350", "Total", " -   ",
        " 138,422,747 ", " 182,993,006 ", " -   ", " -   ", new BigDecimal("321415754"), amount);
  }

  /**
   * Required Passes: "C336,C350" Element Tested: "FXV Aggregate (same ccy, diff tenor)" Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC352() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_4, S_FXV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC352", "Rates & Fx", "Vega & Curvature", "FXV Aggregate (same ccy, diff tenor)", "S_FXV_4,S_FXV_9", "C336,C350", "Total", " -   ",
        " 238,172,671 ", " -   ", " -   ", " -   ", new BigDecimal("238172671"), amount);
  }

  /**
   * Required Passes: "C336,C350" Element Tested: "FXV Aggregate (same ccy, diff tenor)" Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC353() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC353", "Rates & Fx", "Vega & Curvature", "FXV Aggregate (same ccy, diff tenor)", "S_FXV_1,S_FXV_10", "C336,C350", "Total", " -   ", " -   ",
        " 148,802,870 ", " -   ", " -   ", new BigDecimal("148802870"), amount);
  }

  /**
   * Required Passes: "C336,C338,C344,C345" Element Tested: "FXV Correlation (same sign, pos)" Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC354() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC354", "Rates & Fx", "Vega & Curvature", "FXV Correlation (same sign, pos)", "S_FXV_1,S_FXV_3", "C336,C338,C344,C345", "Total", " -   ",
        " 636,633,706 ", " 289,260,685 ", " -   ", " -   ", new BigDecimal("925894391"), amount);
  }

  /**
   * Required Passes: "C339,C340,C346,C347" Element Tested: "FXV Correlation (same sign, neg)" Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC355() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_4, S_FXV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC355", "Rates & Fx", "Vega & Curvature", "FXV Correlation (same sign, neg)", "S_FXV_4,S_FXV_5", "C339,C340,C346,C347", "Total", " -   ",
        " 120,728,983 ", " -   ", " -   ", " -   ", new BigDecimal("120728983"), amount);
  }

  /**
   * Required Passes: "C338,C339,C345,C346" Element Tested: FXV Correlation (diff sign) Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC356() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_3, S_FXV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC356", "Rates & Fx", "Vega & Curvature", "FXV Correlation (diff sign)", "S_FXV_3,S_FXV_4", "C338,C339,C345,C346", "Total", " -   ",
        " 548,263,024 ", " 178,246,949 ", " -   ", " -   ", new BigDecimal("726509973"), amount);
  }

  /**
   * Required Passes: "C338,C340,C345,C347" Element Tested: FXV Correlation (exceeds concentration threshold) Risk
   * Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC357() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_3, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC357", "Rates & Fx", "Vega & Curvature", "FXV Correlation (exceeds concentration threshold)",
        "S_FXV_3,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5", "C338,C340,C345,C347", "Total", " -   ", " 953,812,795 ", " 185,010,199 ",
        " -   ", " -   ", new BigDecimal("1138822995"), amount);
  }

  /**
   * Required Passes: "C338,C340,C345,C347" Element Tested: "FXV Correlation (same ccy, diff tenor, diff sign, mid
   * theta)" Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC358() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_10, S_FXV_10, S_FXV_10, S_FXV_10, S_FXV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC358", "Rates & Fx", "Vega & Curvature", "FXV Correlation (same ccy, diff tenor, diff sign, mid theta)",
        "S_FXV_1,S_FXV_10,S_FXV_10,S_FXV_10,S_FXV_10,S_FXV_10", "C338,C340,C345,C347", "Total", " -   ", " 381,076,274 ", " -   ", " -   ", " -   ", new BigDecimal("381076274"),
        amount);
  }

  /**
   * Required Passes: C336-C358 Element Tested: All FX Vol Sensitivities Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC359() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_FXV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC359", "Rates & Fx", "Vega & Curvature", "All FX Vol Sensitivities", "All S_FXV", "C336-C358", "Total", " -   ", " 821,325,494 ",
        " 453,562,383 ", " -   ", " -   ", new BigDecimal("1274887877"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC360() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC360", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_1", "None", "Total", " -   ", " 88,800,000 ", " 15,269,351 ", " -   ",
        " -   ", new BigDecimal("104069351"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC361() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC361", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_2", "None", "Total", " -   ", " 44,400,000 ", " 7,634,676 ", " -   ",
        " -   ", new BigDecimal("52034676"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC362() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC362", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_3", "None", "Total", " -   ", " 22,200,000 ", " 1,272,446 ", " -   ",
        " -   ", new BigDecimal("23472446"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC363() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC363", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_4", "None", "Total", " -   ", " 148,000,000 ", " 25,448,918 ", " -   ",
        " -   ", new BigDecimal("173448918"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC364() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC364", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_5", "None", "Total", " -   ", " 29,600,000 ", " -   ", " -   ", " -   ",
        new BigDecimal("29600000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC365() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC365", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_6", "None", "Total", " -   ", " 7,400,000 ", " 1,272,446 ", " -   ",
        " -   ", new BigDecimal("8672446"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC366() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC366", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_7", "None", "Total", " -   ", " 22,200,000 ", " 763,468 ", " -   ", " -   ",
        new BigDecimal("22963468"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC367() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC367", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_8", "None", "Total", " -   ", " 118,400,000 ", " -   ", " -   ", " -   ",
        new BigDecimal("118400000"), amount);
  }

  /**
   * Required Passes: C360 Element Tested: "CRV Aggregate (same tenor, diff bucket, opposite sign)" Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC368() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC368", "Credit", "Vega & Curvature", "CRV Aggregate (same tenor, diff bucket, opposite sign)", "S_CRV_1,S_CRV_9", "C360", "Total", " -   ",
        " 142,572,480 ", " 17,308,395 ", " -   ", " -   ", new BigDecimal("159880874"), amount);
  }

  /**
   * Required Passes: C360 Element Tested: CRV Aggregate (diff sign) Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC369() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC369", "Credit", "Vega & Curvature", "CRV Aggregate (diff sign)", "S_CRV_1,S_CRV_10", "C360", "Total", " -   ", " 33,225,918 ",
        " 11,015,172 ", " -   ", " -   ", new BigDecimal("44241090"), amount);
  }

  /**
   * Required Passes: "C360,C361" Element Tested: "CRV Concentration (same tenor, diff quanto, same sign)" Risk Measure:
   * Vega & Curvature Group: Credit
   */
  @Test
  public void testC370() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_2, S_CRV_1, S_CRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC370", "Credit", "Vega & Curvature", "CRV Concentration (same tenor, diff quanto, same sign)", "S_CRV_1,S_CRV_2,S_CRV_1,S_CRV_2",
        "C360,C361", "Total", " -   ", " 308,557,271 ", " 44,621,991 ", " -   ", " -   ", new BigDecimal("353179262"), amount);
  }

  /**
   * Required Passes: "C363,C364" Element Tested: "CRV Concentration (diff tenor, same quanto, diff sign)" Risk Measure:
   * Vega & Curvature Group: Credit
   */
  @Test
  public void testC371() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_4, S_CRV_5, S_CRV_4, S_CRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC371", "Credit", "Vega & Curvature", "CRV Concentration (diff tenor, same quanto, diff sign)", "S_CRV_4,S_CRV_5,S_CRV_4,S_CRV_5",
        "C363,C364", "Total", " -   ", " 268,391,191 ", " 46,451,610 ", " -   ", " -   ", new BigDecimal("314842801"), amount);
  }

  /**
   * Required Passes: C367 Element Tested: CRV Concentration (residual) Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC372() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_8, S_CRV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC372", "Credit", "Vega & Curvature", "CRV Concentration (residual)", "S_CRV_8,S_CRV_8", "C367", "Total", " -   ", " 262,706,013 ", " -   ",
        " -   ", " -   ", new BigDecimal("262706013"), amount);
  }

  /**
   * Required Passes: "C360,C361,C370" Element Tested: "CRV Intra-bucket Correlation (same tenor, diff quanto, same
   * sign)" Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC373() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC373", "Credit", "Vega & Curvature", "CRV Intra-bucket Correlation (same tenor, diff quanto, same sign)", "S_CRV_1,S_CRV_2",
        "C360,C361,C370", "Total", " -   ", " 131,111,629 ", " 22,310,995 ", " -   ", " -   ", new BigDecimal("153422624"), amount);
  }

  /**
   * Required Passes: "C360,C362" Element Tested: CRV Intra-bucket Correlation (diff name) Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC374() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC374", "Credit", "Vega & Curvature", "CRV Intra-bucket Correlation (diff name)", "S_CRV_1,S_CRV_3", "C360,C362", "Total", " -   ",
        " 100,170,966 ", " 15,694,686 ", " -   ", " -   ", new BigDecimal("115865652"), amount);
  }

  /**
   * Required Passes: "C365,C367,C372" Element Tested: "CRV Intra-bucket Correlation (residual, same name)" Risk
   * Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC375() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_6, S_CRV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC375", "Credit", "Vega & Curvature", "CRV Intra-bucket Correlation (residual, same name)", "S_CRV_6,S_CRV_8", "C365,C367,C372", "Total",
        " -   ", " 114,878,893 ", " 1,339,484 ", " -   ", " -   ", new BigDecimal("116218377"), amount);
  }

  /**
   * Required Passes: "C365,C366" Element Tested: "CRV Intra-bucket Correlation (residual, diff name)" Risk Measure:
   * Vega & Curvature Group: Credit
   */
  @Test
  public void testC376() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_6, S_CRV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC376", "Credit", "Vega & Curvature", "CRV Intra-bucket Correlation (residual, diff name)", "S_CRV_6,S_CRV_7", "C365,C366", "Total", " -   ",
        " 26,681,079 ", " 1,699,189 ", " -   ", " -   ", new BigDecimal("28380268"), amount);
  }

  /**
   * Required Passes: "C360,C362,C374" Element Tested: CRV Intra-bucket Correlation (exceeds concentration threshold)
   * Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC377() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_1, S_CRV_1, S_CRV_1, S_CRV_1, S_CRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC377", "Credit", "Vega & Curvature", "CRV Intra-bucket Correlation (exceeds concentration threshold)",
        "S_CRV_1,S_CRV_1,S_CRV_1,S_CRV_1,S_CRV_1,S_CRV_3", "C360,C362,C374", "Total", " -   ", " 680,956,520 ", " 76,737,865 ", " -   ", " -   ", new BigDecimal("757694385"),
        amount);
  }

  /**
   * Required Passes: "C360,C363" Element Tested: CRV Inter-bucket (same sign) Risk Measure: Vega & Curvature Group:
   * Credit
   */
  @Test
  public void testC378() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC378", "Credit", "Vega & Curvature", "CRV Inter-bucket (same sign)", "S_CRV_1,S_CRV_4", "C360,C363", "Total", " -   ", " 198,121,094 ",
        " 32,744,357 ", " -   ", " -   ", new BigDecimal("230865451"), amount);
  }

  /**
   * Required Passes: "C360,C364" Element Tested: CRV Inter-bucket (diff sign) Risk Measure: Vega & Curvature Group:
   * Credit
   */
  @Test
  public void testC379() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC379", "Credit", "Vega & Curvature", "CRV Inter-bucket (diff sign)", "S_CRV_1,S_CRV_5", "C360,C364", "Total", " -   ", " 82,880,000 ",
        " 14,785,403 ", " -   ", " -   ", new BigDecimal("97665403"), amount);
  }

  /**
   * Required Passes: "C360,C364,C365,C379" Element Tested: CRV Inter-bucket (w/residual) Risk Measure: Vega & Curvature
   * Group: Credit
   */
  @Test
  public void testC380() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_5, S_CRV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC380", "Credit", "Vega & Curvature", "CRV Inter-bucket (w/residual)", "S_CRV_1,S_CRV_5,S_CRV_6", "C360,C364,C365,C379", "Total", " -   ",
        " 90,280,000 ", " 16,057,849 ", " -   ", " -   ", new BigDecimal("106337849"), amount);
  }

  /**
   * Required Passes: C360-C380 Element Tested: All Credit Qualifying Vol Sensitivities Risk Measure: Vega & Curvature
   * Group: Credit
   */
  @Test
  public void testC381() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CRV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC381", "Credit", "Vega & Curvature", "All Credit Qualifying Vol Sensitivities", "All S_CRV", "C360-C380", "Total", " -   ", " 168,074,626 ",
        " 19,574,378 ", " -   ", " -   ", new BigDecimal("187649003"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC382() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC382", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_1", "None", "Total", " -   ", " 59,200,000 ", " 10,179,567 ", " -   ",
        " -   ", new BigDecimal("69379567"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC383() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC383", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_2", "None", "Total", " -   ", " 22,200,000 ", " 3,817,338 ", " -   ",
        " -   ", new BigDecimal("26017338"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC384() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC384", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_3", "None", "Total", " -   ", " 14,800,000 ", " -   ", " -   ",
        " -   ", new BigDecimal("14800000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC385() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC385", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_4", "None", "Total", " -   ", " 62,900,000 ", " -   ", " -   ",
        " -   ", new BigDecimal("62900000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC386() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC386", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_5", "None", "Total", " -   ", " 14,800,000 ", " 508,978 ", " -   ",
        " -   ", new BigDecimal("15308978"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC387() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC387", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_6", "None", "Total", " -   ", " 62,900,000 ", " 10,815,790 ", " -   ",
        " -   ", new BigDecimal("73715790"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC388() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC388", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_7", "None", "Total", " -   ", " 7,400,000 ", " 254,489 ", " -   ",
        " -   ", new BigDecimal("7654489"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC389() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC389", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_8", "None", "Total", " -   ", " 48,100,000 ", " 827,090 ", " -   ",
        " -   ", new BigDecimal("48927090"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC390() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC390", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_9", "None", "Total", " -   ", " 11,100,000 ", " 1,908,669 ", " -   ",
        " -   ", new BigDecimal("13008669"), amount);
  }

  /**
   * Required Passes: C382 Element Tested: CNV Concentration (same tenor) Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC391() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_1, S_CNV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC391", "Credit", "Vega & Curvature", "CNV Concentration (same tenor)", "S_CNV_1,S_CNV_1", "C382", "Total", " -   ", " 124,373,453 ",
        " 20,359,135 ", " -   ", " -   ", new BigDecimal("144732588"), amount);
  }

  /**
   * Required Passes: "C385,C386" Element Tested: CNV Concentration (diff tenor) Risk Measure: Vega & Curvature Group:
   * Credit
   */
  @Test
  public void testC392() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_4, S_CNV_4, S_CNV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC392", "Credit", "Vega & Curvature", "CNV Concentration (diff tenor)", "S_CNV_4,S_CNV_4,S_CNV_5", "C385,C386", "Total", " -   ",
        " 133,296,080 ", " 736,279 ", " -   ", " -   ", new BigDecimal("134032360"), amount);
  }

  /**
   * Required Passes: "C387,C389" Element Tested: "CNV Concentration (residual, diff tenor)" Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC393() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_6, S_CNV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC393", "Credit", "Vega & Curvature", "CNV Concentration (residual,  diff tenor)", "S_CNV_6,S_CNV_8", "C387,C389", "Total", " -   ",
        " 98,061,434 ", " 11,140,730 ", " -   ", " -   ", new BigDecimal("109202164"), amount);
  }

  /**
   * Required Passes: "C383,C384" Element Tested: CNV Intra-bucket Correlation (same name) Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC394() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_2, S_CNV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC394", "Credit", "Vega & Curvature", "CNV Intra-bucket Correlation (same name)", "S_CNV_2,S_CNV_3", "C383,C384", "Total", " -   ",
        " 13,154,528 ", " 3,023,041 ", " -   ", " -   ", new BigDecimal("16177568"), amount);
  }

  /**
   * Required Passes: "C382,C383,C391" Element Tested: CNV Intra-bucket Correlation (diff name) Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC395() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_1, S_CNV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC395", "Credit", "Vega & Curvature", "CNV Intra-bucket Correlation (diff name)", "S_CNV_1,S_CNV_2", "C382,C383,C391", "Total", " -   ",
        " 78,440,000 ", " 13,197,613 ", " -   ", " -   ", new BigDecimal("91637613"), amount);
  }

  /**
   * Required Passes: "C388,C390" Element Tested: CNV Intra-bucket Correlation (residual) Risk Measure: Vega & Curvature
   * Group: Credit
   */
  @Test
  public void testC396() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_7, S_CNV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC396", "Credit", "Vega & Curvature", "CNV Intra-bucket Correlation (residual)", "S_CNV_7,S_CNV_9", "C388,C390", "Total", " -   ",
        " 16,127,926 ", " 2,014,080 ", " -   ", " -   ", new BigDecimal("18142006"), amount);
  }

  /**
   * Required Passes: "C382-C384,C391,C394,C395" Element Tested: CNV Intra-bucket Correlation (exceeds concentration
   * threshold) Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC397() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_1, S_CNV_1, S_CNV_2, S_CNV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC397", "Credit", "Vega & Curvature", "CNV Intra-bucket Correlation (exceeds concentration threshold)", "S_CNV_1,S_CNV_1,S_CNV_2,S_CNV_3",
        "C382-C384,C391,C394,C395", "Total", " -   ", " 130,685,500 ", " 22,325,035 ", " -   ", " -   ", new BigDecimal("153010534"), amount);
  }

  /**
   * Required Passes: "C382,C386,C391" Element Tested: CNV Inter-bucket Correlation (same sign) Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC398() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_1, S_CNV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC398", "Credit", "Vega & Curvature", "CNV Inter-bucket Correlation (same sign)", "S_CNV_1,S_CNV_5", "C382,C386,C391", "Total", " -   ",
        " 66,517,727 ", " 10,335,882 ", " -   ", " -   ", new BigDecimal("76853609"), amount);
  }

  /**
   * Required Passes: "C383,C385" Element Tested: CNV Inter-bucket Correlation (diff sign) Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC399() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_2, S_CNV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC399", "Credit", "Vega & Curvature", "CNV Inter-bucket Correlation (diff sign)", "S_CNV_2,S_CNV_4", "C383,C385", "Total", " -   ",
        " 57,724,743 ", " 4,119,647 ", " -   ", " -   ", new BigDecimal("61844390"), amount);
  }

  /**
   * Required Passes: "C383,C384,C387,C394" Element Tested: CNV Inter-bucket Correlation (w/residual) Risk Measure: Vega
   * & Curvature Group: Credit
   */
  @Test
  public void testC400() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_2, S_CNV_3, S_CNV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC400", "Credit", "Vega & Curvature", "CNV Inter-bucket Correlation (w/residual)", "S_CNV_2,S_CNV_3,S_CNV_6", "C383,C384,C387,C394", "Total",
        " -   ", " 76,054,528 ", " 13,838,831 ", " -   ", " -   ", new BigDecimal("89893359"), amount);
  }

  /**
   * Required Passes: C382-C400 Element Tested: All Credit Non Qualifying Vol Sensitivities Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC401() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CNV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC401", "Credit", "Vega & Curvature", "All Credit Non Qualifying Vol Sensitivities", "All S_CNV", "C382-C400", "Total", " -   ",
        " 183,503,061 ", " 23,901,973 ", " -   ", " -   ", new BigDecimal("207405034"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC402() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC402", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_1", "None", "Total", " -   ", " 17,873,222 ", " 104,564,179 ", " -   ",
        " -   ", new BigDecimal("122437401"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC403() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC403", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_2", "None", "Total", " -   ", " 14,894,352 ", " 29,045,605 ", " -   ",
        " -   ", new BigDecimal("43939957"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC404() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC404", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_3", "None", "Total", " -   ", " 44,683,056 ", " -   ", " -   ", " -   ",
        new BigDecimal("44683056"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC405() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC405", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_4", "None", "Total", " -   ", " 32,080,143 ", " -   ", " -   ", " -   ",
        new BigDecimal("32080143"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC406() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC406", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_5", "None", "Total", " -   ", " 16,040,071 ", " -   ", " -   ", " -   ",
        new BigDecimal("16040071"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC407() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC407", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_6", "None", "Total", " -   ", " 197,636,593 ", " 32,117,737 ", " -   ",
        " -   ", new BigDecimal("229754330"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC408() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC408", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_7", "None", "Total", " -   ", " 7,332,604 ", " -   ", " -   ", " -   ",
        new BigDecimal("7332604"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC409() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC409", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_8", "None", "Total", " -   ", " 36,663,020 ", " 1,787,422 ", " -   ",
        " -   ", new BigDecimal("38450442"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC410() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC410", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_9", "None", "Total", " -   ", " 309,344,233 ", " 10,054,248 ", " -   ",
        " -   ", new BigDecimal("319398481"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC411() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC411", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_10", "None", "Total", " -   ", " 103,114,744 ", " -   ", " -   ", " -   ",
        new BigDecimal("103114744"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC412() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC412", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_11", "None", "Total", " -   ", " 1,099,890,605 ", " -   ", " -   ", " -   ",
        new BigDecimal("1099890605"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC413() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC413", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_12", "None", "Total", " -   ", " 7,790,892 ", " 379,827 ", " -   ", " -   ",
        new BigDecimal("8170719"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC414() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC414", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_13", "None", "Total", " -   ", " 9,738,615 ", " -   ", " -   ", " -   ",
        new BigDecimal("9738615"), amount);
  }

  /**
   * Required Passes: C402 Element Tested: EQV Concentration (bkts 1-4) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC415() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1,
        S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC415", "Equity", "Vega & Curvature", "EQV Concentration (bkts 1-4)",
        "S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1", "C402",
        "Total", " -   ", " 695,237,798 ", " 2,091,283,576 ", " -   ", " -   ", new BigDecimal("2786521374"), amount);
  }

  /**
   * Required Passes: C407 Element Tested: EQV Concentration (bkts 5-8) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC416() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6,
        S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC416", "Equity", "Vega & Curvature", "EQV Concentration (bkts 5-8)",
        "S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6", "C407",
        "Total", " -   ", " 10,274,675,116 ", " 642,354,731 ", " -   ", " -   ", new BigDecimal("10917029847"), amount);
  }

  /**
   * Required Passes: C408 Element Tested: EQV Concentration (bkt 9) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC417() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_7, S_EQV_7, S_EQV_7, S_EQV_7, S_EQV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC417", "Equity", "Vega & Curvature", "EQV Concentration (bkt 9)", "S_EQV_7,S_EQV_7,S_EQV_7,S_EQV_7,S_EQV_7", "C408", "Total", " -   ",
        " 52,324,623 ", " -   ", " -   ", " -   ", new BigDecimal("52324623"), amount);
  }

  /**
   * Required Passes: C409 Element Tested: EQV Concentration (bkt 10) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC418() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_8, S_EQV_8, S_EQV_8, S_EQV_8, S_EQV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC418", "Equity", "Vega & Curvature", "EQV Concentration (bkt 10)", "S_EQV_8,S_EQV_8,S_EQV_8,S_EQV_8,S_EQV_8", "C409", "Total", " -   ",
        " 261,623,113 ", " 8,937,109 ", " -   ", " -   ", new BigDecimal("270560222"), amount);
  }

  /**
   * Required Passes: C410 Element Tested: EQV Concentration (bkt 11-12) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC419() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9,
        S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC419", "Equity", "Vega & Curvature", "EQV Concentration (bkt 11-12)",
        "S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9", "C410",
        "Total", " -   ", " 9,444,430,301 ", " 201,084,959 ", " -   ", " -   ", new BigDecimal("9645515260"), amount);
  }

  /**
   * Required Passes: C413 Element Tested: EQV Concentration (residual) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC420() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_12, S_EQV_12, S_EQV_12, S_EQV_12, S_EQV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC420", "Equity", "Vega & Curvature", "EQV Concentration (residual)", "S_EQV_12,S_EQV_12,S_EQV_12,S_EQV_12,S_EQV_12", "C413", "Total",
        " -   ", " 57,305,923 ", " 1,899,136 ", " -   ", " -   ", new BigDecimal("59205059"), amount);
  }

  /**
   * Required Passes: "C402,C403,C415" Element Tested: "EQV Intra-bucket Correlation (same sign, pos)" Risk Measure:
   * Vega & Curvature Group: Equity
   */
  @Test
  public void testC421() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC421", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (same sign, pos)", "S_EQV_1,S_EQV_2", "C402,C403,C415", "Total", " -   ",
        " 25,241,423 ", " 113,071,214 ", " -   ", " -   ", new BigDecimal("138312637"), amount);
  }

  /**
   * Required Passes: "C405,C406" Element Tested: "EQV Intra-bucket Correlation (same sign, neg)" Risk Measure: Vega &
   * Curvature Group: Equity
   */
  @Test
  public void testC422() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_4, S_EQV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC422", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (same sign, neg)", "S_EQV_4,S_EQV_5", "C405,C406", "Total", " -   ",
        " 39,027,178 ", " -   ", " -   ", " -   ", new BigDecimal("39027178"), amount);
  }

  /**
   * Required Passes: "C402,C404,C415" Element Tested: EQV Intra-bucket Correlation (diff sign) Risk Measure: Vega &
   * Curvature Group: Equity
   */
  @Test
  public void testC423() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC423", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (diff sign)", "S_EQV_1,S_EQV_3", "C402,C404,C415", "Total", " -   ",
        " 26,809,833 ", " 60,995,771 ", " -   ", " -   ", new BigDecimal("87805604"), amount);
  }

  /**
   * Required Passes: "C402,C404,C415" Element Tested: "EQV Intra-bucket Correlation (diff sign, same rf)" Risk Measure:
   * Vega & Curvature Group: Equity
   */
  @Test
  public void testC424() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC424", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (diff sign, same rf)", "S_EQV_1,S_EQV_16", "C402,C404,C415", "Total",
        " -   ", " -   ", " 100,207,338 ", " -   ", " -   ", new BigDecimal("100207338"), amount);
  }

  /**
   * Required Passes: "C402,C404,C415" Element Tested: "EQV Intra-bucket Correlation (diff sign, same bucket, diff rf)"
   * Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC425() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC425", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (diff sign, same bucket, diff rf)", "S_EQV_1,S_EQV_17", "C402,C404,C415",
        "Total", " -   ", " 22,888,893 ", " 103,864,714 ", " -   ", " -   ", new BigDecimal("126753607"), amount);
  }

  /**
   * Required Passes: "C402,C408,C415,C417" Element Tested: EQV Intra-bucket Correlation (exceeds concentration
   * threshold) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC426() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_7, S_EQV_7, S_EQV_7, S_EQV_7, S_EQV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC426", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (exceeds concentration threshold)",
        "S_EQV_1,S_EQV_7,S_EQV_7,S_EQV_7,S_EQV_7,S_EQV_7", "C402,C408,C415,C417", "Total", " -   ", " 52,338,771 ", " 103,989,534 ", " -   ", " -   ", new BigDecimal("156328305"),
        amount);
  }

  /**
   * Required Passes: "C404,C405" Element Tested: EQV Inter-bucket Correlation (same sign) Risk Measure: Vega &
   * Curvature Group: Equity
   */
  @Test
  public void testC427() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_3, S_EQV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC427", "Equity", "Vega & Curvature", "EQV Inter-bucket Correlation (same sign)", "S_EQV_3,S_EQV_4", "C404,C405", "Total", " -   ",
        " 59,992,387 ", " -   ", " -   ", " -   ", new BigDecimal("59992387"), amount);
  }

  /**
   * Required Passes: "C403,C407,C416" Element Tested: EQV Inter-bucket Correlation (diff sign) Risk Measure: Vega &
   * Curvature Group: Equity
   */
  @Test
  public void testC428() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_2, S_EQV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC428", "Equity", "Vega & Curvature", "EQV Inter-bucket Correlation (diff sign)", "S_EQV_2,S_EQV_6", "C403,C407,C416", "Total", " -   ",
        " 200,118,511 ", " 46,303,246 ", " -   ", " -   ", new BigDecimal("246421757"), amount);
  }

  /**
   * Required Passes: "C403,C407,C413,C416,C420,C428" Element Tested: EQV Inter-bucket Correlation (w/residual) Risk
   * Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC429() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_2, S_EQV_6, S_EQV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC429", "Equity", "Vega & Curvature", "EQV Inter-bucket Correlation (w/residual)", "S_EQV_2,S_EQV_6,S_EQV_12",
        "C403,C407,C413,C416,C420,C428", "Total", " -   ", " 207,909,403 ", " 46,683,073 ", " -   ", " -   ", new BigDecimal("254592476"), amount);
  }

  /**
   * Required Passes: C402 Element Tested: EQV Aggregate (opposite sign) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC430() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC430", "Equity", "Vega & Curvature", "EQV Aggregate (opposite sign)", "S_EQV_1,S_EQV_14", "C402", "Total", " -   ", " 17,515,947 ",
        " 104,026,182 ", " -   ", " -   ", new BigDecimal("121542129"), amount);
  }

  /**
   * Required Passes: Element Tested: EQV Aggregate (opposite sign) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC431() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_14, S_EQV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC431", "Equity", "Vega & Curvature", "EQV Aggregate (opposite sign)", "S_EQV_14,S_EQV_15", "", "Total", " -   ", " -   ", " 15,639,941 ",
        " -   ", " -   ", new BigDecimal("15639941"), amount);
  }

  /**
   * Required Passes: C402-C429 Element Tested: All Equity Vol Sensitivities Risk Measure: Vega & Curvature Group:
   * Equity
   */
  @Test
  public void testC432() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_EQV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC432", "Equity", "Vega & Curvature", "All Equity Vol Sensitivities", "All S_EQV", "C402-C429", "Total", " -   ", " 1,290,300,734 ",
        " 79,056,222 ", " -   ", " -   ", new BigDecimal("1369356956"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC433() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC433", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_1", "None", "Total", " -   ", " 98,136,791 ", " 786,385,823 ", " -   ",
        " -   ", new BigDecimal("884522614"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC434() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC434", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_2", "None", "Total", " -   ", " 73,602,593 ", " 271,464,695 ", " -   ",
        " -   ", new BigDecimal("345067288"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC435() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC435", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_3", "None", "Total", " -   ", " 73,602,593 ", " -   ", " -   ", " -   ",
        new BigDecimal("73602593"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC436() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC436", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_4", "None", "Total", " -   ", " 843,249,464 ", " -   ", " -   ",
        " -   ", new BigDecimal("843249464"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC437() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC437", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_5", "None", "Total", " -   ", " 263,515,457 ", " -   ", " -   ",
        " -   ", new BigDecimal("263515457"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC438() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC438", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_6", "None", "Total", " -   ", " 164,924,329 ", " 25,345,083 ", " -   ",
        " -   ", new BigDecimal("190269413"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC439() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC439", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_7", "None", "Total", " -   ", " 654,245,273 ", " 67,028,320 ", " -   ",
        " -   ", new BigDecimal("721273593"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC440() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC440", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_8", "None", "Total", " -   ", " 337,118,051 ", " 20,722,922 ", " -   ",
        " -   ", new BigDecimal("357840973"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC441() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC441", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_9", "None", "Total", " -   ", " 52,703,091 ", " 1,619,851 ", " -   ",
        " -   ", new BigDecimal("54322943"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC442() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC442", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_10", "None", "Total", " -   ", " 127,214,359 ", " -   ", " -   ",
        " -   ", new BigDecimal("127214359"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC443() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC443", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_11", "None", "Total", " -   ", " 228,985,846 ", " 70,379,736 ", " -   ",
        " -   ", new BigDecimal("299365581"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC444() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC444", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_12", "None", "Total", " -   ", " 94,502,095 ", " 14,522,803 ", " -   ",
        " -   ", new BigDecimal("109024898"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC445() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC445", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_13", "None", "Total", " -   ", " 13,902,712 ", " 284,870 ", " -   ",
        " -   ", new BigDecimal("14187582"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC446() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC446", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_14", "None", "Total", " -   ", " 30,894,916 ", " -   ", " -   ",
        " -   ", new BigDecimal("30894916"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC447() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC447", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_15", "None", "Total", " -   ", " 31,621,855 ", " 1,943,821 ", " -   ",
        " -   ", new BigDecimal("33565676"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC448() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC448", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_16", "None", "Total", " -   ", " 36,892,164 ", " -   ", " -   ",
        " -   ", new BigDecimal("36892164"), amount);
  }

  /**
   * Required Passes: C433 Element Tested: CMV Concentration (bkt 1) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC449() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC449", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 1)",
        "S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1", "C433", "Total", " -   ", " 2,738,813,795 ", " 7,863,858,227 ", " -   ", " -   ",
        new BigDecimal("10602672022"), amount);
  }

  /**
   * Required Passes: C436 Element Tested: CMV Concentration (bkt 2) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC450() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4,
        S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC450", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 2)",
        "S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4", "C436",
        "Total", " -   ", " 54,415,371,262 ", " -   ", " -   ", " -   ", new BigDecimal("54415371262"), amount);
  }

  /**
   * Required Passes: C438 Element Tested: CMV Concentration (bkt 3-5) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC451() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6,
        S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC451", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 3-5)",
        "S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6", "C438",
        "Total", " -   ", " 14,361,422,517 ", " 506,901,668 ", " -   ", " -   ", new BigDecimal("14868324185"), amount);
  }

  /**
   * Required Passes: C439 Element Tested: CMV Concentration (bkt 6-7) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC452() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7,
        S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC452", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 6-7)",
        "S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7", "C439",
        "Total", " -   ", " 27,327,207,648 ", " 1,340,566,395 ", " -   ", " -   ", new BigDecimal("28667774043"), amount);
  }

  /**
   * Required Passes: C440 Element Tested: CMV Concentration (bkt 8-9) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC453() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8,
        S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC453", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 8-9)",
        "S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8", "C440",
        "Total", " -   ", " 23,563,970,214 ", " 414,458,444 ", " -   ", " -   ", new BigDecimal("23978428658"), amount);
  }

  /**
   * Required Passes: C441 Element Tested: CMV Concentration (bkt 10) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC454() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_9, S_CMV_9, S_CMV_9, S_CMV_9, S_CMV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC454", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 10)", "S_CMV_9,S_CMV_9,S_CMV_9,S_CMV_9,S_CMV_9", "C441", "Total", " -   ",
        " 552,247,194 ", " 8,099,255 ", " -   ", " -   ", new BigDecimal("560346449"), amount);
  }

  /**
   * Required Passes: C442 Element Tested: CMV Concentration (bkt 11) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC455() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10,
        S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC455", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 11)",
        "S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10",
        "C442", "Total", " -   ", " 8,856,039,515 ", " -   ", " -   ", " -   ", new BigDecimal("8856039515"), amount);
  }

  /**
   * Required Passes: C443 Element Tested: CMV Concentration (bkt 12) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC456() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11,
        S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC456", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 12)",
        "S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11",
        "C443", "Total", " -   ", " 14,911,319,552 ", " 1,407,594,715 ", " -   ", " -   ", new BigDecimal("16318914266"), amount);
  }

  /**
   * Required Passes: C444 Element Tested: CMV Concentration (bkt 13-15) Risk Measure: Vega & Curvature Group:
   * Commodities
   */
  @Test
  public void testC457() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12,
        S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC457", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 13-15)",
        "S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12",
        "C444", "Total", " -   ", " 4,744,020,108 ", " 290,456,052 ", " -   ", " -   ", new BigDecimal("5034476160"), amount);
  }

  /**
   * Required Passes: C447 Element Tested: CMV Concentration (bkt 16) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC458() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC458", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 16)",
        "S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15", "C447", "Total", " -   ", " 900,427,413 ", " 19,438,213 ", " -   ", " -   ",
        new BigDecimal("919865626"), amount);
  }

  /**
   * Required Passes: C445 Element Tested: CMV Concentration (bkt 17) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC459() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13,
        S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC459", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 17)",
        "S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13",
        "C445", "Total", " -   ", " 742,441,060 ", " 5,697,407 ", " -   ", " -   ", new BigDecimal("748138467"), amount);
  }

  /**
   * Required Passes: C436 Element Tested: "CMV Aggregate (diff bucket, opposite sign)" Risk Measure: Vega & Curvature
   * Group: Commodities
   */
  @Test
  public void testC460() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_4, S_CMV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC460", "Commodities", "Vega & Curvature", "CMV Aggregate (diff bucket, opposite sign)", "S_CMV_4,S_CMV_8", "C436", "Total", " -   ",
        " 866,491,107 ", " 30,975,980 ", " -   ", " -   ", new BigDecimal("897467087"), amount);
  }

  /**
   * Required Passes: Element Tested: "CMV Aggregate (same qualifier, pos)" Risk Measure: Vega & Curvature Group:
   * Commodities
   */
  @Test
  public void testC461() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_4, S_CMV_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC461", "Commodities", "Vega & Curvature", "CMV Aggregate (same qualifier, pos)", "S_CMV_4,S_CMV_17", "", "Total", " -   ", " 316,218,549 ",
        " 3,704,830,782 ", " -   ", " -   ", new BigDecimal("4021049331"), amount);
  }

  /**
   * Required Passes: Element Tested: "CMV Aggregate (same qualifier, neg)" Risk Measure: Vega & Curvature Group:
   * Commodities
   */
  @Test
  public void testC462() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_3, S_CMV_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC462", "Commodities", "Vega & Curvature", "CMV Aggregate (same qualifier, neg)", "S_CMV_3,S_CMV_18", "", "Total", " -   ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("0"), amount);
  }

  /**
   * Required Passes: "C433,C434,C449" Element Tested: "CMV Intra-bucket Correlation (same sign, pos)" Risk Measure:
   * Vega & Curvature Group: Commodities
   */
  @Test
  public void testC463() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_1, S_CMV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC463", "Commodities", "Vega & Curvature", "CMV Intra-bucket Correlation (same sign, pos)", "S_CMV_1,S_CMV_2", "C433,C434,C449", "Total",
        " -   ", " 164,872,730 ", " 1,005,891,859 ", " -   ", " -   ", new BigDecimal("1170764588"), amount);
  }

  /**
   * Required Passes: "C436,C437,C450" Element Tested: "CMV Intra-bucket Correlation (same sign, neg)" Risk Measure:
   * Vega & Curvature Group: Commodities
   */
  @Test
  public void testC464() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_4, S_CMV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC464", "Commodities", "Vega & Curvature", "CMV Intra-bucket Correlation (same sign, neg)", "S_CMV_4,S_CMV_5", "C436,C437,C450", "Total",
        " -   ", " 1,102,742,136 ", " -   ", " -   ", " -   ", new BigDecimal("1102742136"), amount);
  }

  /**
   * Required Passes: "C434,C435" Element Tested: CMV Intra-bucket Correlation (diff sign) Risk Measure: Vega &
   * Curvature Group: Commodities
   */
  @Test
  public void testC465() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_13, S_CMV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC465", "Commodities", "Vega & Curvature", "CMV Intra-bucket Correlation (diff sign)", "S_CMV_13,S_CMV_14", "C434,C435", "Total", " -   ",
        " 28,957,289 ", " 322,911 ", " -   ", " -   ", new BigDecimal("29280200"), amount);
  }

  /**
   * Required Passes: "C433,C435,C449" Element Tested: CMV Intra-bucket Correlation (exceeds concentration threshold)
   * Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC466() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC466", "Commodities", "Vega & Curvature", "CMV Intra-bucket Correlation (exceeds concentration threshold)",
        "S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_3", "C433,C435,C449", "Total", " -   ", " 2,717,566,907 ", " 7,796,218,466 ",
        " -   ", " -   ", new BigDecimal("10513785373"), amount);
  }

  /**
   * Required Passes: "C433,C438,C449,C451" Element Tested: CMV Inter-bucket Correlation (same sign) Risk Measure: Vega
   * & Curvature Group: Commodities
   */
  @Test
  public void testC467() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_1, S_CMV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC467", "Commodities", "Vega & Curvature", "CMV Inter-bucket Correlation (same sign)", "S_CMV_1,S_CMV_6", "C433,C438,C449,C451", "Total",
        " -   ", " 208,874,663 ", " 791,500,667 ", " -   ", " -   ", new BigDecimal("1000375330"), amount);
  }

  /**
   * Required Passes: "C434,C441,C454" Element Tested: CMV Inter-bucket Correlation (diff sign) Risk Measure: Vega &
   * Curvature Group: Commodities
   */
  @Test
  public void testC468() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_2, S_CMV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC468", "Commodities", "Vega & Curvature", "CMV Inter-bucket Correlation (diff sign)", "S_CMV_2,S_CMV_9", "C434,C441,C454", "Total", " -   ",
        " 99,896,628 ", " 271,785,703 ", " -   ", " -   ", new BigDecimal("371682331"), amount);
  }

  /**
   * Required Passes: "C434,C441,C447,C454,C458,C468" Element Tested: CMV Inter-bucket Correlation (w/residual) Risk
   * Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC469() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_2, S_CMV_9, S_CMV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC469", "Commodities", "Vega & Curvature", "CMV Inter-bucket Correlation (w/residual)", "S_CMV_2,S_CMV_9,S_CMV_15",
        "C434,C441,C447,C454,C458,C468", "Total", " -   ", " 104,782,050 ", " 272,084,581 ", " -   ", " -   ", new BigDecimal("376866631"), amount);
  }

  /**
   * Required Passes: C433-C469 Element Tested: All Commodity Vol Sensitivities Risk Measure: Vega & Curvature Group:
   * Commodities
   */
  @Test
  public void testC470() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC470", "Commodities", "Vega & Curvature", "All Commodity Vol Sensitivities", "All S_CMV", "C433-C469", "Total", " -   ", " 908,480,866 ",
        " 4,006,964,265 ", " -   ", " -   ", new BigDecimal("4915445131"), amount);
  }

  /**
   * Required Passes: C299-C470 Element Tested: All Vega Sensitivities (no multiplier) Risk Measure: Vega & Curvature
   * Group: Global
   */
  @Test
  public void testC471() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC471", "Global", "Vega & Curvature", "All Vega Sensitivities (no multiplier)", "All S_IRV,S_FXV,S_CRV,S_CNV,S_EQV,S_CMV", "C299-C470",
        "Total", " -   ", " 3,408,783,754 ", " 6,561,901,791 ", " -   ", " -   ", new BigDecimal("9731126415"), amount);
  }

  /**
   * Required Passes: C299-C471 Element Tested: All Vega Sensitivities (with multipliers) Risk Measure: Vega & Curvature
   * Group: Global
   */
  @Test
  public void testC472() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = new ArrayList<ProductMultiplier>();
    multipliers.addAll(S_MUL);

    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC472", "Global", "Vega & Curvature", "All Vega Sensitivities (with multipliers)", "All S_IRV,S_FXV,S_CRV,S_CNV,S_EQV,S_CMV,S_MUL",
        "C299-C471", "Total", " -   ", " 3,408,783,754 ", " 6,561,901,791 ", " -   ", " 711,115,710 ", new BigDecimal("10442242125"), amount);
  }

  /**
   * Required Passes: None Element Tested: One Trade Risk Measure: Notional Group: AddOn
   */
  @Test
  public void testC473() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Arrays.asList(S_AN_1);
    List<Notional> notional = Arrays.asList(S_AN_3);
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Collections.emptyList();
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC473", "AddOn", "Notional", "One Trade", "S_AN_1,S_AN_3", "None", "Total", " -   ", " -   ", " -   ", " -   ", " 10,000,000 ",
        new BigDecimal("10000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: Multi Trades Risk Measure: Notional Group: AddOn
   */
  @Test
  public void testC474() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Arrays.asList(S_AN_2);
    List<Notional> notional = Arrays.asList(S_AN_4, S_AN_5);
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Collections.emptyList();
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC474", "AddOn", "Notional", "Multi Trades", "S_AN_2,S_AN_4,S_AN_5", "None", "Total", " -   ", " -   ", " -   ", " -   ", " 40,000,000 ",
        new BigDecimal("40000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: Fixed Amount Risk Measure: Notional Group: AddOn
   */
  @Test
  public void testC475() {
    List<FixedAmount> fixed = Arrays.asList(S_AN_7, S_AN_8);
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Collections.emptyList();
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC475", "AddOn", "Notional", "Fixed Amount", "S_AN_7,S_AN_8", "None", "Total", " -   ", " -   ", " -   ", " -   ", " 30,000,000 ",
        new BigDecimal("30000000"), amount);
  }

  /**
   * Required Passes: C473-C475 Element Tested: All Notional Risk Measure: Notional Group: AddOn
   */
  @Test
  public void testC476() {
    List<FixedAmount> fixed = new ArrayList<FixedAmount>();
    fixed.addAll(S_AN_FIXED);

    List<NotionalFactor> factors = new ArrayList<NotionalFactor>();
    factors.addAll(S_AN_FACTORS);

    List<Notional> notional = new ArrayList<Notional>();
    notional.addAll(S_AN);

    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Collections.emptyList();
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC476", "AddOn", "Notional", "All Notional", "All S_AN", "C473-C475", "Total", " -   ", " -   ", " -   ", " -   ", " 80,000,000 ",
        new BigDecimal("80000000"), amount);
  }

  /**
   * Required Passes: "C41,C82,C134,C189,C256" Element Tested: Risk Class Correlations Risk Measure: All Group: Global
   */
  @Test
  public void testC477() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_41, S_FX_11, S_CRQ_1, S_CRNQ_1, S_EQ_25, S_CM_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC477", "Global", "All", "Risk Class Correlations", "S_IR_41,S_FX_11,S_CRQ_1,S_CRNQ_1,S_EQ_25,S_CM_33", "C41,C82,C134,C189,C256", "Total",
        " 2,570,753,170 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("2570753170"), amount);
  }

  /**
   * Required Passes: "C1-C472,C477" Element Tested: Combination (All w/o Multipliers and Notionals) Risk Measure: All
   * Group: Global
   */
  @Test
  public void testC478() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_EQ);
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC478", "Global", "All", "Combination (All w/o Multipliers and Notionals)",
        "All S_IR,S_CRQ,S_CRNQ,S_CM,S_FX,S_EQ,S_IRV,S_FXV,S_CRV,S_CNV,S_EQV,S_CMV", "C1-C472,C477", "Total", " 122,777,576,190 ", " 3,408,783,754 ", " 6,561,901,791 ",
        " 5,546,170 ", " -   ", new BigDecimal("131650297229"), amount);
  }

  /**
   * Required Passes: "C1-C472,C477,C478" Element Tested: Combination (All w/Multiplier) Risk Measure: All Group: Global
   */
  @Test
  public void testC479() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = new ArrayList<ProductMultiplier>();
    multipliers.addAll(S_MUL);

    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_EQ);
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC479", "Global", "All", "Combination (All w/Multiplier)", "All S_IR,S_CRQ,S_CRNQ,S_CM,S_FX,S_EQ,S_IRV,S_FXV,S_CRV,S_CNV,S_EQV,S_CMV,S_MUL",
        "C1-C472,C477,C478", "Total", " 122,777,576,190 ", " 3,408,783,754 ", " 6,561,901,791 ", " 5,546,170 ", " 9,662,373,784 ", new BigDecimal("141312671013"), amount);
  }

  /**
   * Required Passes: C1-C479 Element Tested: Combination (All w/Notionals Risk Measure: All Group: Global
   */
  @Test
  public void testC480() {
    List<FixedAmount> fixed = new ArrayList<FixedAmount>();
    fixed.addAll(S_AN_FIXED);

    List<NotionalFactor> factors = new ArrayList<NotionalFactor>();
    factors.addAll(S_AN_FACTORS);

    List<Notional> notional = new ArrayList<Notional>();
    notional.addAll(S_AN);

    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_EQ);
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC480", "Global", "All", "Combination (All w/Notionals", "All S_IR,S_CRQ,S_CRNQ,S_CM,S_FX,S_EQ,S_IRV,S_FXV,S_CRV,S_CNV,S_EQV,S_CMV,S_AN",
        "C1-C479", "Total", " 122,777,576,190 ", " 3,408,783,754 ", " 6,561,901,791 ", " 5,546,170 ", " 80,000,000 ", new BigDecimal("131730297229"), amount);
  }

  /**
   * Required Passes: C1-C480 Element Tested: Combination (All) Risk Measure: All Group: Global
   */
  @Test
  public void testC481() {
    List<FixedAmount> fixed = new ArrayList<FixedAmount>();
    fixed.addAll(S_AN_FIXED);

    List<NotionalFactor> factors = new ArrayList<NotionalFactor>();
    factors.addAll(S_AN_FACTORS);

    List<Notional> notional = new ArrayList<Notional>();
    notional.addAll(S_AN);

    List<ProductMultiplier> multipliers = new ArrayList<ProductMultiplier>();
    multipliers.addAll(S_MUL);

    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_EQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.TEN_DAY);
    AssertUtils.assertEquals(true, "testC481", "Global", "All", "Combination (All)", "All S_", "C1-C480", "Total", " 122,777,576,190 ", " 3,408,783,754 ", " 6,561,901,791 ",
        " 5,546,170 ", " 9,742,373,784 ", new BigDecimal("141392671013"), amount);
  }

}
