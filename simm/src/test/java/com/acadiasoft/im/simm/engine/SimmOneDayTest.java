/*
 * Copyright (c) 2022 Acadia, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.acadiasoft.im.simm.engine;

import com.acadiasoft.im.base.fx.FxRate;
import com.acadiasoft.im.simm.config.HoldingPeriod;
import com.acadiasoft.im.simm.model.FixedAmount;
import com.acadiasoft.im.simm.model.Notional;
import com.acadiasoft.im.simm.model.NotionalFactor;
import com.acadiasoft.im.simm.model.ProductMultiplier;
import com.acadiasoft.im.simm.model.Sensitivity;
import com.acadiasoft.im.simm.util.AssertUtils;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.Test;

/**
 * Generated by SimmDayGeneratorTest.printUnitTestsForSimmOneDayTest
 * 
 * @author joe.peterson
 **/
public class SimmOneDayTest implements SimmCrifMixin {
  /**
   * Required Passes: None Element Tested: "IR Risk Weight (regular, 2w)" Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC1() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC1", "Rates & Fx", "Delta", "IR Risk Weight (regular, 2w)", "S_IR_1", "None", "Total", " 76,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("76000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC2() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC2", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_2", "None", "Total", " 36,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("36000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC3() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC3", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_3", "None", "Total", " 26,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("26000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC4() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC4", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_4", "None", "Total", " 39,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("39000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC5() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC5", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_5", "None", "Total", " 13,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("13000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC6() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC6", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_6", "None", "Total", " 32,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("32000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC7() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC7", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_7", "None", "Total", " 80,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("80000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC8() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC8", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_8", "None", "Total", " 160,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("160000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC9() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC9", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_9", "None", "Total", " 400,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("400000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC10() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC10", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_10", "None", "Total", " 560,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("560000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC11() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC11", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_11", "None", "Total", " 32,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("32000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC12() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC12", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_12", "None", "Total", " 36,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("36000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC13() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC13", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_13", "None", "Total", " 32,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("32000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC14() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC14", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_14", "None", "Total", " 68,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("68000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC15() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC15", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_15", "None", "Total", " 160,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("160000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (regular) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC16() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC16", "Rates & Fx", "Delta", "IR Risk Weight (regular)", "S_IR_16", "None", "Total", " 306,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("306000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (inflation) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC17() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC17", "Rates & Fx", "Delta", "IR Risk Weight (inflation)", "S_IR_17", "None", "Total", " 150,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("150000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (xccy) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC18() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC18", "Rates & Fx", "Delta", "IR Risk Weight (xccy)", "S_IR_18", "None", "Total", " 177,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("177000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: "IR Risk Weight (low vol, 2w)" Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC19() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC19", "Rates & Fx", "Delta", "IR Risk Weight (low vol, 2w)", "S_IR_19", "None", "Total", " 1,700,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC20() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC20", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_20", "None", "Total", " 5,100,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5100000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC21() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC21", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_21", "None", "Total", " 2,700,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("2700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC22() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC22", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_22", "None", "Total", " 4,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("4000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC23() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC23", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_23", "None", "Total", " 9,900,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("9900000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC24() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC24", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_24", "None", "Total", " 19,200,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("19200000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC25() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC25", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_25", "None", "Total", " 29,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("29000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC26() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_26);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC26", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_26", "None", "Total", " 136,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("136000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC27() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC27", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_27", "None", "Total", " 195,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("195000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC28() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_28);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC28", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_28", "None", "Total", " 7,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("7000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC29() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_29);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC29", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_29", "None", "Total", " 15,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("15000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC30() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_30);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC30", "Rates & Fx", "Delta", "IR Risk Weight (low vol)", "S_IR_30", "None", "Total", " 24,900,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("24900000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (inflation) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC31() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_31);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC31", "Rates & Fx", "Delta", "IR Risk Weight (inflation)", "S_IR_31", "None", "Total", " 75,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("75000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (xccy) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC32() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC32", "Rates & Fx", "Delta", "IR Risk Weight (xccy)", "S_IR_32", "None", "Total", " 2,950,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("2950000"), amount);
  }

  /**
   * Required Passes: None Element Tested: "IR Risk Weight (high vol, 2w)" Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC33() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC33", "Rates & Fx", "Delta", "IR Risk Weight (high vol, 2w)", "S_IR_33", "None", "Total", " 49,000,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("49000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC34() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_34);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC34", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_34", "None", "Total", " 36,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("36000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC35() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_35);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC35", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_35", "None", "Total", " 8,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("8000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC36() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_36);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC36", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_36", "None", "Total", " 20,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("20000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC37() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_37);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC37", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_37", "None", "Total", " 207,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("207000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC38() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_38);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC38", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_38", "None", "Total", " 230,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("230000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC39() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_39);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC39", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_39", "None", "Total", " 16,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("16500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC40() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_40);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC40", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_40", "None", "Total", " 31,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("31000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC41() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_41);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC41", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_41", "None", "Total", " 476,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("476000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC42() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_42);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC42", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_42", "None", "Total", " 990,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("990000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC43() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_43);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC43", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_43", "None", "Total", " 26,400,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("26400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC44() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_44);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC44", "Rates & Fx", "Delta", "IR Risk Weight (high vol)", "S_IR_44", "None", "Total", " 21,600,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("21600000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (inflation) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC45() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_45);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC45", "Rates & Fx", "Delta", "IR Risk Weight (inflation)", "S_IR_45", "None", "Total", " 30,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("30000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IR Risk Weight (xccy) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC46() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_46);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC46", "Rates & Fx", "Delta", "IR Risk Weight (xccy)", "S_IR_46", "None", "Total", " 5,900,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5900000"), amount);
  }

  /**
   * Required Passes: "C8,C9" Element Tested: "Net Sensitivities (same tenor & subcurve, same sign)" Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC47() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_8, S_IR_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC47", "Rates & Fx", "Delta", "Net Sensitivities (same tenor & subcurve, same sign)", "S_IR_8,S_IR_9", "C8,C9", "Total", " 560,000,000 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("560000000"), amount);
  }

  /**
   * Required Passes: "C4,C5" Element Tested: "Net Sensitivities (same tenor & subcurve, diff sign)" Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC48() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_4, S_IR_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC48", "Rates & Fx", "Delta", "Net Sensitivities (same tenor & subcurve, diff sign)", "S_IR_4,S_IR_5", "C4,C5", "Total", " 26,000,000 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("26000000"), amount);
  }

  /**
   * Required Passes: "C8-C10,C47" Element Tested: "Concentration (reg vol, well traded)" Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC49() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_8, S_IR_9, S_IR_10, S_IR_8, S_IR_9, S_IR_10, S_IR_8, S_IR_9, S_IR_10, S_IR_8, S_IR_9, S_IR_10, S_IR_8, S_IR_9, S_IR_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC49", "Rates & Fx", "Delta", "Concentration (reg vol, well traded)",
        "S_IR_8,S_IR_9,S_IR_10,S_IR_8,S_IR_9,S_IR_10,S_IR_8,S_IR_9,S_IR_10,S_IR_8,S_IR_9,S_IR_10,S_IR_8,S_IR_9,S_IR_10", "C8-C10,C47", "Total", " 5,515,360,369 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("5515360369"), amount);
  }

  /**
   * Required Passes: C14-C16 Element Tested: "Concentration (reg vol, less traded)" Risk Measure: Delta Group: Rates &
   * Fx
   */
  @Test
  public void testC50() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_14, S_IR_15, S_IR_16, S_IR_14, S_IR_15, S_IR_16, S_IR_14, S_IR_15, S_IR_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC50", "Rates & Fx", "Delta", "Concentration (reg vol, less traded)",
        "S_IR_14,S_IR_15,S_IR_16,S_IR_14,S_IR_15,S_IR_16,S_IR_14,S_IR_15,S_IR_16", "C14-C16", "Total", " 1,195,086,139 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1195086139"), amount);
  }

  /**
   * Required Passes: "C14-C18,C50" Element Tested: "Concentration (reg vol, w/inf & xccy)" Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC51() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_14, S_IR_15, S_IR_16, S_IR_14, S_IR_15, S_IR_16, S_IR_14, S_IR_15, S_IR_16, S_IR_17, S_IR_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC51", "Rates & Fx", "Delta", "Concentration (reg vol, w/inf & xccy)",
        "S_IR_14,S_IR_15,S_IR_16,S_IR_14,S_IR_15,S_IR_16,S_IR_14,S_IR_15,S_IR_16,S_IR_17,S_IR_18", "C14-C18,C50", "Total", " 1,163,280,551 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1163280551"), amount);
  }

  /**
   * Required Passes: C26-C28 Element Tested: Concentration (low vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC52() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_26, S_IR_27, S_IR_28, S_IR_26, S_IR_27, S_IR_28, S_IR_26, S_IR_27, S_IR_28);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC52", "Rates & Fx", "Delta", "Concentration (low vol)", "S_IR_26,S_IR_27,S_IR_28,S_IR_26,S_IR_27,S_IR_28,S_IR_26,S_IR_27,S_IR_28",
        "C26-C28", "Total", " 958,522,019 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("958522019"), amount);
  }

  /**
   * Required Passes: "C26-C28,C31,C32,C52" Element Tested: "Concentration (low vol, w/inf & xccy)" Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC53() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_26, S_IR_27, S_IR_28, S_IR_26, S_IR_27, S_IR_28, S_IR_26, S_IR_27, S_IR_28, S_IR_31, S_IR_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC53", "Rates & Fx", "Delta", "Concentration (low vol, w/inf & xccy)",
        "S_IR_26,S_IR_27,S_IR_28,S_IR_26,S_IR_27,S_IR_28,S_IR_26,S_IR_27,S_IR_28,S_IR_31,S_IR_32", "C26-C28,C31,C32,C52", "Total", " 989,144,042 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("989144042"), amount);
  }

  /**
   * Required Passes: C41-C44 Element Tested: Concentration (high vol) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC54() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_41, S_IR_42, S_IR_43, S_IR_44);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC54", "Rates & Fx", "Delta", "Concentration (high vol)", "S_IR_41,S_IR_42,S_IR_43,S_IR_44", "C41-C44", "Total", " 1,410,032,934 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("1410032934"), amount);
  }

  /**
   * Required Passes: "C41-C46,C54" Element Tested: "Concentration (high vol, w/inf & xccy)" Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC55() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_41, S_IR_42, S_IR_43, S_IR_44, S_IR_45, S_IR_46);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC55", "Rates & Fx", "Delta", "Concentration (high vol, w/inf & xccy)", "S_IR_41,S_IR_42,S_IR_43,S_IR_44,S_IR_45,S_IR_46", "C41-C46,C54",
        "Total", " 1,421,420,564 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("1421420564"), amount);
  }

  /**
   * Required Passes: "C3,C4" Element Tested: "Subcurve Correlation (same tenor, same sign)" Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC56() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_3, S_IR_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC56", "Rates & Fx", "Delta", "Subcurve Correlation (same tenor, same sign)", "S_IR_3,S_IR_4", "C3,C4", "Total", " 64,843,812 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("64843812"), amount);
  }

  /**
   * Required Passes: "C6,C7" Element Tested: "Subcurve Correlation (same tenor, diff sign)" Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC57() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_6, S_IR_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC57", "Rates & Fx", "Delta", "Subcurve Correlation (same tenor, diff sign)", "S_IR_6,S_IR_7", "C6,C7", "Total", " 48,530,403 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("48530403"), amount);
  }

  /**
   * Required Passes: "C2,C5" Element Tested: Tenor Correlation (diff subcurve) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC58() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_2, S_IR_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC58", "Rates & Fx", "Delta", "Tenor Correlation (diff subcurve)", "S_IR_2,S_IR_5", "C2,C5", "Total", " 45,671,094 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("45671094"), amount);
  }

  /**
   * Required Passes: "C11,C12" Element Tested: "Tenor Correlation (same sign, same subcurve)" Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC59() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_11, S_IR_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC59", "Rates & Fx", "Delta", "Tenor Correlation (same sign, same subcurve)", "S_IR_11,S_IR_12", "C11,C12", "Total", " 62,528,074 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("62528074"), amount);
  }

  /**
   * Required Passes: "C12,C13" Element Tested: "Tenor Correlation (diff sign, same subcurve)" Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC60() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_12, S_IR_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC60", "Rates & Fx", "Delta", "Tenor Correlation (diff sign, same subcurve)", "S_IR_12,S_IR_13", "C12,C13", "Total", " 26,156,452 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("26156452"), amount);
  }

  /**
   * Required Passes: "C19-C30,C52" Element Tested: Tenor Correlation (all tenors and subcurves) Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC61() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_19, S_IR_20, S_IR_21, S_IR_22, S_IR_23, S_IR_24, S_IR_25, S_IR_26, S_IR_27, S_IR_28, S_IR_29, S_IR_30);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC61", "Rates & Fx", "Delta", "Tenor Correlation (all tenors and subcurves)",
        "S_IR_19,S_IR_20,S_IR_21,S_IR_22,S_IR_23,S_IR_24,S_IR_25,S_IR_26,S_IR_27,S_IR_28,S_IR_29,S_IR_30", "C19-C30,C52", "Total", " 379,861,148 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("379861148"), amount);
  }

  /**
   * Required Passes: "C19-C32,C52,C53,C61" Element Tested: "Tenor Correlation (all tenors and subcurves, w/inf & xccy)"
   * Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC62() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_19, S_IR_20, S_IR_21, S_IR_22, S_IR_23, S_IR_24, S_IR_25, S_IR_26, S_IR_27, S_IR_28, S_IR_29, S_IR_30, S_IR_31, S_IR_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC62", "Rates & Fx", "Delta", "Tenor Correlation (all tenors and subcurves, w/inf & xccy)",
        "S_IR_19,S_IR_20,S_IR_21,S_IR_22,S_IR_23,S_IR_24,S_IR_25,S_IR_26,S_IR_27,S_IR_28,S_IR_29,S_IR_30,S_IR_31,S_IR_32", "C19-C32,C52,C53,C61", "Total", " 414,374,458 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("414374458"), amount);
  }

  /**
   * Required Passes: "C1,C22,C33" Element Tested: Inter bucket correlation (all pos) Risk Measure: Delta Group: Rates &
   * Fx
   */
  @Test
  public void testC63() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_1, S_IR_22, S_IR_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC63", "Rates & Fx", "Delta", "Inter bucket correlation (all pos)", "S_IR_1,S_IR_22,S_IR_33", "C1,C22,C33", "Total", " 101,096,587 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("101096587"), amount);
  }

  /**
   * Required Passes: "C1,C19,C33" Element Tested: Inter bucket correlation (one neg) Risk Measure: Delta Group: Rates &
   * Fx
   */
  @Test
  public void testC64() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_1, S_IR_19, S_IR_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC64", "Rates & Fx", "Delta", "Inter bucket correlation (one neg)", "S_IR_1,S_IR_19,S_IR_33", "C1,C19,C33", "Total", " 99,324,770 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("99324770"), amount);
  }

  /**
   * Required Passes: "C2,C19,C35" Element Tested: Inter bucket correlation (all neg) Risk Measure: Delta Group: Rates &
   * Fx
   */
  @Test
  public void testC65() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_2, S_IR_19, S_IR_35);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC65", "Rates & Fx", "Delta", "Inter bucket correlation (all neg)", "S_IR_2,S_IR_19,S_IR_35", "C2,C19,C35", "Total", " 39,205,025 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("39205025"), amount);
  }

  /**
   * Required Passes: "C3,C21,C37,C38" Element Tested: Inter bucket correlation (exceeds concentration threshold) Risk
   * Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC66() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_3, S_IR_21, S_IR_37, S_IR_38, S_IR_37, S_IR_38);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC66", "Rates & Fx", "Delta", "Inter bucket correlation (exceeds concentration threshold)",
        "S_IR_3,S_IR_21,S_IR_37,S_IR_38,S_IR_37,S_IR_38", "C3,C21,C37,C38", "Total", " 866,019,621 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("866019621"), amount);
  }

  /**
   * Required Passes: C1-C66 Element Tested: All jurisdiction independent IR sensitivities Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC67() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC67", "Rates & Fx", "Delta", "All jurisdiction independent IR sensitivities", "All S_IR", "C1-C66", "Total", " 3,134,574,486 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("3134574486"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight & correlation (net to zero) Risk Measure: Delta Group: Rates &
   * Fx
   */
  @Test
  public void testC68() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_1, S_FX_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC68", "Rates & Fx", "Delta", "FX Risk Weight & correlation (net to zero)", "S_FX_1,S_FX_2", "None", "Total", " -   ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("0"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight & correlation (AmountCurrency qualifier) Risk Measure: Delta
   * Group: Rates & Fx
   */
  @Test
  public void testC69() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_3, S_FX_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC69", "Rates & Fx", "Delta", "FX Risk Weight & correlation (AmountCurrency qualifier)", "S_FX_3,S_FX_4", "None", "Total",
        " 9,000,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("9000000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight (RR) & correlation (RR) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC70() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_5, S_FX_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC70", "Rates & Fx", "Delta", "FX Risk Weight (RR) & correlation (RR)", "S_FX_5,S_FX_6", "None", "Total", " 1,629,074,584 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("1629074584"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight (RR) & correlation (RR) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC71() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_7, S_FX_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC71", "Rates & Fx", "Delta", "FX Risk Weight (RR) & correlation (RR)", "S_FX_7,S_FX_8", "None", "Total", " 369,329,122 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("369329122"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight (RH) & correlation (RH) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC72() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_9, S_FX_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC72", "Rates & Fx", "Delta", "FX Risk Weight (RH) & correlation (RH)", "S_FX_9,S_FX_10", "None", "Total", " 883,570,937 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("883570937"), amount);
  }

  /**
   * Required Passes: None Element Tested: FX Risk Weight (RH) & correlation (HR) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC73() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_11, S_FX_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC73", "Rates & Fx", "Delta", "FX Risk Weight (RH) & correlation (HR)", "S_FX_11,S_FX_12", "None", "Total", " 131,515,718 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("131515718"), amount);
  }

  /**
   * Required Passes: None Element Tested: Concentration (significantly trading) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC74() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_3, S_FX_6, S_FX_3, S_FX_6, S_FX_3, S_FX_6, S_FX_3, S_FX_6, S_FX_3, S_FX_6, S_FX_3, S_FX_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC74", "Rates & Fx", "Delta", "Concentration (significantly trading)",
        "S_FX_3,S_FX_6,S_FX_3,S_FX_6,S_FX_3,S_FX_6,S_FX_3,S_FX_6,S_FX_3,S_FX_6,S_FX_3,S_FX_6", "None", "Total", " 63,720,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("63720000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: Concentration (frequently traded) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC75() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8, S_FX_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC75", "Rates & Fx", "Delta", "Concentration (frequently traded)", "S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8,S_FX_8",
        "None", "Total", " 3,780,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("3780000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: Concentration (others) Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC76() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_10, S_FX_10, S_FX_10, S_FX_10, S_FX_10, S_FX_10, S_FX_10, S_FX_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC76", "Rates & Fx", "Delta", "Concentration (others)", "S_FX_10,S_FX_10,S_FX_10,S_FX_10,S_FX_10,S_FX_10,S_FX_10,S_FX_10", "None", "Total",
        " 7,680,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("7680000000"), amount);
  }

  /**
   * Required Passes: "C69,C70,C74" Element Tested: FX Intercurrency Correlation (3 ccys) Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC77() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_3, S_FX_4, S_FX_5, S_FX_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC77", "Rates & Fx", "Delta", "FX Intercurrency Correlation (3 ccys)", "S_FX_3,S_FX_4,S_FX_5,S_FX_6", "C69,C70,C74", "Total",
        " 9,903,124,961 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("9903124961"), amount);
  }

  /**
   * Required Passes: "C70,C71,C75" Element Tested: FX Intercurrency Correlation (4 ccys) Risk Measure: Delta Group:
   * Rates & Fx
   */
  @Test
  public void testC78() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FX_5, S_FX_6, S_FX_7, S_FX_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC78", "Rates & Fx", "Delta", "FX Intercurrency Correlation (4 ccys)", "S_FX_5,S_FX_6,S_FX_7,S_FX_8", "C70,C71,C75", "Total",
        " 1,670,512,496 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("1670512496"), amount);
  }

  /**
   * Required Passes: "C70,C72,C76" Element Tested: FX Intercurrency Correlation (exceeds concentration threshold) Risk
   * Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC79() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities =
        Arrays.asList(S_FX_5, S_FX_6, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10, S_FX_9, S_FX_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC79", "Rates & Fx", "Delta", "FX Intercurrency Correlation (exceeds concentration threshold)",
        "S_FX_5,S_FX_6,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10,S_FX_9,S_FX_10", "C70,C72,C76", "Total",
        " 7,250,088,783 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("7250088783"), amount);
  }

  /**
   * Required Passes: C68-C79 Element Tested: All FX sensitivities Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC80() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_FX);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC80", "Rates & Fx", "Delta", "All FX sensitivities", "All S_FX", "C68-C79", "Total", " 10,242,651,353 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("10242651353"), amount);
  }

  /**
   * Required Passes: C1-C80 Element Tested: All Rates & FX Sensitivities Risk Measure: Delta Group: Rates & Fx
   */
  @Test
  public void testC81() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_FX);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC81", "Rates & Fx", "Delta", "All Rates & FX Sensitivities", "All S_IR,S_FX", "C1-C80", "Total", " 12,251,007,545 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("12251007545"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC82() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC82", "Credit", "Delta", "CRQ Risk Weight (bkt 1)", "S_CRQ_1", "None", "Total", " 16,800,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("16800000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC83() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC83", "Credit", "Delta", "CRQ Risk Weight (bkt 1)", "S_CRQ_2", "None", "Total", " 6,300,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("6300000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC84() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC84", "Credit", "Delta", "CRQ Risk Weight (bkt 2)", "S_CRQ_3", "None", "Total", " 4,860,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("4860000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC85() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC85", "Credit", "Delta", "CRQ Risk Weight (bkt 2)", "S_CRQ_4", "None", "Total", " 4,860,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("4860000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 3) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC86() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC86", "Credit", "Delta", "CRQ Risk Weight (bkt 3)", "S_CRQ_5", "None", "Total", " 2,880,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("2880000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 3) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC87() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC87", "Credit", "Delta", "CRQ Risk Weight (bkt 3)", "S_CRQ_6", "None", "Total", " 1,600,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1600000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 4) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC88() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC88", "Credit", "Delta", "CRQ Risk Weight (bkt 4)", "S_CRQ_7", "None", "Total", " 2,160,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("2160000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 4) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC89() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC89", "Credit", "Delta", "CRQ Risk Weight (bkt 4)", "S_CRQ_8", "None", "Total", " 1,200,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1200000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 5) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC90() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC90", "Credit", "Delta", "CRQ Risk Weight (bkt 5)", "S_CRQ_9", "None", "Total", " 2,520,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("2520000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 5) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC91() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC91", "Credit", "Delta", "CRQ Risk Weight (bkt 5)", "S_CRQ_10", "None", "Total", " 1,400,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 6) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC92() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC92", "Credit", "Delta", "CRQ Risk Weight (bkt 6)", "S_CRQ_11", "None", "Total", " 2,160,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("2160000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 7) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC93() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC93", "Credit", "Delta", "CRQ Risk Weight (bkt 7)", "S_CRQ_12", "None", "Total", " 24,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("24000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 8) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC94() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC94", "Credit", "Delta", "CRQ Risk Weight (bkt 8)", "S_CRQ_13", "None", "Total", " 14,400,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("14400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 9) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC95() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC95", "Credit", "Delta", "CRQ Risk Weight (bkt 9)", "S_CRQ_14", "None", "Total", " 9,180,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("9180000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 10) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC96() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC96", "Credit", "Delta", "CRQ Risk Weight (bkt 10)", "S_CRQ_15", "None", "Total", " 5,300,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5300000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 11) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC97() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC97", "Credit", "Delta", "CRQ Risk Weight (bkt 11)", "S_CRQ_16", "None", "Total", " 6,840,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("6840000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (bkt 12) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC98() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC98", "Credit", "Delta", "CRQ Risk Weight (bkt 12)", "S_CRQ_17", "None", "Total", " 5,700,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC99() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC99", "Credit", "Delta", "CRQ Risk Weight (residual)", "S_CRQ_18", "None", "Total", " 25,920,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("25920000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC100() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC100", "Credit", "Delta", "CRQ Risk Weight (residual)", "S_CRQ_19", "None", "Total", " 14,400,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("14400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC101() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC101", "Credit", "Delta", "CRQ Risk Weight (residual)", "S_CRQ_20", "None", "Total", " 25,920,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("25920000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC102() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC102", "Credit", "Delta", "CRQ Risk Weight (residual)", "S_CRQ_21", "None", "Total", " 25,920,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("25920000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC103() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC103", "Credit", "Delta", "CRQ Risk Weight (residual)", "S_CRQ_22", "None", "Total", " 14,400,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("14400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (base corr) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC104() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC104", "Credit", "Delta", "CRQ Risk Weight (base corr)", "S_CRQ_23", "None", "Total", " -   ", " -   ", " -   ", " 1,250,000 ", " -   ",
        new BigDecimal("1250000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (base corr) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC105() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC105", "Credit", "Delta", "CRQ Risk Weight (base corr)", "S_CRQ_24", "None", "Total", " -   ", " -   ", " -   ", " 500,000 ", " -   ",
        new BigDecimal("500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRQ Risk Weight (base corr) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC106() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC106", "Credit", "Delta", "CRQ Risk Weight (base corr)", "S_CRQ_25", "None", "Total", " -   ", " -   ", " -   ", " 1,000,000 ", " -   ",
        new BigDecimal("1000000"), amount);
  }

  /**
   * Required Passes: "C82,C83" Element Tested: CRQ Concentration (bkt 1) (diff tenors) Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC107() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_1, S_CRQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC107", "Credit", "Delta", "CRQ Concentration (bkt 1) (diff tenors)", "S_CRQ_1,S_CRQ_1,S_CRQ_2", "C82,C83", "Total", " 27,837,478 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("27837478"), amount);
  }

  /**
   * Required Passes: C85 Element Tested: CRQ Concentration (bkt 2-6) (same sign) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC108() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_4, S_CRQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC108", "Credit", "Delta", "CRQ Concentration (bkt 2-6) (same sign)", "S_CRQ_4,S_CRQ_4", "C85", "Total", " 9,720,000 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("9720000"), amount);
  }

  /**
   * Required Passes: C93 Element Tested: CRQ Concentration (bkt 7) (all neg) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC109() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_12, S_CRQ_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC109", "Credit", "Delta", "CRQ Concentration (bkt 7) (all neg)", "S_CRQ_12,S_CRQ_12", "C93", "Total", " 48,000,000 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("48000000"), amount);
  }

  /**
   * Required Passes: C95 Element Tested: CRQ Concentration (bkt 8-12) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC110() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_14, S_CRQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC110", "Credit", "Delta", "CRQ Concentration (bkt 8-12)", "S_CRQ_14,S_CRQ_14", "C95", "Total", " 18,360,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("18360000"), amount);
  }

  /**
   * Required Passes: "C82,C83,C107" Element Tested: "CRQ Intra-bucket Correlation (same name, diff tenor)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC111() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC111", "Credit", "Delta", "CRQ Intra-bucket Correlation (same name, diff tenor)", "S_CRQ_1,S_CRQ_2", "C82,C83,C107", "Total",
        " 11,183,363 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("11183363"), amount);
  }

  /**
   * Required Passes: "C84,C85,C108" Element Tested: "CRQ Intra-bucket Correlation (same name, diff ccy)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC112() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_3, S_CRQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC112", "Credit", "Delta", "CRQ Intra-bucket Correlation (same name, diff ccy)", "S_CRQ_3,S_CRQ_4", "C84,C85,C108", "Total", " 1,818,445 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("1818445"), amount);
  }

  /**
   * Required Passes: "C86,C87" Element Tested: "CRQ Intra-bucket Correlation (same name, diff tenor, diff ccy)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC113() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_5, S_CRQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC113", "Credit", "Delta", "CRQ Intra-bucket Correlation (same name, diff tenor, diff ccy)", "S_CRQ_5,S_CRQ_6", "C86,C87", "Total",
        " 1,511,132 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("1511132"), amount);
  }

  /**
   * Required Passes: "C88,C89" Element Tested: "CRQ Intra-bucket Correlation (same name, same tenor, same ccy)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC114() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_7, S_CRQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC114", "Credit", "Delta", "CRQ Intra-bucket Correlation (same name, same tenor, same ccy)", "S_CRQ_7,S_CRQ_8", "C88,C89", "Total",
        " 960,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("960000"), amount);
  }

  /**
   * Required Passes: "C90,C91" Element Tested: CRQ Intra-bucket Correlation (diff name) Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC115() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_9, S_CRQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC115", "Credit", "Delta", "CRQ Intra-bucket Correlation (diff name)", "S_CRQ_9,S_CRQ_10", "C90,C91", "Total", " 2,312,332 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("2312332"), amount);
  }

  /**
   * Required Passes: "C99,C100" Element Tested: "CRQ Intra-bucket Correlation (residual, same name, diff tenor)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC116() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_18, S_CRQ_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC116", "Credit", "Delta", "CRQ Intra-bucket Correlation (residual, same name, diff tenor)", "S_CRQ_18,S_CRQ_19", "C99,C100", "Total",
        " 22,493,519 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("22493519"), amount);
  }

  /**
   * Required Passes: "C100,C101" Element Tested: "CRQ Intra-bucket Correlation (residual, diff name)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC117() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_19, S_CRQ_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC117", "Credit", "Delta", "CRQ Intra-bucket Correlation (residual, diff name)", "S_CRQ_19,S_CRQ_20", "C100,C101", "Total", " 22,493,519 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("22493519"), amount);
  }

  /**
   * Required Passes: "C84,C86" Element Tested: CRQ Inter-bucket Correlation (exceeds concentration threshold) Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC118() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_3, S_CRQ_3, S_CRQ_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC118", "Credit", "Delta", "CRQ Inter-bucket Correlation (exceeds concentration threshold)", "S_CRQ_3,S_CRQ_3,S_CRQ_5", "C84,C86", "Total",
        " 11,336,971 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("11336971"), amount);
  }

  /**
   * Required Passes: "C82,C84" Element Tested: "CRQ Inter-bucket Correlation (same sign, pos)" Risk Measure: Delta
   * Group: Credit
   */
  @Test
  public void testC119() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC119", "Credit", "Delta", "CRQ Inter-bucket Correlation (same sign, pos)", "S_CRQ_1,S_CRQ_3", "C82,C84", "Total", " 19,095,711 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("19095711"), amount);
  }

  /**
   * Required Passes: "C83,C85,C108" Element Tested: "CRQ Inter-bucket Correlation (same sign, neg)" Risk Measure: Delta
   * Group: Credit
   */
  @Test
  public void testC120() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_2, S_CRQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC120", "Credit", "Delta", "CRQ Inter-bucket Correlation (same sign, neg)", "S_CRQ_2,S_CRQ_4", "C83,C85,C108", "Total", " 9,238,753 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("9238753"), amount);
  }

  /**
   * Required Passes: "C82,C85,C108" Element Tested: CRQ Inter-bucket Correlation (diff sign) Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC121() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC121", "Credit", "Delta", "CRQ Inter-bucket Correlation (diff sign)", "S_CRQ_1,S_CRQ_4", "C82,C85,C108", "Total", " 15,718,557 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("15718557"), amount);
  }

  /**
   * Required Passes: "C82,C85,C99,C108,C121" Element Tested: CRQ Inter-bucket Correlation (diff sign) Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC122() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_4, S_CRQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC122", "Credit", "Delta", "CRQ Inter-bucket Correlation (diff sign)", "S_CRQ_1,S_CRQ_4,S_CRQ_18", "C82,C85,C99,C108,C121", "Total",
        " 41,638,557 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("41638557"), amount);
  }

  /**
   * Required Passes: "C82,C84,C86,C88,C90,C92,C118,C119" Element Tested: "CRQ Inter-bucket Correlation (bkts 1-3, 4-6)"
   * Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC123() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3, S_CRQ_5, S_CRQ_7, S_CRQ_9, S_CRQ_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC123", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 1-3, 4-6)", "S_CRQ_1,S_CRQ_3,S_CRQ_5,S_CRQ_7,S_CRQ_9,S_CRQ_11",
        "C82,C84,C86,C88,C90,C92,C118,C119", "Total", " 24,129,359 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("24129359"), amount);
  }

  /**
   * Required Passes: "C82,C84,C86,C93-C95,C109,C110,C118,C119" Element Tested: "CRQ Inter-bucket Correlation (bkts 1-3,
   * 7-9)" Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC124() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3, S_CRQ_5, S_CRQ_12, S_CRQ_13, S_CRQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC124", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 1-3, 7-9)", "S_CRQ_1,S_CRQ_3,S_CRQ_5,S_CRQ_12,S_CRQ_13,S_CRQ_14",
        "C82,C84,C86,C93-C95,C109,C110,C118,C119", "Total", " 27,663,509 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("27663509"), amount);
  }

  /**
   * Required Passes: "C82,C84,C86,C96-C98,C118,C119" Element Tested: "CRQ Inter-bucket Correlation (bkts 1-3, 10-12)"
   * Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC125() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3, S_CRQ_5, S_CRQ_15, S_CRQ_16, S_CRQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC125", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 1-3, 10-12)", "S_CRQ_1,S_CRQ_3,S_CRQ_5,S_CRQ_15,S_CRQ_16,S_CRQ_17",
        "C82,C84,C86,C96-C98,C118,C119", "Total", " 20,785,974 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("20785974"), amount);
  }

  /**
   * Required Passes: "C88,C90,C92-C95,C109,C110" Element Tested: "CRQ Inter-bucket Correlation (bkts 4-6, 7-9)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC126() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_7, S_CRQ_9, S_CRQ_11, S_CRQ_12, S_CRQ_13, S_CRQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC126", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 4-6, 7-9)", "S_CRQ_7,S_CRQ_9,S_CRQ_11,S_CRQ_12,S_CRQ_13,S_CRQ_14",
        "C88,C90,C92-C95,C109,C110", "Total", " 27,245,835 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("27245835"), amount);
  }

  /**
   * Required Passes: "C88,C90,C92,C96-C98" Element Tested: "CRQ Inter-bucket Correlation (bkts 4-6, 10-12)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC127() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_7, S_CRQ_9, S_CRQ_11, S_CRQ_15, S_CRQ_16, S_CRQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC127", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 4-6, 10-12)", "S_CRQ_7,S_CRQ_9,S_CRQ_11,S_CRQ_15,S_CRQ_16,S_CRQ_17",
        "C88,C90,C92,C96-C98", "Total", " 9,232,153 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("9232153"), amount);
  }

  /**
   * Required Passes: "C93-C98,C109,C110" Element Tested: "CRQ Inter-bucket Correlation (bkts 7-9, 10-12)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC128() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_12, S_CRQ_13, S_CRQ_14, S_CRQ_15, S_CRQ_16, S_CRQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC128", "Credit", "Delta", "CRQ Inter-bucket Correlation (bkts 7-9, 10-12)", "S_CRQ_12,S_CRQ_13,S_CRQ_14,S_CRQ_15,S_CRQ_16,S_CRQ_17",
        "C93-C98,C109,C110", "Total", " 31,192,239 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("31192239"), amount);
  }

  /**
   * Required Passes: "C82,C84,C86,C88,C90,C92-C98,C109,C110,C118,C119,C123-C128" Element Tested: CRQ Inter-bucket
   * Correlation (all) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC129() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3, S_CRQ_5, S_CRQ_7, S_CRQ_9, S_CRQ_11, S_CRQ_12, S_CRQ_13, S_CRQ_14, S_CRQ_15, S_CRQ_16, S_CRQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC129", "Credit", "Delta", "CRQ Inter-bucket Correlation (all)",
        "S_CRQ_1,S_CRQ_3,S_CRQ_5,S_CRQ_7,S_CRQ_9,S_CRQ_11,S_CRQ_12,S_CRQ_13,S_CRQ_14,S_CRQ_15,S_CRQ_16,S_CRQ_17", "C82,C84,C86,C88,C90,C92-C98,C109,C110,C118,C119,C123-C128",
        "Total", " 29,313,705 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("29313705"), amount);
  }

  /**
   * Required Passes: "C82,C84,C86,C88,C90,C92-C99,C109,C110,C118,C119,C123-C129" Element Tested: CRQ Inter-bucket
   * Correlation (all + residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC130() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_1, S_CRQ_3, S_CRQ_5, S_CRQ_7, S_CRQ_9, S_CRQ_11, S_CRQ_12, S_CRQ_13, S_CRQ_14, S_CRQ_15, S_CRQ_16, S_CRQ_17, S_CRQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC130", "Credit", "Delta", "CRQ Inter-bucket Correlation (all + residual)",
        "S_CRQ_1,S_CRQ_3,S_CRQ_5,S_CRQ_7,S_CRQ_9,S_CRQ_11,S_CRQ_12,S_CRQ_13,S_CRQ_14,S_CRQ_15,S_CRQ_16,S_CRQ_17,S_CRQ_18",
        "C82,C84,C86,C88,C90,C92-C99,C109,C110,C118,C119,C123-C129", "Total", " 55,233,705 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("55233705"), amount);
  }

  /**
   * Required Passes: "C104,C105" Element Tested: CRQ Base Corr Netting Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC131() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_23, S_CRQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC131", "Credit", "Delta", "CRQ Base Corr Netting", "S_CRQ_23,S_CRQ_24", "C104,C105", "Total", " -   ", " -   ", " -   ", " 750,000 ",
        " -   ", new BigDecimal("750000"), amount);
  }

  /**
   * Required Passes: "C104-C106,C131" Element Tested: CRQ Base Corr Correlation Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC132() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRQ_23, S_CRQ_24, S_CRQ_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC132", "Credit", "Delta", "CRQ Base Corr Correlation", "S_CRQ_23,S_CRQ_24,S_CRQ_25", "C104-C106,C131", "Total", " -   ", " -   ", " -   ",
        " 1,386,542 ", " -   ", new BigDecimal("1386542"), amount);
  }

  /**
   * Required Passes: C82-C132 Element Tested: All Credit Qualifying (no multiplier) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC133() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CRQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC133", "Credit", "Delta", "All Credit Qualifying (no multiplier)", "All S_CRQ", "C82-C132", "Total", " 77,622,570 ", " -   ", " -   ",
        " 1,386,542 ", " -   ", new BigDecimal("79009113"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC134() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC134", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_1", "None", "Total", " 396,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("396000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC135() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC135", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_2", "None", "Total", " 198,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("198000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC136() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC136", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_3", "None", "Total", " 198,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("198000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC137() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC137", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_4", "None", "Total", " 132,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("132000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC138() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC138", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_5", "None", "Total", " 198,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("198000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC139() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC139", "Credit", "Delta", "CRNQ Risk Weight (bkt 1)", "S_CRNQ_6", "None", "Total", " 264,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("264000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC140() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC140", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_7", "None", "Total", " 100,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("100000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC141() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC141", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_8", "None", "Total", " 50,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("50000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC142() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC142", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_9", "None", "Total", " 50,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("50000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC143() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC143", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_10", "None", "Total", " 50,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("50000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC144() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC144", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_11", "None", "Total", " 50,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("50000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC145() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC145", "Credit", "Delta", "CRNQ Risk Weight (bkt 2)", "S_CRNQ_12", "None", "Total", " 75,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("75000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC146() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC146", "Credit", "Delta", "CRNQ Risk Weight (residual)", "S_CRNQ_13", "None", "Total", " 100,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("100000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC147() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC147", "Credit", "Delta", "CRNQ Risk Weight (residual)", "S_CRNQ_14", "None", "Total", " 50,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("50000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC148() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC148", "Credit", "Delta", "CRNQ Risk Weight (residual)", "S_CRNQ_15", "None", "Total", " 75,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("75000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Risk Weight (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC149() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC149", "Credit", "Delta", "CRNQ Risk Weight (residual)", "S_CRNQ_16", "None", "Total", " 25,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("25000000"), amount);
  }

  /**
   * Required Passes: "C134,C135" Element Tested: CRNQ Concentration (bkt 1) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC150() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_1, S_CRNQ_2, S_CRNQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC150", "Credit", "Delta", "CRNQ Concentration (bkt 1)", "S_CRNQ_1,S_CRNQ_2,S_CRNQ_2", "C134,C135", "Total", " 755,519,848 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("755519848"), amount);
  }

  /**
   * Required Passes: "C140,C143" Element Tested: CRNQ Concentration (bkt 2) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC151() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_7, S_CRNQ_7, S_CRNQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC151", "Credit", "Delta", "CRNQ Concentration (bkt 2)", "S_CRNQ_7,S_CRNQ_7,S_CRNQ_10", "C140,C143", "Total", " 161,554,944 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("161554944"), amount);
  }

  /**
   * Required Passes: "C146,C148" Element Tested: CRNQ Concentration (residual) Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC152() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_13, S_CRNQ_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC152", "Credit", "Delta", "CRNQ Concentration (residual)", "S_CRNQ_13,S_CRNQ_15", "C146,C148", "Total", " 152,069,063 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("152069063"), amount);
  }

  /**
   * Required Passes: "C134,C135,C150" Element Tested: "CRNQ Intra-bucket correlation (same name, same sign)" Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC153() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_1, S_CRNQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC153", "Credit", "Delta", "CRNQ Intra-bucket correlation (same name, same sign)", "S_CRNQ_1,S_CRNQ_2", "C134,C135,C150", "Total",
        " 569,744,785 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("569744785"), amount);
  }

  /**
   * Required Passes: "C135,C136" Element Tested: "CRNQ Intra-bucket correlation (same name, opp sign)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC154() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_2, S_CRNQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC154", "Credit", "Delta", "CRNQ Intra-bucket correlation (same name, opp sign)", "S_CRNQ_2,S_CRNQ_3", "C135,C136", "Total",
        " 118,800,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("118800000"), amount);
  }

  /**
   * Required Passes: "C136,C137" Element Tested: "CRNQ Intra-bucket correlation (diff name, same sign)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC155() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_3, S_CRNQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC155", "Credit", "Delta", "CRNQ Intra-bucket correlation (diff name, same sign)", "S_CRNQ_3,S_CRNQ_4", "C136,C137", "Total",
        " 265,972,630 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("265972630"), amount);
  }

  /**
   * Required Passes: "C136,C139" Element Tested: "CRNQ Intra-bucket correlation (diff name, opp sign)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC156() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_3, S_CRNQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC156", "Credit", "Delta", "CRNQ Intra-bucket correlation (diff name, opp sign)", "S_CRNQ_3,S_CRNQ_6", "C136,C139", "Total",
        " 370,306,468 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("370306468"), amount);
  }

  /**
   * Required Passes: "C146,C147" Element Tested: CRNQ Intra-bucket correlation (residual) Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC157() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_13, S_CRNQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC157", "Credit", "Delta", "CRNQ Intra-bucket correlation (residual)", "S_CRNQ_13,S_CRNQ_14", "C146,C147", "Total", " 86,602,540 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("86602540"), amount);
  }

  /**
   * Required Passes: "C134,C140" Element Tested: CRNQ Intra-bucket correlation (exceeds concentration threshold) Risk
   * Measure: Delta Group: Credit
   */
  @Test
  public void testC158() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_1, S_CRNQ_1, S_CRNQ_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC158", "Credit", "Delta", "CRNQ Intra-bucket correlation (exceeds concentration threshold)", "S_CRNQ_1,S_CRNQ_1,S_CRNQ_7", "C134,C140",
        "Total", " 757,564,519 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("757564519"), amount);
  }

  /**
   * Required Passes: "C134,C140,C158" Element Tested: "CRNQ Inter-bucket correlation (same sign, pos)" Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC159() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_1, S_CRNQ_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC159", "Credit", "Delta", "CRNQ Inter-bucket correlation (same sign, pos)", "S_CRNQ_1,S_CRNQ_7", "C134,C140,C158", "Total",
        " 367,608,487 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("367608487"), amount);
  }

  /**
   * Required Passes: "C136,C141" Element Tested: "CRNQ Inter-bucket correlation (same sign, neg)" Risk Measure: Delta
   * Group: Credit
   */
  @Test
  public void testC160() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_3, S_CRNQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC160", "Credit", "Delta", "CRNQ Inter-bucket correlation (same sign, neg)", "S_CRNQ_3,S_CRNQ_8", "C136,C141", "Total", " 222,764,450 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("222764450"), amount);
  }

  /**
   * Required Passes: "C135,C141" Element Tested: CRNQ Inter-bucket correlation (diff sign) Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC161() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_2, S_CRNQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC161", "Credit", "Delta", "CRNQ Inter-bucket correlation (diff sign)", "S_CRNQ_2,S_CRNQ_8", "C135,C141", "Total", " 183,804,244 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("183804244"), amount);
  }

  /**
   * Required Passes: "C135,C141,C146,C161" Element Tested: CRNQ Inter-bucket correlation (w/residual) Risk Measure:
   * Delta Group: Credit
   */
  @Test
  public void testC162() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRNQ_2, S_CRNQ_8, S_CRNQ_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC162", "Credit", "Delta", "CRNQ Inter-bucket correlation (w/residual)", "S_CRNQ_2,S_CRNQ_8,S_CRNQ_13", "C135,C141,C146,C161", "Total",
        " 283,804,244 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("283804244"), amount);
  }

  /**
   * Required Passes: C134-C162 Element Tested: All Credit Non Qualifying Risk Measure: Delta Group: Credit
   */
  @Test
  public void testC163() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CRNQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC163", "Credit", "Delta", "All Credit Non Qualifying", "All S_CRNQ", "C134-C162", "Total", " 545,124,809 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("545124809"), amount);
  }

  /**
   * Required Passes: C82-C163 Element Tested: All Credit Qualifying and Non-Qualifying Risk Measure: Delta Group:
   * Credit
   */
  @Test
  public void testC164() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC164", "Credit", "Delta", "All Credit Qualifying and Non-Qualifying", "All S_CRQ,S_CRNQ", "C82-C163", "Total", " 590,665,242 ", " -   ",
        " -   ", " 1,386,542 ", " -   ", new BigDecimal("591539441"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 1) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC165() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC165", "Equities", "Delta", "EQ Risk Weight (bkt 1)", "S_EQ_1", "None", "Total", " 55,800,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("55800000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 1) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC166() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC166", "Equities", "Delta", "EQ Risk Weight (bkt 1)", "S_EQ_2", "None", "Total", " 9,300,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("9300000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 2) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC167() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC167", "Equities", "Delta", "EQ Risk Weight (bkt 2)", "S_EQ_3", "None", "Total", " 19,400,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("19400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 2) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC168() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC168", "Equities", "Delta", "EQ Risk Weight (bkt 2)", "S_EQ_4", "None", "Total", " 9,700,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("9700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 3) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC169() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC169", "Equities", "Delta", "EQ Risk Weight (bkt 3)", "S_EQ_5", "None", "Total", " 20,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("20000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 3) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC170() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC170", "Equities", "Delta", "EQ Risk Weight (bkt 3)", "S_EQ_6", "None", "Total", " 10,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("10000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 4) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC171() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC171", "Equities", "Delta", "EQ Risk Weight (bkt 4)", "S_EQ_7", "None", "Total", " 18,400,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("18400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 4) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC172() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC172", "Equities", "Delta", "EQ Risk Weight (bkt 4)", "S_EQ_8", "None", "Total", " 9,200,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("9200000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 5) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC173() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC173", "Equities", "Delta", "EQ Risk Weight (bkt 5)", "S_EQ_9", "None", "Total", " 77,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("77000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 5) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC174() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC174", "Equities", "Delta", "EQ Risk Weight (bkt 5)", "S_EQ_10", "None", "Total", " 15,400,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("15400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 6) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC175() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC175", "Equities", "Delta", "EQ Risk Weight (bkt 6)", "S_EQ_11", "None", "Total", " 34,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("34000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 6) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC176() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC176", "Equities", "Delta", "EQ Risk Weight (bkt 6)", "S_EQ_12", "None", "Total", " 17,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("17000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 7) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC177() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC177", "Equities", "Delta", "EQ Risk Weight (bkt 7)", "S_EQ_13", "None", "Total", " 38,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("38000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 7) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC178() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC178", "Equities", "Delta", "EQ Risk Weight (bkt 7)", "S_EQ_14", "None", "Total", " 19,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("19000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 8) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC179() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC179", "Equities", "Delta", "EQ Risk Weight (bkt 8)", "S_EQ_15", "None", "Total", " 38,400,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("38400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 8) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC180() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC180", "Equities", "Delta", "EQ Risk Weight (bkt 8)", "S_EQ_16", "None", "Total", " 19,200,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("19200000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 9) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC181() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC181", "Equities", "Delta", "EQ Risk Weight (bkt 9)", "S_EQ_17", "None", "Total", " 4,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("4000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 9) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC182() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC182", "Equities", "Delta", "EQ Risk Weight (bkt 9)", "S_EQ_18", "None", "Total", " 10,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("10000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 10) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC183() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC183", "Equities", "Delta", "EQ Risk Weight (bkt 10)", "S_EQ_19", "None", "Total", " 6,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("6000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 10) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC184() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC184", "Equities", "Delta", "EQ Risk Weight (bkt 10)", "S_EQ_20", "None", "Total", " 5,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 11) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC185() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC185", "Equities", "Delta", "EQ Risk Weight (bkt 11)", "S_EQ_21", "None", "Total", " 5,900,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5900000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 11) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC186() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC186", "Equities", "Delta", "EQ Risk Weight (bkt 11)", "S_EQ_22", "None", "Total", " 11,800,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("11800000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 11) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC187() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC187", "Equities", "Delta", "EQ Risk Weight (bkt 11)", "S_EQ_23", "None", "Total", " 5,900,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5900000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 12) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC188() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC188", "Equities", "Delta", "EQ Risk Weight (bkt 12)", "S_EQ_24", "None", "Total", " 17,700,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("17700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 12) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC189() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC189", "Equities", "Delta", "EQ Risk Weight (bkt 12)", "S_EQ_25", "None", "Total", " 11,800,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("11800000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (bkt 12) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC190() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_26);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC190", "Equities", "Delta", "EQ Risk Weight (bkt 12)", "S_EQ_26", "None", "Total", " 5,900,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5900000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (residual) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC191() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC191", "Equities", "Delta", "EQ Risk Weight (residual)", "S_EQ_27", "None", "Total", " 5,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQ Risk Weight (residual) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC192() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_28);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC192", "Equities", "Delta", "EQ Risk Weight (residual)", "S_EQ_28", "None", "Total", " 3,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("3000000"), amount);
  }

  /**
   * Required Passes: C165 Element Tested: EQ Concentration (bkt 1-4) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC193() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC193", "Equities", "Delta", "EQ Concentration (bkt 1-4)", "S_EQ_1,S_EQ_1", "C165", "Total", " 111,600,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("111600000"), amount);
  }

  /**
   * Required Passes: C173 Element Tested: EQ Concentration (bkt 5-8) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC194() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_9, S_EQ_9, S_EQ_9, S_EQ_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC194", "Equities", "Delta", "EQ Concentration (bkt 5-8)", "S_EQ_9,S_EQ_9,S_EQ_9,S_EQ_9", "C173", "Total", " 308,000,000 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("308000000"), amount);
  }

  /**
   * Required Passes: C182 Element Tested: EQ Concentration (bkt 9) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC195() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_18, S_EQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC195", "Equities", "Delta", "EQ Concentration (bkt 9)", "S_EQ_18,S_EQ_18", "C182", "Total", " 20,000,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("20000000"), amount);
  }

  /**
   * Required Passes: C183 Element Tested: EQ Concentration (bkt 10) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC196() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_19, S_EQ_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC196", "Equities", "Delta", "EQ Concentration (bkt 10)", "S_EQ_19,S_EQ_19", "C183", "Total", " 12,000,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("12000000"), amount);
  }

  /**
   * Required Passes: C185 Element Tested: EQ Concentration (bkt 11-12) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC197() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21, S_EQ_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC197", "Equities", "Delta", "EQ Concentration (bkt 11-12)",
        "S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21,S_EQ_21", "C185", "Total", " 59,000,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("59000000000"), amount);
  }

  /**
   * Required Passes: C191 Element Tested: EQ Concentration (residual) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC198() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_27, S_EQ_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC198", "Equities", "Delta", "EQ Concentration (residual)", "S_EQ_27,S_EQ_27", "C191", "Total", " 10,000,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("10000000"), amount);
  }

  /**
   * Required Passes: "C165,C166,C193" Element Tested: EQ Intra Bucket Correlation (Bkt 1) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC199() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC199", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 1)", "S_EQ_1,S_EQ_2", "C165,C166,C193", "Total", " 58,197,495 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("58197495"), amount);
  }

  /**
   * Required Passes: "C167,C168" Element Tested: EQ Intra Bucket Correlation (Bkt 2) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC200() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_3, S_EQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC200", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 2)", "S_EQ_3,S_EQ_4", "C167,C168", "Total", " 19,593,040 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("19593040"), amount);
  }

  /**
   * Required Passes: "C169,C170" Element Tested: EQ Intra Bucket Correlation (Bkt 3) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC201() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_5, S_EQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC201", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 3)", "S_EQ_5,S_EQ_6", "C169,C170", "Total", " 19,493,589 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("19493589"), amount);
  }

  /**
   * Required Passes: "C171,C172" Element Tested: EQ Intra Bucket Correlation (Bkt 4) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC202() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_7, S_EQ_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC202", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 4)", "S_EQ_7,S_EQ_8", "C171,C172", "Total", " 22,610,299 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("22610299"), amount);
  }

  /**
   * Required Passes: "C173,C174,C194" Element Tested: EQ Intra Bucket Correlation (Bkt 5) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC203() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_9, S_EQ_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC203", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 5)", "S_EQ_9,S_EQ_10", "C173,C174,C194", "Total", " 81,924,526 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("81924526"), amount);
  }

  /**
   * Required Passes: "C175,C176" Element Tested: EQ Intra Bucket Correlation (Bkt 6) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC204() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_11, S_EQ_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC204", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 6)", "S_EQ_11,S_EQ_12", "C175,C176", "Total", " 32,255,232 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("32255232"), amount);
  }

  /**
   * Required Passes: "C177,C178" Element Tested: EQ Intra Bucket Correlation (Bkt 7) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC205() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_13, S_EQ_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC205", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 7)", "S_EQ_13,S_EQ_14", "C177,C178", "Total", " 35,849,128 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("35849128"), amount);
  }

  /**
   * Required Passes: "C179,C180" Element Tested: EQ Intra Bucket Correlation (Bkt 8) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC206() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_15, S_EQ_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC206", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 8)", "S_EQ_15,S_EQ_16", "C179,C180", "Total", " 48,268,052 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("48268052"), amount);
  }

  /**
   * Required Passes: "C181,C182,C195" Element Tested: EQ Intra Bucket Correlation (Bkt 9) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC207() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_17, S_EQ_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC207", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 9)", "S_EQ_17,S_EQ_18", "C181,C182,C195", "Total", " 10,039,920 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("10039920"), amount);
  }

  /**
   * Required Passes: "C183,C184,C196" Element Tested: EQ Intra Bucket Correlation (Bkt 10) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC208() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_19, S_EQ_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC208", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 10)", "S_EQ_19,S_EQ_20", "C183,C184,C196", "Total", " 7,000,000 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("7000000"), amount);
  }

  /**
   * Required Passes: "C186,C187" Element Tested: EQ Intra Bucket Correlation (Bkt 11) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC209() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_22, S_EQ_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC209", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 11)", "S_EQ_22,S_EQ_23", "C186,C187", "Total", " 10,554,241 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("10554241"), amount);
  }

  /**
   * Required Passes: "C189,C190" Element Tested: EQ Intra Bucket Correlation (Bkt 12) Risk Measure: Delta Group:
   * Equities
   */
  @Test
  public void testC210() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_25, S_EQ_26);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC210", "Equities", "Delta", "EQ Intra Bucket Correlation (Bkt 12)", "S_EQ_25,S_EQ_26", "C189,C190", "Total", " 10,554,241 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("10554241"), amount);
  }

  /**
   * Required Passes: "C165,C166,C193,C199" Element Tested: EQ Intra Bucket Correlation (exceeds concentration
   * threshold) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC211() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_1, S_EQ_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC211", "Equities", "Delta", "EQ Intra Bucket Correlation (exceeds concentration threshold)", "S_EQ_1,S_EQ_1,S_EQ_2", "C165,C166,C193,C199",
        "Total", " 113,642,804 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("113642804"), amount);
  }

  /**
   * Required Passes: "C165,C168,C193" Element Tested: "EQ Inter-bucket Correlation (same sign, pos)" Risk Measure:
   * Delta Group: Equities
   */
  @Test
  public void testC212() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC212", "Equities", "Delta", "EQ Inter-bucket Correlation (same sign, pos)", "S_EQ_1,S_EQ_4", "C165,C168,C193", "Total", " 58,516,955 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("58516955"), amount);
  }

  /**
   * Required Passes: "C167,C170" Element Tested: "EQ Inter-bucket Correlation (same sign, neg)" Risk Measure: Delta
   * Group: Equities
   */
  @Test
  public void testC213() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_3, S_EQ_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC213", "Equities", "Delta", "EQ Inter-bucket Correlation (same sign, neg)", "S_EQ_3,S_EQ_6", "C167,C170", "Total", " 23,944,937 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("23944937"), amount);
  }

  /**
   * Required Passes: "C165,C167,C193" Element Tested: EQ Inter-bucket Correlation (diff sign) Risk Measure: Delta
   * Group: Equities
   */
  @Test
  public void testC214() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC214", "Equities", "Delta", "EQ Inter-bucket Correlation (diff sign)", "S_EQ_1,S_EQ_3", "C165,C167,C193", "Total", " 55,290,071 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("55290071"), amount);
  }

  /**
   * Required Passes: "C165,C167,C191,C193,C198,C214" Element Tested: EQ Inter-bucket Correlation (w/residual) Risk
   * Measure: Delta Group: Equities
   */
  @Test
  public void testC215() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3, S_EQ_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC215", "Equities", "Delta", "EQ Inter-bucket Correlation (w/residual)", "S_EQ_1,S_EQ_3,S_EQ_27", "C165,C167,C191,C193,C198,C214", "Total",
        " 60,290,071 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("60290071"), amount);
  }

  /**
   * Required Passes: "C165,C167,C169,C171,C173,C175,C193,C194,C214" Element Tested: "EQ Inter-bucket Correlation (bks
   * 1-3, 4-6)" Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC216() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3, S_EQ_5, S_EQ_7, S_EQ_9, S_EQ_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC216", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 1-3, 4-6)", "S_EQ_1,S_EQ_3,S_EQ_5,S_EQ_7,S_EQ_9,S_EQ_11",
        "C165,C167,C169,C171,C173,C175,C193,C194,C214", "Total", " 97,851,263 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("97851263"), amount);
  }

  /**
   * Required Passes: "C165,C167,C169,C177,C179,C181,C193,C214" Element Tested: "EQ Inter-bucket Correlation (bks 1-3,
   * 7-9)" Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC217() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3, S_EQ_5, S_EQ_13, S_EQ_15, S_EQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC217", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 1-3, 7-9)", "S_EQ_1,S_EQ_3,S_EQ_5,S_EQ_13,S_EQ_15,S_EQ_17",
        "C165,C167,C169,C177,C179,C181,C193,C214", "Total", " 76,134,618 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("76134618"), amount);
  }

  /**
   * Required Passes: "C165,C167,C169,C183,C185,C188,C193,C196,C197,C214" Element Tested: "EQ Inter-bucket Correlation
   * (bks 1-3, 10-12)" Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC218() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3, S_EQ_5, S_EQ_19, S_EQ_21, S_EQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC218", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 1-3, 10-12)", "S_EQ_1,S_EQ_3,S_EQ_5,S_EQ_19,S_EQ_21,S_EQ_24",
        "C165,C167,C169,C183,C185,C188,C193,C196,C197,C214", "Total", " 5,919,775,079 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("5919775079"), amount);
  }

  /**
   * Required Passes: "C171,C173,C175,C177,C179,C181,C194" Element Tested: "EQ Inter-bucket Correlation (bks 4-6, 7-9)"
   * Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC219() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_7, S_EQ_9, S_EQ_11, S_EQ_13, S_EQ_15, S_EQ_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC219", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 4-6, 7-9)", "S_EQ_7,S_EQ_9,S_EQ_11,S_EQ_13,S_EQ_15,S_EQ_17",
        "C171,C173,C175,C177,C179,C181,C194", "Total", " 87,904,712 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("87904712"), amount);
  }

  /**
   * Required Passes: "C171,C173,C175,C183,C185,C188,C194,C196,C197" Element Tested: "EQ Inter-bucket Correlation (bks
   * 4-6, 10-12)" Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC220() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_7, S_EQ_9, S_EQ_11, S_EQ_19, S_EQ_21, S_EQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC220", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 4-6, 10-12)", "S_EQ_7,S_EQ_9,S_EQ_11,S_EQ_19,S_EQ_21,S_EQ_24",
        "C171,C173,C175,C183,C185,C188,C194,C196,C197", "Total", " 5,915,755,538 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("5915755538"), amount);
  }

  /**
   * Required Passes: "C177,C179,C181,C183,C185,C188,C196,C197" Element Tested: "EQ Inter-bucket Correlation (bks 7-9,
   * 10-12)" Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC221() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_13, S_EQ_15, S_EQ_17, S_EQ_19, S_EQ_21, S_EQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC221", "Equities", "Delta", "EQ Inter-bucket Correlation (bks 7-9, 10-12)", "S_EQ_13,S_EQ_15,S_EQ_17,S_EQ_19,S_EQ_21,S_EQ_24",
        "C177,C179,C181,C183,C185,C188,C196,C197", "Total", " 5,910,314,403 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("5910314403"), amount);
  }

  /**
   * Required Passes: "C165,C167,C169,C171,C173,C175,C177,C179,C181,C183,C185,C188,C193,C194,C196,C197,C214,C216-C221"
   * Element Tested: EQ Inter-bucket Correlation (all) Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC222() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQ_1, S_EQ_3, S_EQ_5, S_EQ_7, S_EQ_9, S_EQ_11, S_EQ_13, S_EQ_15, S_EQ_17, S_EQ_19, S_EQ_21, S_EQ_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC222", "Equities", "Delta", "EQ Inter-bucket Correlation (all)",
        "S_EQ_1,S_EQ_3,S_EQ_5,S_EQ_7,S_EQ_9,S_EQ_11,S_EQ_13,S_EQ_15,S_EQ_17,S_EQ_19,S_EQ_21,S_EQ_24",
        "C165,C167,C169,C171,C173,C175,C177,C179,C181,C183,C185,C188,C193,C194,C196,C197,C214,C216-C221", "Total", " 5,926,855,064 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5926855064"), amount);
  }

  /**
   * Required Passes: C165-C222 Element Tested: All Equity Sensitivities Risk Measure: Delta Group: Equities
   */
  @Test
  public void testC223() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_EQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC223", "Equities", "Delta", "All Equity Sensitivities", "All S_EQ", "C165-C222", "Total", " 5,933,432,851 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("5933432851"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 1) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC224() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC224", "Commodities", "Delta", "CM Risk Weight (bkt 1)", "S_CM_1", "None", "Total", " 1,350,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("1350000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 1) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC225() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC225", "Commodities", "Delta", "CM Risk Weight (bkt 1)", "S_CM_2", "None", "Total", " 9,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("9000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 2) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC226() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC226", "Commodities", "Delta", "CM Risk Weight (bkt 2)", "S_CM_3", "None", "Total", " 13,650,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("13650000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 2) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC227() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC227", "Commodities", "Delta", "CM Risk Weight (bkt 2)", "S_CM_4", "None", "Total", " 9,100,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("9100000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 3) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC228() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC228", "Commodities", "Delta", "CM Risk Weight (bkt 3)", "S_CM_5", "None", "Total", " 2,916,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("2916000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 3) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC229() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC229", "Commodities", "Delta", "CM Risk Weight (bkt 3)", "S_CM_6", "None", "Total", " 8,100,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("8100000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 4) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC230() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC230", "Commodities", "Delta", "CM Risk Weight (bkt 4)", "S_CM_7", "None", "Total", " 72,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("72000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 4) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC231() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC231", "Commodities", "Delta", "CM Risk Weight (bkt 4)", "S_CM_8", "None", "Total", " 7,200,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("7200000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 5) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC232() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC232", "Commodities", "Delta", "CM Risk Weight (bkt 5)", "S_CM_9", "None", "Total", " 100,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("100000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 5) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC233() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC233", "Commodities", "Delta", "CM Risk Weight (bkt 5)", "S_CM_10", "None", "Total", " 10,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("10000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 6) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC234() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC234", "Commodities", "Delta", "CM Risk Weight (bkt 6)", "S_CM_11", "None", "Total", " 5,330,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("5330000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 6) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC235() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC235", "Commodities", "Delta", "CM Risk Weight (bkt 6)", "S_CM_12", "None", "Total", " 8,200,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("8200000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 7) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC236() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC236", "Commodities", "Delta", "CM Risk Weight (bkt 7)", "S_CM_13", "None", "Total", " 97,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("97000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 8) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC237() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC237", "Commodities", "Delta", "CM Risk Weight (bkt 8)", "S_CM_14", "None", "Total", " 3,000,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("3000000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 8) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC238() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC238", "Commodities", "Delta", "CM Risk Weight (bkt 8)", "S_CM_15", "None", "Total", " 10,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("10000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 9) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC239() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC239", "Commodities", "Delta", "CM Risk Weight (bkt 9)", "S_CM_16", "None", "Total", " 100,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("100000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 9) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC240() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC240", "Commodities", "Delta", "CM Risk Weight (bkt 9)", "S_CM_17", "None", "Total", " 10,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("10000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 10) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC241() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC241", "Commodities", "Delta", "CM Risk Weight (bkt 10)", "S_CM_18", "None", "Total", " 816,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("816000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 10) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC242() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC242", "Commodities", "Delta", "CM Risk Weight (bkt 10)", "S_CM_19", "None", "Total", " 16,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("16000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 11) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC243() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC243", "Commodities", "Delta", "CM Risk Weight (bkt 11)", "S_CM_20", "None", "Total", " 1,860,000,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("1860000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 11) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC244() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC244", "Commodities", "Delta", "CM Risk Weight (bkt 11)", "S_CM_21", "None", "Total", " 6,200,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("6200000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 12) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC245() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC245", "Commodities", "Delta", "CM Risk Weight (bkt 12)", "S_CM_22", "None", "Total", " 5,200,000,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("5200000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 12) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC246() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC246", "Commodities", "Delta", "CM Risk Weight (bkt 12)", "S_CM_23", "None", "Total", " 6,500,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("6500000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 13) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC247() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC247", "Commodities", "Delta", "CM Risk Weight (bkt 13)", "S_CM_24", "None", "Total", " 92,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("92000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 13) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC248() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC248", "Commodities", "Delta", "CM Risk Weight (bkt 13)", "S_CM_25", "None", "Total", " 4,600,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("4600000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 14) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC249() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_26);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC249", "Commodities", "Delta", "CM Risk Weight (bkt 14)", "S_CM_26", "None", "Total", " 46,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("46000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 14) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC250() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC250", "Commodities", "Delta", "CM Risk Weight (bkt 14)", "S_CM_27", "None", "Total", " 4,600,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("4600000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 15) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC251() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_28);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC251", "Commodities", "Delta", "CM Risk Weight (bkt 15)", "S_CM_28", "None", "Total", " 40,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("40000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 15) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC252() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_29);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC252", "Commodities", "Delta", "CM Risk Weight (bkt 15)", "S_CM_29", "None", "Total", " 4,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("4000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 16) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC253() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_30);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC253", "Commodities", "Delta", "CM Risk Weight (bkt 16)", "S_CM_30", "None", "Total", " 400,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("400000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 16) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC254() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_31);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC254", "Commodities", "Delta", "CM Risk Weight (bkt 16)", "S_CM_31", "None", "Total", " 32,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("32000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 17) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC255() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC255", "Commodities", "Delta", "CM Risk Weight (bkt 17)", "S_CM_32", "None", "Total", " 6,630,000,000 ", " -   ", " -   ", " -   ",
        " -   ", new BigDecimal("6630000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CM Risk Weight (bkt 17) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC256() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC256", "Commodities", "Delta", "CM Risk Weight (bkt 17)", "S_CM_33", "None", "Total", " 10,200,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("10200000"), amount);
  }

  /**
   * Required Passes: C224 Element Tested: CM Concentration (bkt 1) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC257() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1, S_CM_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC257", "Commodities", "Delta", "CM Concentration (bkt 1)", "S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1,S_CM_1", "C224",
        "Total", " 13,500,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("13500000000"), amount);
  }

  /**
   * Required Passes: C226 Element Tested: CM Concentration (bkt 2) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC258() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3, S_CM_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC258", "Commodities", "Delta", "CM Concentration (bkt 2)", "S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3,S_CM_3", "C226",
        "Total", " 136,500,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("136500000000"), amount);
  }

  /**
   * Required Passes: C228 Element Tested: CM Concentration (bkt 3-5) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC259() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5, S_CM_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC259", "Commodities", "Delta", "CM Concentration (bkt 3-5)", "S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5,S_CM_5",
        "C228", "Total", " 29,160,000,000 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("29160000000"), amount);
  }

  /**
   * Required Passes: C234 Element Tested: CM Concentration (bkt 6-7) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC260() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11, S_CM_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC260", "Commodities", "Delta", "CM Concentration (bkt 6-7)",
        "S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11,S_CM_11", "C234", "Total", " 53,300,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("53300000000"), amount);
  }

  /**
   * Required Passes: C237 Element Tested: CM Concentration (bkt 8-9) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC261() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14, S_CM_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC261", "Commodities", "Delta", "CM Concentration (bkt 8-9)",
        "S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14,S_CM_14", "C237", "Total", " 30,000,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("30000000000"), amount);
  }

  /**
   * Required Passes: C241 Element Tested: CM Concentration (bkt 10) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC262() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_18, S_CM_18, S_CM_18, S_CM_18, S_CM_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC262", "Commodities", "Delta", "CM Concentration (bkt 10)", "S_CM_18,S_CM_18,S_CM_18,S_CM_18,S_CM_18", "C241", "Total", " 4,080,000,000 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("4080000000"), amount);
  }

  /**
   * Required Passes: C243 Element Tested: CM Concentration (bkt 11) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC263() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20, S_CM_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC263", "Commodities", "Delta", "CM Concentration (bkt 11)",
        "S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20,S_CM_20", "C243", "Total", " 18,600,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("18600000000"), amount);
  }

  /**
   * Required Passes: C245 Element Tested: CM Concentration (bkt 12) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC264() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22, S_CM_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC264", "Commodities", "Delta", "CM Concentration (bkt 12)",
        "S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22,S_CM_22", "C245", "Total", " 52,000,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("52000000000"), amount);
  }

  /**
   * Required Passes: C247 Element Tested: CM Concentration (bkt 13-15) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC265() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24, S_CM_24);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC265", "Commodities", "Delta", "CM Concentration (bkt 13-15)",
        "S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24,S_CM_24", "C247", "Total", " 920,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("920000000"), amount);
  }

  /**
   * Required Passes: C253 Element Tested: CM Concentration (bkt 16) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC266() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30, S_CM_30);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC266", "Commodities", "Delta", "CM Concentration (bkt 16)",
        "S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30,S_CM_30", "C253", "Total", " 4,000,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("4000000000"), amount);
  }

  /**
   * Required Passes: C255 Element Tested: CM Concentration (bkt 17) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC267() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32, S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC267", "Commodities", "Delta", "CM Concentration (bkt 17)",
        "S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32,S_CM_32", "C255", "Total", " 66,300,000,000 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("66300000000"), amount);
  }

  /**
   * Required Passes: "C224,C225,C257" Element Tested: CM Intra Bucket Correlation (Bkt 1) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC268() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1, S_CM_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC268", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 1)", "S_CM_1,S_CM_2", "C224,C225,C257", "Total", " 1,357,568,783 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("1357568783"), amount);
  }

  /**
   * Required Passes: "C226,C227,C258" Element Tested: CM Intra Bucket Correlation (Bkt 2) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC269() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3, S_CM_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC269", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 2)", "S_CM_3,S_CM_4", "C226,C227,C258", "Total", " 13,641,082,120 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("13641082120"), amount);
  }

  /**
   * Required Passes: "C228,C229,C259" Element Tested: CM Intra Bucket Correlation (Bkt 3) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC270() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_5, S_CM_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC270", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 3)", "S_CM_5,S_CM_6", "C228,C229,C259", "Total", " 2,908,224,884 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("2908224884"), amount);
  }

  /**
   * Required Passes: "C230,C231" Element Tested: CM Intra Bucket Correlation (Bkt 4) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC271() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_7, S_CM_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC271", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 4)", "S_CM_7,S_CM_8", "C230,C231", "Total", " 79,003,392 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("79003392"), amount);
  }

  /**
   * Required Passes: "C232,C233" Element Tested: CM Intra Bucket Correlation (Bkt 5) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC272() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_9, S_CM_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC272", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 5)", "S_CM_9,S_CM_10", "C232,C233", "Total", " 109,818,031 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("109818031"), amount);
  }

  /**
   * Required Passes: "C234,C235,C260" Element Tested: CM Intra Bucket Correlation (Bkt 6) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC273() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_11, S_CM_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC273", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 6)", "S_CM_11,S_CM_12", "C234,C235,C260", "Total", " 5,322,785,425 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("5322785425"), amount);
  }

  /**
   * Required Passes: "C237,C238,C261" Element Tested: CM Intra Bucket Correlation (Bkt 8) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC274() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_14, S_CM_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC274", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 8)", "S_CM_14,S_CM_15", "C237,C238,C261", "Total", " 3,004,912,644 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("3004912644"), amount);
  }

  /**
   * Required Passes: "C239,C240" Element Tested: CM Intra Bucket Correlation (Bkt 9) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC275() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_16, S_CM_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC275", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 9)", "S_CM_16,S_CM_17", "C239,C240", "Total", " 108,166,538 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("108166538"), amount);
  }

  /**
   * Required Passes: "C241,C242,C262" Element Tested: CM Intra Bucket Correlation (Bkt 10) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC276() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_18, S_CM_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC276", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 10)", "S_CM_18,S_CM_19", "C241,C242,C262", "Total", " 808,764,787 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("808764787"), amount);
  }

  /**
   * Required Passes: "C243,C244,C263" Element Tested: CM Intra Bucket Correlation (Bkt 11) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC277() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_20, S_CM_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC277", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 11)", "S_CM_20,S_CM_21", "C243,C244,C263", "Total", " 1,856,597,221 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("1856597221"), amount);
  }

  /**
   * Required Passes: "C245,C246,C264" Element Tested: CM Intra Bucket Correlation (Bkt 12) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC278() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_22, S_CM_23);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC278", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 12)", "S_CM_22,S_CM_23", "C245,C246,C264", "Total", " 5,202,993,201 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("5202993201"), amount);
  }

  /**
   * Required Passes: "C247,C248,C265" Element Tested: CM Intra Bucket Correlation (Bkt 13) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC279() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_24, S_CM_25);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC279", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 13)", "S_CM_24,S_CM_25", "C247,C248,C265", "Total", " 95,098,812 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("95098812"), amount);
  }

  /**
   * Required Passes: "C249,C250" Element Tested: CM Intra Bucket Correlation (Bkt 14) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC280() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_26, S_CM_27);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC280", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 14)", "S_CM_26,S_CM_27", "C249,C250", "Total", " 45,398,062 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("45398062"), amount);
  }

  /**
   * Required Passes: "C251,C252" Element Tested: CM Intra Bucket Correlation (Bkt 15) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC281() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_28, S_CM_29);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC281", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 15)", "S_CM_28,S_CM_29", "C251,C252", "Total", " 39,354,796 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("39354796"), amount);
  }

  /**
   * Required Passes: "C253,C254,C266" Element Tested: CM Intra Bucket Correlation (Bkt 16) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC282() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_30, S_CM_31);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC282", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 16)", "S_CM_30,S_CM_31", "C253,C254,C266", "Total", " 401,277,959 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("401277959"), amount);
  }

  /**
   * Required Passes: "C255,C256,C267" Element Tested: CM Intra Bucket Correlation (Bkt 17) Risk Measure: Delta Group:
   * Commodities
   */
  @Test
  public void testC283() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_32, S_CM_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC283", "Commodities", "Delta", "CM Intra Bucket Correlation (Bkt 17)", "S_CM_32,S_CM_33", "C255,C256,C267", "Total", " 6,640,200,000 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("6640200000"), amount);
  }

  /**
   * Required Passes: "C237,C241,C261,C262" Element Tested: CM Intra Bucket Correlation (exceeds concentration
   * threshold) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC284() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_18, S_CM_18, S_CM_18, S_CM_18, S_CM_18, S_CM_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC284", "Commodities", "Delta", "CM Intra Bucket Correlation (exceeds concentration threshold)",
        "S_CM_18,S_CM_18,S_CM_18,S_CM_18,S_CM_18,S_CM_14", "C237,C241,C261,C262", "Total", " 4,966,608,501 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("4966608501"),
        amount);
  }

  /**
   * Required Passes: "C226,C229,C258" Element Tested: "CM Inter Bucket Correlation (same sign, pos)" Risk Measure:
   * Delta Group: Commodities
   */
  @Test
  public void testC285() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3, S_CM_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC285", "Commodities", "Delta", "CM Inter Bucket Correlation (same sign, pos)", "S_CM_3,S_CM_6", "C226,C229,C258", "Total",
        " 13,657,614,280 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("13657614280"), amount);
  }

  /**
   * Required Passes: "C227,C228,C259" Element Tested: "CM Inter Bucket Correlation (same sign, neg)" Risk Measure:
   * Delta Group: Commodities
   */
  @Test
  public void testC286() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_4, S_CM_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC286", "Commodities", "Delta", "CM Inter Bucket Correlation (same sign, neg)", "S_CM_4,S_CM_5", "C227,C228,C259", "Total",
        " 2,924,555,648 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("2924555648"), amount);
  }

  /**
   * Required Passes: "C226,C228,C258,C259" Element Tested: CM Inter Bucket Correlation (diff signs) Risk Measure: Delta
   * Group: Commodities
   */
  @Test
  public void testC287() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3, S_CM_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC287", "Commodities", "Delta", "CM Inter Bucket Correlation (diff signs)", "S_CM_3,S_CM_5", "C226,C228,C258,C259", "Total",
        " 10,954,230,416 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("10954230416"), amount);
  }

  /**
   * Required Passes: "C226,C228,C254,C258,C259,C287" Element Tested: CM Inter Bucket Correlation (w/residual) Risk
   * Measure: Delta Group: Commodities
   */
  @Test
  public void testC288() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_3, S_CM_5, S_CM_31);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC288", "Commodities", "Delta", "CM Inter Bucket Correlation (w/residual)", "S_CM_3,S_CM_5,S_CM_31", "C226,C228,C254,C258,C259,C287",
        "Total", " 10,954,277,156 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("10954277156"), amount);
  }

  /**
   * Required Passes: "C224,C226,C228,C230,C232,C234,C236,C237,C257-C261,C287" Element Tested: "CM Inter Bucket
   * Correlation (bkts 1-4, 5-8)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC289() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1, S_CM_3, S_CM_5, S_CM_7, S_CM_9, S_CM_11, S_CM_13, S_CM_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC289", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 1-4, 5-8)", "S_CM_1,S_CM_3,S_CM_5,S_CM_7,S_CM_9,S_CM_11,S_CM_13,S_CM_14",
        "C224,C226,C228,C230,C232,C234,C236,C237,C257-C261,C287", "Total", " 13,120,644,693 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("13120644693"), amount);
  }

  /**
   * Required Passes: "C224,C226,C228,C230,C239,C241,C243,C245,C257-C259,C262-C264,C287" Element Tested: "CM Inter
   * Bucket Correlation (bkts 1-4, 9-12)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC290() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1, S_CM_3, S_CM_5, S_CM_7, S_CM_16, S_CM_18, S_CM_20, S_CM_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC290", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 1-4, 9-12)",
        "S_CM_1,S_CM_3,S_CM_5,S_CM_7,S_CM_16,S_CM_18,S_CM_20,S_CM_22", "C224,C226,C228,C230,C239,C241,C243,C245,C257-C259,C262-C264,C287", "Total", " 10,963,142,728 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("10963142728"), amount);
  }

  /**
   * Required Passes: "C224,C226,C228,C230,C247,C249,C251,C253,C255,C257-C259,C265-C267,C287" Element Tested: "CM Inter
   * Bucket Correlation (bkts 1-4, 13-17)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC291() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_1, S_CM_3, S_CM_5, S_CM_7, S_CM_24, S_CM_26, S_CM_28, S_CM_30, S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC291", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 1-4, 13-17)",
        "S_CM_1,S_CM_3,S_CM_5,S_CM_7,S_CM_24,S_CM_26,S_CM_28,S_CM_30,S_CM_32", "C224,C226,C228,C230,C247,C249,C251,C253,C255,C257-C259,C265-C267,C287", "Total", " 16,361,590,052 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("16361590052"), amount);
  }

  /**
   * Required Passes: "C232,C234,C236,C237,C239,C241,C243,C245,C260-C264,C284" Element Tested: "CM Inter Bucket
   * Correlation (bkts 5-8, 9-12)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC292() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_9, S_CM_11, S_CM_13, S_CM_14, S_CM_16, S_CM_18, S_CM_20, S_CM_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC292", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 5-8, 9-12)",
        "S_CM_9,S_CM_11,S_CM_13,S_CM_14,S_CM_16,S_CM_18,S_CM_20,S_CM_22", "C232,C234,C236,C237,C239,C241,C243,C245,C260-C264,C284", "Total", " 6,984,442,901 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("6984442901"), amount);
  }

  /**
   * Required Passes: "C232,C234,C236,C237,C247,C249,C251,C253,C255,C260,C261,C265-C267" Element Tested: "CM Inter
   * Bucket Correlation (bkts 5-8, 13-17)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC293() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_9, S_CM_11, S_CM_13, S_CM_14, S_CM_24, S_CM_26, S_CM_28, S_CM_30, S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC293", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 5-8, 13-17)",
        "S_CM_9,S_CM_11,S_CM_13,S_CM_14,S_CM_24,S_CM_26,S_CM_28,S_CM_30,S_CM_32", "C232,C234,C236,C237,C247,C249,C251,C253,C255,C260,C261,C265-C267", "Total", " 8,724,417,418 ",
        " -   ", " -   ", " -   ", " -   ", new BigDecimal("8724417418"), amount);
  }

  /**
   * Required Passes: "C239,C241,C243,C245,C247,C249,C251,C253,C255,C262-C267" Element Tested: "CM Inter Bucket
   * Correlation (bkts 9-12, 13-17)" Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC294() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CM_16, S_CM_18, S_CM_20, S_CM_22, S_CM_24, S_CM_26, S_CM_28, S_CM_30, S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC294", "Commodities", "Delta", "CM Inter Bucket Correlation (bkts 9-12, 13-17)",
        "S_CM_16,S_CM_18,S_CM_20,S_CM_22,S_CM_24,S_CM_26,S_CM_28,S_CM_30,S_CM_32", "C239,C241,C243,C245,C247,C249,C251,C253,C255,C262-C267", "Total", " 7,581,894,697 ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("7581894697"), amount);
  }

  /**
   * Required Passes:
   * "C224,C226,C228,C230,C232,C234,C236,C237,C239,C241,C243,C245,C247,C249,C251,C253,C255,C257-C267,C284,C287,C289-C294"
   * Element Tested: CM Inter Bucket Correlation (all) Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC295() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities =
        Arrays.asList(S_CM_1, S_CM_3, S_CM_5, S_CM_7, S_CM_9, S_CM_11, S_CM_13, S_CM_14, S_CM_16, S_CM_18, S_CM_20, S_CM_22, S_CM_24, S_CM_26, S_CM_28, S_CM_30, S_CM_32);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC295", "Commodities", "Delta", "CM Inter Bucket Correlation (all)",
        "S_CM_1,S_CM_3,S_CM_5,S_CM_7,S_CM_9,S_CM_11,S_CM_13,S_CM_14,S_CM_16,S_CM_18,S_CM_20,S_CM_22,S_CM_24,S_CM_26,S_CM_28,S_CM_30,S_CM_32",
        "C224,C226,C228,C230,C232,C234,C236,C237,C239,C241,C243,C245,C247,C249,C251,C253,C255,C257-C267,C284,C287,C289-C294", "Total", " 16,739,967,413 ", " -   ", " -   ",
        " -   ", " -   ", new BigDecimal("16739967413"), amount);
  }

  /**
   * Required Passes: C224-C295 Element Tested: All Commodities Risk Measure: Delta Group: Commodities
   */
  @Test
  public void testC296() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CM);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC296", "Commodities", "Delta", "All Commodities", "All S_CM", "C224-C295", "Total", " 16,751,844,655 ", " -   ", " -   ", " -   ", " -   ",
        new BigDecimal("16751844655"), amount);
  }

  /**
   * Required Passes: C1-C296 Element Tested: All Delta Sensitivities (no multiplier) Risk Measure: Delta Group: Global
   */
  @Test
  public void testC297() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_EQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC297", "Global", "Delta", "All Delta Sensitivities (no multiplier)", "All S_IR,S_CRQ,S_CRNQ,S_CM,S_FX,S_EQ", "C1-C296", "Total",
        " 35,133,910,819 ", " -   ", " -   ", " 1,386,542 ", " -   ", new BigDecimal("35134606003"), amount);
  }

  /**
   * Required Passes: C1-C297 Element Tested: All Delta Sensitivities (with multiplier) Risk Measure: Delta Group:
   * Global
   */
  @Test
  public void testC298() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = new ArrayList<ProductMultiplier>();
    multipliers.addAll(S_MUL);

    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_EQ);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC298", "Global", "Delta", "All Delta Sensitivities (with multiplier)", "All S_IR,S_CRQ,S_CRNQ,S_CM,S_FX,S_EQ,S_MUL", "C1-C297", "Total",
        " 35,133,910,819 ", " -   ", " -   ", " 1,386,542 ", " 2,721,422,125 ", new BigDecimal("37856028128"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC299() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC299", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_1", "None", "Total", " -   ", " 32,900,000 ", " 1,141,500 ",
        " -   ", " -   ", new BigDecimal("34041500"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC300() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC300", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_2", "None", "Total", " -   ", " 9,400,000 ", " 489,214 ",
        " -   ", " -   ", new BigDecimal("9889214"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC301() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC301", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_3", "None", "Total", " -   ", " 11,750,000 ", " 815,357 ",
        " -   ", " -   ", new BigDecimal("12565357"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC302() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC302", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_4", "None", "Total", " -   ", " 9,400,000 ", " 978,428 ",
        " -   ", " -   ", new BigDecimal("10378428"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC303() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC303", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_5", "None", "Total", " -   ", " 3,760,000 ", " 782,743 ",
        " -   ", " -   ", new BigDecimal("4542743"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC304() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC304", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_6", "None", "Total", " -   ", " 2,350,000 ", " 815,357 ",
        " -   ", " -   ", new BigDecimal("3165357"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC305() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC305", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_7", "None", "Total", " -   ", " 2,350,000 ", " 1,223,035 ",
        " -   ", " -   ", new BigDecimal("3573035"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC306() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC306", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_8", "None", "Total", " -   ", " 940,000 ", " 978,428 ",
        " -   ", " -   ", new BigDecimal("1918428"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC307() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC307", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_9", "None", "Total", " -   ", " 4,700,000 ", " 9,784,282 ",
        " -   ", " -   ", new BigDecimal("14484282"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC308() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC308", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_10", "None", "Total", " -   ", " 4,700,000 ", " 19,568,565 ",
        " -   ", " -   ", new BigDecimal("24268565"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC309() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC309", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_11", "None", "Total", " -   ", " 4,700,000 ", " 58,705,694 ",
        " -   ", " -   ", new BigDecimal("63405694"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC310() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC310", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_12", "None", "Total", " -   ", " 4,700,000 ", " 127,545,110 ",
        " -   ", " -   ", new BigDecimal("132245110"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC311() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC311", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_13", "None", "Total", " -   ", " 4,700,000 ", " -   ",
        " -   ", " -   ", new BigDecimal("4700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC312() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC312", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_14", "None", "Total", " -   ", " 4,700,000 ", " -   ",
        " -   ", " -   ", new BigDecimal("4700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC313() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC313", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_15", "None", "Total", " -   ", " 4,700,000 ", " -   ",
        " -   ", " -   ", new BigDecimal("4700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC314() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC314", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_16", "None", "Total", " -   ", " 3,760,000 ", " 130,457 ",
        " -   ", " -   ", new BigDecimal("3890457"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC315() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC315", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_17", "None", "Total", " -   ", " 1,880,000 ", " 97,843 ",
        " -   ", " -   ", new BigDecimal("1977843"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC316() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC316", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_18", "None", "Total", " -   ", " 940,000 ", " 48,921 ",
        " -   ", " -   ", new BigDecimal("988921"), amount);
  }

  /**
   * Required Passes: None Element Tested: IRV Risk Weight & Scaling Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC317() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_19);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC317", "Rates & Fx", "Vega & Curvature", "IRV Risk Weight & Scaling", "S_IRV_19", "None", "Total", " -   ", " 470,000 ", " 48,921 ",
        " -   ", " -   ", new BigDecimal("518921"), amount);
  }

  /**
   * Required Passes: C299 Element Tested: "Concentration (reg vol, well traded)" Risk Measure: Vega & Curvature Group:
   * Rates & Fx
   */
  @Test
  public void testC318() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1, S_IRV_1, S_IRV_1, S_IRV_1, S_IRV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC318", "Rates & Fx", "Vega & Curvature", "Concentration (reg vol, well traded)", "S_IRV_1,S_IRV_1,S_IRV_1,S_IRV_1,S_IRV_1", "C299",
        "Total", " -   ", " 164,500,000 ", " 5,707,498 ", " -   ", " -   ", new BigDecimal("170207498"), amount);
  }

  /**
   * Required Passes: C301 Element Tested: "Concentration (reg vol, less traded)" Risk Measure: Vega & Curvature Group:
   * Rates & Fx
   */
  @Test
  public void testC319() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_3, S_IRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC319", "Rates & Fx", "Vega & Curvature", "Concentration (reg vol, less traded)", "S_IRV_3,S_IRV_3", "C301", "Total", " -   ",
        " 23,500,000 ", " 1,630,714 ", " -   ", " -   ", new BigDecimal("25130714"), amount);
  }

  /**
   * Required Passes: "C301,C316,C319" Element Tested: "Concentration (reg vol, w/inf" Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC320() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_3, S_IRV_3, S_IRV_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC320", "Rates & Fx", "Vega & Curvature", "Concentration (reg vol, w/inf", "S_IRV_3,S_IRV_3,S_IRV_18", "C301,C316,C319", "Total", " -   ",
        " 23,863,784 ", " 1,644,384 ", " -   ", " -   ", new BigDecimal("25508168"), amount);
  }

  /**
   * Required Passes: C300 Element Tested: Concentration (low vol) Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC321() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_2, S_IRV_2, S_IRV_2, S_IRV_2, S_IRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC321", "Rates & Fx", "Vega & Curvature", "Concentration (low vol)", "S_IRV_2,S_IRV_2,S_IRV_2,S_IRV_2,S_IRV_2", "C300", "Total", " -   ",
        " 47,000,000 ", " 2,446,071 ", " -   ", " -   ", new BigDecimal("49446071"), amount);
  }

  /**
   * Required Passes: "C300,C315,C321" Element Tested: "Concentration (low vol, w/inf)" Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC322() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_2, S_IRV_2, S_IRV_2, S_IRV_2, S_IRV_2, S_IRV_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC322", "Rates & Fx", "Vega & Curvature", "Concentration (low vol, w/inf)", "S_IRV_2,S_IRV_2,S_IRV_2,S_IRV_2,S_IRV_2,S_IRV_17",
        "C300,C315,C321", "Total", " -   ", " 47,727,569 ", " 2,473,814 ", " -   ", " -   ", new BigDecimal("50201383"), amount);
  }

  /**
   * Required Passes: C303 Element Tested: Concentration (high vol) Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC323() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_5, S_IRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC323", "Rates & Fx", "Vega & Curvature", "Concentration (high vol)", "S_IRV_5,S_IRV_5", "C303", "Total", " -   ", " 7,520,000 ",
        " 1,565,485 ", " -   ", " -   ", new BigDecimal("9085485"), amount);
  }

  /**
   * Required Passes: "C303,C323" Element Tested: "Concentration (high vol, w/inf)" Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC324() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_5, S_IRV_5, S_IRV_20);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC324", "Rates & Fx", "Vega & Curvature", "Concentration (high vol, w/inf)", "S_IRV_5,S_IRV_5,S_IRV_20", "C303,C323", "Total", " -   ",
        " 7,706,280 ", " 1,594,132 ", " -   ", " -   ", new BigDecimal("9300412"), amount);
  }

  /**
   * Required Passes: "C299,C307,C318" Element Tested: Intra-currency Correlation (Same Sign - Pos) Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC325() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1, S_IRV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC325", "Rates & Fx", "Vega & Curvature", "Intra-currency Correlation (Same Sign - Pos)", "S_IRV_1,S_IRV_9", "C299,C307,C318", "Total",
        " -   ", " 34,735,512 ", " 10,116,901 ", " -   ", " -   ", new BigDecimal("44852413"), amount);
  }

  /**
   * Required Passes: "C311,C312" Element Tested: Intra-currency Correlation (Same Sign - Neg) Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC326() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_13, S_IRV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC326", "Rates & Fx", "Vega & Curvature", "Intra-currency Correlation (Same Sign - Neg)", "S_IRV_13,S_IRV_14", "C311,C312", "Total",
        " -   ", " 8,589,563 ", " -   ", " -   ", " -   ", new BigDecimal("8589563"), amount);
  }

  /**
   * Required Passes: "C311,C312" Element Tested: "Intra-currency Correlation (Same Sign - Neg, mid theta)" Risk
   * Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC327() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_6, S_IRV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC327", "Rates & Fx", "Vega & Curvature", "Intra-currency Correlation (Same Sign - Neg, mid theta)", "S_IRV_6,S_IRV_14", "C311,C312",
        "Total", " -   ", " 2,574,296 ", " 627,168 ", " -   ", " -   ", new BigDecimal("3201464"), amount);
  }

  /**
   * Required Passes: "C300,C313,C321" Element Tested: Intra-currency Correlation (Opposite sign) Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC328() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_2, S_IRV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC328", "Rates & Fx", "Vega & Curvature", "Intra-currency Correlation (Opposite sign)", "S_IRV_2,S_IRV_15", "C300,C313,C321", "Total",
        " -   ", " 4,884,383 ", " 192,789 ", " -   ", " -   ", new BigDecimal("5077172"), amount);
  }

  /**
   * Required Passes: "C300,C313,C315,C321,C322,C328" Element Tested: "Intra-currency Correlation (Opposite sign,
   * w/Inflation)" Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC329() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_2, S_IRV_15, S_IRV_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC329", "Rates & Fx", "Vega & Curvature", "Intra-currency Correlation (Opposite sign, w/Inflation)", "S_IRV_2,S_IRV_15,S_IRV_17",
        "C300,C313,C315,C321,C322,C328", "Total", " -   ", " 5,824,967 ", " 235,159 ", " -   ", " -   ", new BigDecimal("6060125"), amount);
  }

  /**
   * Required Passes: "C300,C313,C315,C321,C322,C328,C329" Element Tested: IRV Inflation Vol Aggregate same-currency
   * (Opposite sign) Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC330() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_16, S_IRV_21);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC330", "Rates & Fx", "Vega & Curvature", "IRV Inflation Vol Aggregate same-currency (Opposite sign)", "S_IRV_16,S_IRV_21",
        "C300,C313,C315,C321,C322,C328,C329", "Total", " -   ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("0"), amount);
  }

  /**
   * Required Passes: "C300,C313,C315,C321,C322,C328,C329" Element Tested: "IRV Inflation Vol Aggregate same-currency
   * (Opposite sign, zero theta)" Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC331() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_19, S_IRV_22);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC331", "Rates & Fx", "Vega & Curvature", "IRV Inflation Vol Aggregate same-currency (Opposite sign, zero theta)", "S_IRV_19,S_IRV_22",
        "C300,C313,C315,C321,C322,C328,C329", "Total", " -   ", " -   ", " 32,614 ", " -   ", " -   ", new BigDecimal("32614"), amount);
  }

  /**
   * Required Passes: "C299,C300,C318,C321" Element Tested: Inter-currency Correlation Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC332() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1, S_IRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC332", "Rates & Fx", "Vega & Curvature", "Inter-currency Correlation", "S_IRV_1,S_IRV_2", "C299,C300,C318,C321", "Total", " -   ",
        " 36,320,997 ", " 1,322,286 ", " -   ", " -   ", new BigDecimal("37643282"), amount);
  }

  /**
   * Required Passes: "C299,C303,C318,C323" Element Tested: Inter-currency Correlation (exceeds concentration threshold)
   * Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC333() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1, S_IRV_5, S_IRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC333", "Rates & Fx", "Vega & Curvature", "Inter-currency Correlation (exceeds concentration threshold)", "S_IRV_1,S_IRV_5,S_IRV_5",
        "C299,C303,C318,C323", "Total", " -   ", " 35,464,295 ", " 2,097,962 ", " -   ", " -   ", new BigDecimal("37562257"), amount);
  }

  /**
   * Required Passes: "C299-C301,C318,C319,C321,C332" Element Tested: Inter-currency Correlation (3 ccys) Risk Measure:
   * Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC334() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IRV_1, S_IRV_2, S_IRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC334", "Rates & Fx", "Vega & Curvature", "Inter-currency Correlation (3 ccys)", "S_IRV_1,S_IRV_2,S_IRV_3", "C299-C301,C318,C319,C321,C332",
        "Total", " -   ", " 41,180,691 ", " 1,691,112 ", " -   ", " -   ", new BigDecimal("42871803"), amount);
  }

  /**
   * Required Passes: C299-C334 Element Tested: All Interest Rate Vol Sensitivities Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC335() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IRV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC335", "Rates & Fx", "Vega & Curvature", "All Interest Rate Vol Sensitivities", "All S_IRV", "C299-C334", "Total", " -   ", " 50,181,379 ",
        " 167,798,637 ", " -   ", " -   ", new BigDecimal("217980016"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC336() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC336", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_1", "None", "Total", " -   ", " 20,149,338 ",
        " 15,261,275 ", " -   ", " -   ", new BigDecimal("35410613"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC337() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC337", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_2", "None", "Total", " -   ", " 83,955,574 ",
        " 15,897,162 ", " -   ", " -   ", new BigDecimal("99852736"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (HR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC338() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC338", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (HR) & Scaling", "S_FXV_3", "None", "Total", " -   ", " 119,403,483 ",
        " 11,304,648 ", " -   ", " -   ", new BigDecimal("130708131"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC339() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC339", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_4", "None", "Total", " -   ", " 16,791,115 ", " -   ",
        " -   ", " -   ", new BigDecimal("16791115"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC340() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC340", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_5", "None", "Total", " -   ", " 12,593,336 ", " -   ",
        " -   ", " -   ", new BigDecimal("12593336"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC341() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC341", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_6", "None", "Total", " -   ", " 10,074,669 ",
        " 635,886 ", " -   ", " -   ", new BigDecimal("10710555"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RR) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC342() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC342", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RR) & Scaling", "S_FXV_7", "None", "Total", " -   ", " 19,029,930 ", " -   ",
        " -   ", " -   ", new BigDecimal("19029930"), amount);
  }

  /**
   * Required Passes: None Element Tested: FXV Risk Weight (RH) & Scaling Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC343() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC343", "Rates & Fx", "Vega & Curvature", "FXV Risk Weight (RH) & Scaling", "S_FXV_8", "None", "Total", " -   ", " 44,776,306 ",
        " 847,849 ", " -   ", " -   ", new BigDecimal("45624155"), amount);
  }

  /**
   * Required Passes: C336 Element Tested: FXV Concentration (sig:sig) Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC344() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1,
        S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1, S_FXV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC344", "Rates & Fx", "Vega & Curvature", "FXV Concentration (sig:sig)",
        "S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1,S_FXV_1", "C336",
        "Total", " -   ", " 402,986,754 ", " 305,225,508 ", " -   ", " -   ", new BigDecimal("708212262"), amount);
  }

  /**
   * Required Passes: C338 Element Tested: FXV Concentration (freq:sig) Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC345() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3,
        S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3, S_FXV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC345", "Rates & Fx", "Vega & Curvature", "FXV Concentration (freq:sig)",
        "S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3,S_FXV_3", "C338",
        "Total", " -   ", " 2,388,069,656 ", " 226,092,969 ", " -   ", " -   ", new BigDecimal("2614162625"), amount);
  }

  /**
   * Required Passes: C339 Element Tested: FXV Concentration (sig:other) Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC346() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4, S_FXV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC346", "Rates & Fx", "Vega & Curvature", "FXV Concentration (sig:other)",
        "S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4,S_FXV_4", "C339", "Total", " -   ", " 167,911,148 ", " -   ", " -   ", " -   ",
        new BigDecimal("167911148"), amount);
  }

  /**
   * Required Passes: C340 Element Tested: FXV Concentration (freq:freq) Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC347() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC347", "Rates & Fx", "Vega & Curvature", "FXV Concentration (freq:freq)",
        "S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5", "C340", "Total", " -   ", " 125,933,361 ", " -   ", " -   ", " -   ",
        new BigDecimal("125933361"), amount);
  }

  /**
   * Required Passes: C341 Element Tested: FXV Concentration (freq:other) Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC348() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6, S_FXV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC348", "Rates & Fx", "Vega & Curvature", "FXV Concentration (freq:other)",
        "S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6,S_FXV_6", "C341", "Total", " -   ", " 100,746,689 ", " 6,358,865 ", " -   ", " -   ",
        new BigDecimal("107105553"), amount);
  }

  /**
   * Required Passes: C342 Element Tested: FXV Concentration (other:other) Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC349() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7, S_FXV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC349", "Rates & Fx", "Vega & Curvature", "FXV Concentration (other:other)",
        "S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7,S_FXV_7", "C342", "Total", " -   ", " 190,299,301 ", " -   ", " -   ", " -   ",
        new BigDecimal("190299301"), amount);
  }

  /**
   * Required Passes: "C336,C337,C344" Element Tested: FXV Aggregate (swapped currencies) Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC350() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC350", "Rates & Fx", "Vega & Curvature", "FXV Aggregate (swapped currencies)", "S_FXV_1,S_FXV_2", "C336,C337,C344", "Total", " -   ",
        " 104,104,912 ", " 31,158,437 ", " -   ", " -   ", new BigDecimal("135263349"), amount);
  }

  /**
   * Required Passes: "C336,C350" Element Tested: "FXV Aggregate (diff ccys, opposite sign)" Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC351() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC351", "Rates & Fx", "Vega & Curvature", "FXV Aggregate (diff ccys,  opposite sign)", "S_FXV_1,S_FXV_9", "C336,C350", "Total", " -   ",
        " 29,276,309 ", " 14,075,871 ", " -   ", " -   ", new BigDecimal("43352180"), amount);
  }

  /**
   * Required Passes: "C336,C350" Element Tested: "FXV Aggregate (same ccy, diff tenor)" Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC352() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_4, S_FXV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC352", "Rates & Fx", "Vega & Curvature", "FXV Aggregate (same ccy, diff tenor)", "S_FXV_4,S_FXV_9", "C336,C350", "Total", " -   ",
        " 50,373,344 ", " -   ", " -   ", " -   ", new BigDecimal("50373344"), amount);
  }

  /**
   * Required Passes: "C336,C350" Element Tested: "FXV Aggregate (same ccy, diff tenor)" Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC353() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC353", "Rates & Fx", "Vega & Curvature", "FXV Aggregate (same ccy, diff tenor)", "S_FXV_1,S_FXV_10", "C336,C350", "Total", " -   ",
        " -   ", " 11,445,957 ", " -   ", " -   ", new BigDecimal("11445957"), amount);
  }

  /**
   * Required Passes: "C336,C338,C344,C345" Element Tested: "FXV Correlation (same sign, pos)" Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC354() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC354", "Rates & Fx", "Vega & Curvature", "FXV Correlation (same sign, pos)", "S_FXV_1,S_FXV_3", "C336,C338,C344,C345", "Total", " -   ",
        " 130,648,722 ", " 21,959,065 ", " -   ", " -   ", new BigDecimal("152607787"), amount);
  }

  /**
   * Required Passes: "C339,C340,C346,C347" Element Tested: "FXV Correlation (same sign, neg)" Risk Measure: Vega &
   * Curvature Group: Rates & Fx
   */
  @Test
  public void testC355() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_4, S_FXV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC355", "Rates & Fx", "Vega & Curvature", "FXV Correlation (same sign, neg)", "S_FXV_4,S_FXV_5", "C339,C340,C346,C347", "Total", " -   ",
        " 25,534,091 ", " -   ", " -   ", " -   ", new BigDecimal("25534091"), amount);
  }

  /**
   * Required Passes: "C338,C339,C345,C346" Element Tested: FXV Correlation (diff sign) Risk Measure: Vega & Curvature
   * Group: Rates & Fx
   */
  @Test
  public void testC356() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_3, S_FXV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC356", "Rates & Fx", "Vega & Curvature", "FXV Correlation (diff sign)", "S_FXV_3,S_FXV_4", "C338,C339,C345,C346", "Total", " -   ",
        " 111,956,311 ", " 13,338,131 ", " -   ", " -   ", new BigDecimal("125294442"), amount);
  }

  /**
   * Required Passes: "C338,C340,C345,C347" Element Tested: FXV Correlation (exceeds concentration threshold) Risk
   * Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC357() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_3, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5, S_FXV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC357", "Rates & Fx", "Vega & Curvature", "FXV Correlation (exceeds concentration threshold)",
        "S_FXV_3,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5,S_FXV_5", "C338,C340,C345,C347", "Total", " -   ", " 122,798,702 ", " 13,839,504 ",
        " -   ", " -   ", new BigDecimal("136638205"), amount);
  }

  /**
   * Required Passes: "C338,C340,C345,C347" Element Tested: "FXV Correlation (same ccy, diff tenor, diff sign, mid
   * theta)" Risk Measure: Vega & Curvature Group: Rates & Fx
   */
  @Test
  public void testC358() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_FXV_1, S_FXV_10, S_FXV_10, S_FXV_10, S_FXV_10, S_FXV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC358", "Rates & Fx", "Vega & Curvature", "FXV Correlation (same ccy, diff tenor, diff sign, mid theta)",
        "S_FXV_1,S_FXV_10,S_FXV_10,S_FXV_10,S_FXV_10,S_FXV_10", "C338,C340,C345,C347", "Total", " -   ", " 80,597,351 ", " -   ", " -   ", " -   ", new BigDecimal("80597351"),
        amount);
  }

  /**
   * Required Passes: C336-C358 Element Tested: All FX Vol Sensitivities Risk Measure: Vega & Curvature Group: Rates &
   * Fx
   */
  @Test
  public void testC359() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_FXV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC359", "Rates & Fx", "Vega & Curvature", "All FX Vol Sensitivities", "All S_FXV", "C336-C358", "Total", " -   ", " 169,589,977 ",
        " 34,637,131 ", " -   ", " -   ", new BigDecimal("204227108"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC360() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC360", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_1", "None", "Total", " -   ", " 10,200,000 ", " 1,526,935 ", " -   ",
        " -   ", new BigDecimal("11726935"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC361() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC361", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_2", "None", "Total", " -   ", " 5,100,000 ", " 763,468 ", " -   ", " -   ",
        new BigDecimal("5863468"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC362() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC362", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_3", "None", "Total", " -   ", " 2,550,000 ", " 127,245 ", " -   ", " -   ",
        new BigDecimal("2677245"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC363() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC363", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_4", "None", "Total", " -   ", " 17,000,000 ", " 2,544,892 ", " -   ",
        " -   ", new BigDecimal("19544892"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC364() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC364", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_5", "None", "Total", " -   ", " 3,400,000 ", " -   ", " -   ", " -   ",
        new BigDecimal("3400000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC365() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC365", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_6", "None", "Total", " -   ", " 850,000 ", " 127,245 ", " -   ", " -   ",
        new BigDecimal("977245"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC366() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC366", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_7", "None", "Total", " -   ", " 2,550,000 ", " 76,347 ", " -   ", " -   ",
        new BigDecimal("2626347"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRV Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC367() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC367", "Credit", "Vega & Curvature", "CRV  Risk Weight", "S_CRV_8", "None", "Total", " -   ", " 13,600,000 ", " -   ", " -   ", " -   ",
        new BigDecimal("13600000"), amount);
  }

  /**
   * Required Passes: C360 Element Tested: "CRV Aggregate (same tenor, diff bucket, opposite sign)" Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC368() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC368", "Credit", "Vega & Curvature", "CRV Aggregate (same tenor, diff bucket, opposite sign)", "S_CRV_1,S_CRV_9", "C360", "Total", " -   ",
        " 16,376,569 ", " 1,730,839 ", " -   ", " -   ", new BigDecimal("18107408"), amount);
  }

  /**
   * Required Passes: C360 Element Tested: CRV Aggregate (diff sign) Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC369() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC369", "Credit", "Vega & Curvature", "CRV Aggregate (diff sign)", "S_CRV_1,S_CRV_10", "C360", "Total", " -   ", " 3,816,491 ",
        " 1,101,517 ", " -   ", " -   ", new BigDecimal("4918008"), amount);
  }

  /**
   * Required Passes: "C360,C361" Element Tested: "CRV Concentration (same tenor, diff quanto, same sign)" Risk Measure:
   * Vega & Curvature Group: Credit
   */
  @Test
  public void testC370() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_2, S_CRV_1, S_CRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC370", "Credit", "Vega & Curvature", "CRV Concentration (same tenor, diff quanto, same sign)", "S_CRV_1,S_CRV_2,S_CRV_1,S_CRV_2",
        "C360,C361", "Total", " -   ", " 30,120,239 ", " 4,462,199 ", " -   ", " -   ", new BigDecimal("34582438"), amount);
  }

  /**
   * Required Passes: "C363,C364" Element Tested: "CRV Concentration (diff tenor, same quanto, diff sign)" Risk Measure:
   * Vega & Curvature Group: Credit
   */
  @Test
  public void testC371() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_4, S_CRV_5, S_CRV_4, S_CRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC371", "Credit", "Vega & Curvature", "CRV Concentration (diff tenor, same quanto, diff sign)", "S_CRV_4,S_CRV_5,S_CRV_4,S_CRV_5",
        "C363,C364", "Total", " -   ", " 27,788,631 ", " 4,645,161 ", " -   ", " -   ", new BigDecimal("32433792"), amount);
  }

  /**
   * Required Passes: C367 Element Tested: CRV Concentration (residual) Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC372() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_8, S_CRV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC372", "Credit", "Vega & Curvature", "CRV Concentration (residual)", "S_CRV_8,S_CRV_8", "C367", "Total", " -   ", " 27,200,000 ", " -   ",
        " -   ", " -   ", new BigDecimal("27200000"), amount);
  }

  /**
   * Required Passes: "C360,C361,C370" Element Tested: "CRV Intra-bucket Correlation (same tenor, diff quanto, same
   * sign)" Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC373() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC373", "Credit", "Vega & Curvature", "CRV Intra-bucket Correlation (same tenor, diff quanto, same sign)", "S_CRV_1,S_CRV_2",
        "C360,C361,C370", "Total", " -   ", " 15,060,120 ", " 2,231,100 ", " -   ", " -   ", new BigDecimal("17291219"), amount);
  }

  /**
   * Required Passes: "C360,C362" Element Tested: CRV Intra-bucket Correlation (diff name) Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC374() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC374", "Credit", "Vega & Curvature", "CRV Intra-bucket Correlation (diff name)", "S_CRV_1,S_CRV_3", "C360,C362", "Total", " -   ",
        " 11,506,124 ", " 1,569,469 ", " -   ", " -   ", new BigDecimal("13075593"), amount);
  }

  /**
   * Required Passes: "C365,C367,C372" Element Tested: "CRV Intra-bucket Correlation (residual, same name)" Risk
   * Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC375() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_6, S_CRV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC375", "Credit", "Vega & Curvature", "CRV Intra-bucket Correlation (residual, same name)", "S_CRV_6,S_CRV_8", "C365,C367,C372", "Total",
        " -   ", " 13,195,548 ", " 133,948 ", " -   ", " -   ", new BigDecimal("13329497"), amount);
  }

  /**
   * Required Passes: "C365,C366" Element Tested: "CRV Intra-bucket Correlation (residual, diff name)" Risk Measure:
   * Vega & Curvature Group: Credit
   */
  @Test
  public void testC376() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_6, S_CRV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC376", "Credit", "Vega & Curvature", "CRV Intra-bucket Correlation (residual, diff name)", "S_CRV_6,S_CRV_7", "C365,C366", "Total",
        " -   ", " 3,064,719 ", " 169,919 ", " -   ", " -   ", new BigDecimal("3234637"), amount);
  }

  /**
   * Required Passes: "C360,C362,C374" Element Tested: CRV Intra-bucket Correlation (exceeds concentration threshold)
   * Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC377() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_1, S_CRV_1, S_CRV_1, S_CRV_1, S_CRV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC377", "Credit", "Vega & Curvature", "CRV Intra-bucket Correlation (exceeds concentration threshold)",
        "S_CRV_1,S_CRV_1,S_CRV_1,S_CRV_1,S_CRV_1,S_CRV_3", "C360,C362,C374", "Total", " -   ", " 52,122,399 ", " 7,673,786 ", " -   ", " -   ", new BigDecimal("59796186"), amount);
  }

  /**
   * Required Passes: "C360,C363" Element Tested: CRV Inter-bucket (same sign) Risk Measure: Vega & Curvature Group:
   * Credit
   */
  @Test
  public void testC378() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC378", "Credit", "Vega & Curvature", "CRV Inter-bucket (same sign)", "S_CRV_1,S_CRV_4", "C360,C363", "Total", " -   ", " 22,757,153 ",
        " 3,274,436 ", " -   ", " -   ", new BigDecimal("26031588"), amount);
  }

  /**
   * Required Passes: "C360,C364" Element Tested: CRV Inter-bucket (diff sign) Risk Measure: Vega & Curvature Group:
   * Credit
   */
  @Test
  public void testC379() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC379", "Credit", "Vega & Curvature", "CRV Inter-bucket (diff sign)", "S_CRV_1,S_CRV_5", "C360,C364", "Total", " -   ", " 9,520,000 ",
        " 1,478,540 ", " -   ", " -   ", new BigDecimal("10998540"), amount);
  }

  /**
   * Required Passes: "C360,C364,C365,C379" Element Tested: CRV Inter-bucket (w/residual) Risk Measure: Vega & Curvature
   * Group: Credit
   */
  @Test
  public void testC380() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CRV_1, S_CRV_5, S_CRV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC380", "Credit", "Vega & Curvature", "CRV Inter-bucket (w/residual)", "S_CRV_1,S_CRV_5,S_CRV_6", "C360,C364,C365,C379", "Total", " -   ",
        " 10,370,000 ", " 1,605,785 ", " -   ", " -   ", new BigDecimal("11975785"), amount);
  }

  /**
   * Required Passes: C360-C380 Element Tested: All Credit Qualifying Vol Sensitivities Risk Measure: Vega & Curvature
   * Group: Credit
   */
  @Test
  public void testC381() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CRV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC381", "Credit", "Vega & Curvature", "All Credit Qualifying Vol Sensitivities", "All S_CRV", "C360-C380", "Total", " -   ", " 19,305,869 ",
        " 1,957,438 ", " -   ", " -   ", new BigDecimal("21263307"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC382() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC382", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_1", "None", "Total", " -   ", " 6,800,000 ", " 1,017,957 ", " -   ",
        " -   ", new BigDecimal("7817957"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC383() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC383", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_2", "None", "Total", " -   ", " 2,550,000 ", " 381,734 ", " -   ",
        " -   ", new BigDecimal("2931734"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC384() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC384", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_3", "None", "Total", " -   ", " 1,700,000 ", " -   ", " -   ",
        " -   ", new BigDecimal("1700000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC385() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC385", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_4", "None", "Total", " -   ", " 7,225,000 ", " -   ", " -   ",
        " -   ", new BigDecimal("7225000"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC386() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC386", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_5", "None", "Total", " -   ", " 1,700,000 ", " 50,898 ", " -   ",
        " -   ", new BigDecimal("1750898"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC387() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC387", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_6", "None", "Total", " -   ", " 7,225,000 ", " 1,081,579 ", " -   ",
        " -   ", new BigDecimal("8306579"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC388() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC388", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_7", "None", "Total", " -   ", " 850,000 ", " 25,449 ", " -   ",
        " -   ", new BigDecimal("875449"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC389() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC389", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_8", "None", "Total", " -   ", " 5,525,000 ", " 82,709 ", " -   ",
        " -   ", new BigDecimal("5607709"), amount);
  }

  /**
   * Required Passes: None Element Tested: CRNQ Vol Risk Weight Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC390() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC390", "Credit", "Vega & Curvature", "CRNQ Vol  Risk Weight", "S_CNV_9", "None", "Total", " -   ", " 1,275,000 ", " 190,867 ", " -   ",
        " -   ", new BigDecimal("1465867"), amount);
  }

  /**
   * Required Passes: C382 Element Tested: CNV Concentration (same tenor) Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC391() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_1, S_CNV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC391", "Credit", "Vega & Curvature", "CNV Concentration (same tenor)", "S_CNV_1,S_CNV_1", "C382", "Total", " -   ", " 13,600,000 ",
        " 2,035,913 ", " -   ", " -   ", new BigDecimal("15635913"), amount);
  }

  /**
   * Required Passes: "C385,C386" Element Tested: CNV Concentration (diff tenor) Risk Measure: Vega & Curvature Group:
   * Credit
   */
  @Test
  public void testC392() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_4, S_CNV_4, S_CNV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC392", "Credit", "Vega & Curvature", "CNV Concentration (diff tenor)", "S_CNV_4,S_CNV_4,S_CNV_5", "C385,C386", "Total", " -   ",
        " 14,086,426 ", " 73,628 ", " -   ", " -   ", new BigDecimal("14160054"), amount);
  }

  /**
   * Required Passes: "C387,C389" Element Tested: "CNV Concentration (residual, diff tenor)" Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC393() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_6, S_CNV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC393", "Credit", "Vega & Curvature", "CNV Concentration (residual,  diff tenor)", "S_CNV_6,S_CNV_8", "C387,C389", "Total", " -   ",
        " 11,074,492 ", " 1,114,073 ", " -   ", " -   ", new BigDecimal("12188565"), amount);
  }

  /**
   * Required Passes: "C383,C384" Element Tested: CNV Intra-bucket Correlation (same name) Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC394() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_2, S_CNV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC394", "Credit", "Vega & Curvature", "CNV Intra-bucket Correlation (same name)", "S_CNV_2,S_CNV_3", "C383,C384", "Total", " -   ",
        " 1,510,993 ", " 302,304 ", " -   ", " -   ", new BigDecimal("1813297"), amount);
  }

  /**
   * Required Passes: "C382,C383,C391" Element Tested: CNV Intra-bucket Correlation (diff name) Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC395() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_1, S_CNV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC395", "Credit", "Vega & Curvature", "CNV Intra-bucket Correlation (diff name)", "S_CNV_1,S_CNV_2", "C382,C383,C391", "Total", " -   ",
        " 9,010,000 ", " 1,319,761 ", " -   ", " -   ", new BigDecimal("10329761"), amount);
  }

  /**
   * Required Passes: "C388,C390" Element Tested: CNV Intra-bucket Correlation (residual) Risk Measure: Vega & Curvature
   * Group: Credit
   */
  @Test
  public void testC396() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_7, S_CNV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC396", "Credit", "Vega & Curvature", "CNV Intra-bucket Correlation (residual)", "S_CNV_7,S_CNV_9", "C388,C390", "Total", " -   ",
        " 1,852,532 ", " 201,408 ", " -   ", " -   ", new BigDecimal("2053940"), amount);
  }

  /**
   * Required Passes: "C382-C384,C391,C394,C395" Element Tested: CNV Intra-bucket Correlation (exceeds concentration
   * threshold) Risk Measure: Vega & Curvature Group: Credit
   */
  @Test
  public void testC397() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_1, S_CNV_1, S_CNV_2, S_CNV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC397", "Credit", "Vega & Curvature", "CNV Intra-bucket Correlation (exceeds concentration threshold)", "S_CNV_1,S_CNV_1,S_CNV_2,S_CNV_3",
        "C382-C384,C391,C394,C395", "Total", " -   ", " 14,359,718 ", " 2,232,503 ", " -   ", " -   ", new BigDecimal("16592221"), amount);
  }

  /**
   * Required Passes: "C382,C386,C391" Element Tested: CNV Inter-bucket Correlation (same sign) Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC398() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_1, S_CNV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC398", "Credit", "Vega & Curvature", "CNV Inter-bucket Correlation (same sign)", "S_CNV_1,S_CNV_5", "C382,C386,C391", "Total", " -   ",
        " 7,640,550 ", " 1,033,588 ", " -   ", " -   ", new BigDecimal("8674138"), amount);
  }

  /**
   * Required Passes: "C383,C385" Element Tested: CNV Inter-bucket Correlation (diff sign) Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC399() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_2, S_CNV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC399", "Credit", "Vega & Curvature", "CNV Inter-bucket Correlation (diff sign)", "S_CNV_2,S_CNV_4", "C383,C385", "Total", " -   ",
        " 6,630,545 ", " 411,965 ", " -   ", " -   ", new BigDecimal("7042510"), amount);
  }

  /**
   * Required Passes: "C383,C384,C387,C394" Element Tested: CNV Inter-bucket Correlation (w/residual) Risk Measure: Vega
   * & Curvature Group: Credit
   */
  @Test
  public void testC400() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CNV_2, S_CNV_3, S_CNV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC400", "Credit", "Vega & Curvature", "CNV Inter-bucket Correlation (w/residual)", "S_CNV_2,S_CNV_3,S_CNV_6", "C383,C384,C387,C394",
        "Total", " -   ", " 8,735,993 ", " 1,383,883 ", " -   ", " -   ", new BigDecimal("10119876"), amount);
  }

  /**
   * Required Passes: C382-C400 Element Tested: All Credit Non Qualifying Vol Sensitivities Risk Measure: Vega &
   * Curvature Group: Credit
   */
  @Test
  public void testC401() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CNV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC401", "Credit", "Vega & Curvature", "All Credit Non Qualifying Vol Sensitivities", "All S_CNV", "C382-C400", "Total", " -   ",
        " 20,908,361 ", " 2,390,197 ", " -   ", " -   ", new BigDecimal("23298558"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC402() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC402", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_1", "None", "Total", " -   ", " 3,889,992 ", " 11,827,488 ", " -   ",
        " -   ", new BigDecimal("15717480"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC403() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC403", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_2", "None", "Total", " -   ", " 3,241,660 ", " 3,285,413 ", " -   ",
        " -   ", new BigDecimal("6527073"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC404() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC404", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_3", "None", "Total", " -   ", " 9,724,979 ", " -   ", " -   ", " -   ",
        new BigDecimal("9724979"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC405() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC405", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_4", "None", "Total", " -   ", " 6,762,172 ", " -   ", " -   ", " -   ",
        new BigDecimal("6762172"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC406() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC406", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_5", "None", "Total", " -   ", " 3,381,086 ", " -   ", " -   ", " -   ",
        new BigDecimal("3381086"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC407() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC407", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_6", "None", "Total", " -   ", " 40,259,321 ", " 3,400,226 ", " -   ",
        " -   ", new BigDecimal("43659548"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC408() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC408", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_7", "None", "Total", " -   ", " 1,394,262 ", " -   ", " -   ", " -   ",
        new BigDecimal("1394262"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC409() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC409", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_8", "None", "Total", " -   ", " 6,971,311 ", " 176,635 ", " -   ", " -   ",
        new BigDecimal("7147946"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC410() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC410", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_9", "None", "Total", " -   ", " 61,696,103 ", " 1,042,147 ", " -   ",
        " -   ", new BigDecimal("62738250"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC411() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC411", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_10", "None", "Total", " -   ", " 20,565,368 ", " -   ", " -   ", " -   ",
        new BigDecimal("20565368"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC412() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC412", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_11", "None", "Total", " -   ", " 276,416,231 ", " -   ", " -   ", " -   ",
        new BigDecimal("276416231"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC413() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC413", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_12", "None", "Total", " -   ", " 1,394,262 ", " 35,327 ", " -   ", " -   ",
        new BigDecimal("1429589"), amount);
  }

  /**
   * Required Passes: None Element Tested: EQV Risk Weight Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC414() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC414", "Equity", "Vega & Curvature", "EQV Risk Weight", "S_EQV_13", "None", "Total", " -   ", " 1,742,828 ", " -   ", " -   ", " -   ",
        new BigDecimal("1742828"), amount);
  }

  /**
   * Required Passes: C402 Element Tested: EQV Concentration (bkts 1-4) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC415() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1,
        S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1, S_EQV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC415", "Equity", "Vega & Curvature", "EQV Concentration (bkts 1-4)",
        "S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1,S_EQV_1", "C402",
        "Total", " -   ", " 77,799,831 ", " 236,549,768 ", " -   ", " -   ", new BigDecimal("314349600"), amount);
  }

  /**
   * Required Passes: C407 Element Tested: EQV Concentration (bkts 5-8) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC416() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6,
        S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6, S_EQV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC416", "Equity", "Vega & Curvature", "EQV Concentration (bkts 5-8)",
        "S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6,S_EQV_6", "C407",
        "Total", " -   ", " 805,186,425 ", " 68,004,526 ", " -   ", " -   ", new BigDecimal("873190951"), amount);
  }

  /**
   * Required Passes: C408 Element Tested: EQV Concentration (bkt 9) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC417() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_7, S_EQV_7, S_EQV_7, S_EQV_7, S_EQV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC417", "Equity", "Vega & Curvature", "EQV Concentration (bkt 9)", "S_EQV_7,S_EQV_7,S_EQV_7,S_EQV_7,S_EQV_7", "C408", "Total", " -   ",
        " 6,971,311 ", " -   ", " -   ", " -   ", new BigDecimal("6971311"), amount);
  }

  /**
   * Required Passes: C409 Element Tested: EQV Concentration (bkt 10) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC418() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_8, S_EQV_8, S_EQV_8, S_EQV_8, S_EQV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC418", "Equity", "Vega & Curvature", "EQV Concentration (bkt 10)", "S_EQV_8,S_EQV_8,S_EQV_8,S_EQV_8,S_EQV_8", "C409", "Total", " -   ",
        " 34,856,555 ", " 883,176 ", " -   ", " -   ", new BigDecimal("35739731"), amount);
  }

  /**
   * Required Passes: C410 Element Tested: EQV Concentration (bkt 11-12) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC419() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9,
        S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9, S_EQV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC419", "Equity", "Vega & Curvature", "EQV Concentration (bkt 11-12)",
        "S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9,S_EQV_9", "C410",
        "Total", " -   ", " 1,233,922,054 ", " 20,842,946 ", " -   ", " -   ", new BigDecimal("1254765000"), amount);
  }

  /**
   * Required Passes: C413 Element Tested: EQV Concentration (residual) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC420() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_12, S_EQV_12, S_EQV_12, S_EQV_12, S_EQV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC420", "Equity", "Vega & Curvature", "EQV Concentration (residual)", "S_EQV_12,S_EQV_12,S_EQV_12,S_EQV_12,S_EQV_12", "C413", "Total",
        " -   ", " 6,971,311 ", " 176,635 ", " -   ", " -   ", new BigDecimal("7147946"), amount);
  }

  /**
   * Required Passes: "C402,C403,C415" Element Tested: "EQV Intra-bucket Correlation (same sign, pos)" Risk Measure:
   * Vega & Curvature Group: Equity
   */
  @Test
  public void testC421() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC421", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (same sign, pos)", "S_EQV_1,S_EQV_2", "C402,C403,C415", "Total",
        " -   ", " 5,493,633 ", " 12,789,738 ", " -   ", " -   ", new BigDecimal("18283371"), amount);
  }

  /**
   * Required Passes: "C405,C406" Element Tested: "EQV Intra-bucket Correlation (same sign, neg)" Risk Measure: Vega &
   * Curvature Group: Equity
   */
  @Test
  public void testC422() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_4, S_EQV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC422", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (same sign, neg)", "S_EQV_4,S_EQV_5", "C405,C406", "Total", " -   ",
        " 8,226,537 ", " -   ", " -   ", " -   ", new BigDecimal("8226537"), amount);
  }

  /**
   * Required Passes: "C402,C404,C415" Element Tested: EQV Intra-bucket Correlation (diff sign) Risk Measure: Vega &
   * Curvature Group: Equity
   */
  @Test
  public void testC423() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC423", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (diff sign)", "S_EQV_1,S_EQV_3", "C402,C404,C415", "Total", " -   ",
        " 5,834,987 ", " 6,899,368 ", " -   ", " -   ", new BigDecimal("12734356"), amount);
  }

  /**
   * Required Passes: "C402,C404,C415" Element Tested: "EQV Intra-bucket Correlation (diff sign, same rf)" Risk Measure:
   * Vega & Curvature Group: Equity
   */
  @Test
  public void testC424() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC424", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (diff sign, same rf)", "S_EQV_1,S_EQV_16", "C402,C404,C415", "Total",
        " -   ", " -   ", " 11,334,676 ", " -   ", " -   ", new BigDecimal("11334676"), amount);
  }

  /**
   * Required Passes: "C402,C404,C415" Element Tested: "EQV Intra-bucket Correlation (diff sign, same bucket, diff rf)"
   * Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC425() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC425", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (diff sign, same bucket, diff rf)", "S_EQV_1,S_EQV_17",
        "C402,C404,C415", "Total", " -   ", " 4,981,620 ", " 11,748,370 ", " -   ", " -   ", new BigDecimal("16729990"), amount);
  }

  /**
   * Required Passes: "C402,C408,C415,C417" Element Tested: EQV Intra-bucket Correlation (exceeds concentration
   * threshold) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC426() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_7, S_EQV_7, S_EQV_7, S_EQV_7, S_EQV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC426", "Equity", "Vega & Curvature", "EQV Intra-bucket Correlation (exceeds concentration threshold)",
        "S_EQV_1,S_EQV_7,S_EQV_7,S_EQV_7,S_EQV_7,S_EQV_7", "C402,C408,C415,C417", "Total", " -   ", " 7,383,155 ", " 11,770,053 ", " -   ", " -   ", new BigDecimal("19153208"),
        amount);
  }

  /**
   * Required Passes: "C404,C405" Element Tested: EQV Inter-bucket Correlation (same sign) Risk Measure: Vega &
   * Curvature Group: Equity
   */
  @Test
  public void testC427() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_3, S_EQV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC427", "Equity", "Vega & Curvature", "EQV Inter-bucket Correlation (same sign)", "S_EQV_3,S_EQV_4", "C404,C405", "Total", " -   ",
        " 12,907,632 ", " -   ", " -   ", " -   ", new BigDecimal("12907632"), amount);
  }

  /**
   * Required Passes: "C403,C407,C416" Element Tested: EQV Inter-bucket Correlation (diff sign) Risk Measure: Vega &
   * Curvature Group: Equity
   */
  @Test
  public void testC428() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_2, S_EQV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC428", "Equity", "Vega & Curvature", "EQV Inter-bucket Correlation (diff sign)", "S_EQV_2,S_EQV_6", "C403,C407,C416", "Total", " -   ",
        " 40,807,513 ", " 5,056,956 ", " -   ", " -   ", new BigDecimal("45864469"), amount);
  }

  /**
   * Required Passes: "C403,C407,C413,C416,C420,C428" Element Tested: EQV Inter-bucket Correlation (w/residual) Risk
   * Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC429() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_2, S_EQV_6, S_EQV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC429", "Equity", "Vega & Curvature", "EQV Inter-bucket Correlation (w/residual)", "S_EQV_2,S_EQV_6,S_EQV_12",
        "C403,C407,C413,C416,C420,C428", "Total", " -   ", " 42,201,775 ", " 5,092,283 ", " -   ", " -   ", new BigDecimal("47294058"), amount);
  }

  /**
   * Required Passes: C402 Element Tested: EQV Aggregate (opposite sign) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC430() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_1, S_EQV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC430", "Equity", "Vega & Curvature", "EQV Aggregate (opposite sign)", "S_EQV_1,S_EQV_14", "C402", "Total", " -   ", " 3,812,757 ",
        " 11,768,414 ", " -   ", " -   ", new BigDecimal("15581170"), amount);
  }

  /**
   * Required Passes: Element Tested: EQV Aggregate (opposite sign) Risk Measure: Vega & Curvature Group: Equity
   */
  @Test
  public void testC431() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_EQV_14, S_EQV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC431", "Equity", "Vega & Curvature", "EQV Aggregate (opposite sign)", "S_EQV_14,S_EQV_15", "", "Total", " -   ", " -   ", " 1,713,361 ",
        " -   ", " -   ", new BigDecimal("1713361"), amount);
  }

  /**
   * Required Passes: C402-C429 Element Tested: All Equity Vol Sensitivities Risk Measure: Vega & Curvature Group:
   * Equity
   */
  @Test
  public void testC432() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_EQV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC432", "Equity", "Vega & Curvature", "All Equity Vol Sensitivities", "All S_EQV", "C402-C429", "Total", " -   ", " 312,962,095 ",
        " 8,786,136 ", " -   ", " -   ", new BigDecimal("321748231"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC433() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC433", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_1", "None", "Total", " -   ", " 27,585,403 ", " 82,892,344 ", " -   ",
        " -   ", new BigDecimal("110477747"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC434() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC434", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_2", "None", "Total", " -   ", " 20,689,052 ", " 28,614,891 ", " -   ",
        " -   ", new BigDecimal("49303943"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC435() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC435", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_3", "None", "Total", " -   ", " 20,689,052 ", " -   ", " -   ",
        " -   ", new BigDecimal("20689052"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC436() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC436", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_4", "None", "Total", " -   ", " 223,135,258 ", " -   ", " -   ",
        " -   ", new BigDecimal("223135258"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC437() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC437", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_5", "None", "Total", " -   ", " 69,729,768 ", " -   ", " -   ",
        " -   ", new BigDecimal("69729768"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC438() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC438", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_6", "None", "Total", " -   ", " 34,136,936 ", " 1,967,274 ", " -   ",
        " -   ", new BigDecimal("36104210"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC439() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC439", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_7", "None", "Total", " -   ", " 188,500,253 ", " 7,242,040 ", " -   ",
        " -   ", new BigDecimal("195742293"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC440() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC440", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_8", "None", "Total", " -   ", " 53,638,283 ", " 1,236,446 ", " -   ",
        " -   ", new BigDecimal("54874729"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC441() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC441", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_9", "None", "Total", " -   ", " 12,260,179 ", " 141,308 ", " -   ",
        " -   ", new BigDecimal("12401487"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC442() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC442", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_10", "None", "Total", " -   ", " 33,255,736 ", " -   ", " -   ",
        " -   ", new BigDecimal("33255736"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC443() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC443", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_11", "None", "Total", " -   ", " 59,768,373 ", " 6,888,770 ", " -   ",
        " -   ", new BigDecimal("66657143"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC444() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC444", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_12", "None", "Total", " -   ", " 28,198,412 ", " 1,625,043 ", " -   ",
        " -   ", new BigDecimal("29823455"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC445() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC445", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_13", "None", "Total", " -   ", " 3,517,139 ", " 27,025 ", " -   ",
        " -   ", new BigDecimal("3544164"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC446() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC446", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_14", "None", "Total", " -   ", " 7,815,864 ", " -   ", " -   ",
        " -   ", new BigDecimal("7815864"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC447() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC447", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_15", "None", "Total", " -   ", " 7,356,107 ", " 169,570 ", " -   ",
        " -   ", new BigDecimal("7525677"), amount);
  }

  /**
   * Required Passes: None Element Tested: CMV Risk Weight Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC448() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_16);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC448", "Commodities", "Vega & Curvature", "CMV Risk Weight", "S_CMV_16", "None", "Total", " -   ", " 8,582,125 ", " -   ", " -   ",
        " -   ", new BigDecimal("8582125"), amount);
  }

  /**
   * Required Passes: C433 Element Tested: CMV Concentration (bkt 1) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC449() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC449", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 1)",
        "S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1", "C433", "Total", " -   ", " 275,854,028 ", " 828,923,440 ", " -   ", " -   ",
        new BigDecimal("1104777468"), amount);
  }

  /**
   * Required Passes: C436 Element Tested: CMV Concentration (bkt 2) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC450() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4,
        S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4, S_CMV_4);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC450", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 2)",
        "S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4,S_CMV_4", "C436",
        "Total", " -   ", " 4,462,705,169 ", " -   ", " -   ", " -   ", new BigDecimal("4462705169"), amount);
  }

  /**
   * Required Passes: C438 Element Tested: CMV Concentration (bkt 3-5) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC451() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6,
        S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6, S_CMV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC451", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 3-5)",
        "S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6,S_CMV_6", "C438",
        "Total", " -   ", " 682,738,720 ", " 39,345,476 ", " -   ", " -   ", new BigDecimal("722084196"), amount);
  }

  /**
   * Required Passes: C439 Element Tested: CMV Concentration (bkt 6-7) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC452() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7,
        S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7, S_CMV_7);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC452", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 6-7)",
        "S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7,S_CMV_7", "C439",
        "Total", " -   ", " 3,770,005,054 ", " 144,840,808 ", " -   ", " -   ", new BigDecimal("3914845862"), amount);
  }

  /**
   * Required Passes: C440 Element Tested: CMV Concentration (bkt 8-9) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC453() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8,
        S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8, S_CMV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC453", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 8-9)",
        "S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8,S_CMV_8", "C440",
        "Total", " -   ", " 1,072,765,666 ", " 24,728,918 ", " -   ", " -   ", new BigDecimal("1097494584"), amount);
  }

  /**
   * Required Passes: C441 Element Tested: CMV Concentration (bkt 10) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC454() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_9, S_CMV_9, S_CMV_9, S_CMV_9, S_CMV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC454", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 10)", "S_CMV_9,S_CMV_9,S_CMV_9,S_CMV_9,S_CMV_9", "C441", "Total",
        " -   ", " 61,300,895 ", " 706,541 ", " -   ", " -   ", new BigDecimal("62007436"), amount);
  }

  /**
   * Required Passes: C442 Element Tested: CMV Concentration (bkt 11) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC455() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10,
        S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10, S_CMV_10);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC455", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 11)",
        "S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10,S_CMV_10",
        "C442", "Total", " -   ", " 665,114,713 ", " -   ", " -   ", " -   ", new BigDecimal("665114713"), amount);
  }

  /**
   * Required Passes: C443 Element Tested: CMV Concentration (bkt 12) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC456() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11,
        S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11, S_CMV_11);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC456", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 12)",
        "S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11,S_CMV_11",
        "C443", "Total", " -   ", " 1,195,367,456 ", " 137,775,403 ", " -   ", " -   ", new BigDecimal("1333142859"), amount);
  }

  /**
   * Required Passes: C444 Element Tested: CMV Concentration (bkt 13-15) Risk Measure: Vega & Curvature Group:
   * Commodities
   */
  @Test
  public void testC457() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12,
        S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12, S_CMV_12);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC457", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 13-15)",
        "S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12,S_CMV_12",
        "C444", "Total", " -   ", " 563,968,236 ", " 32,500,864 ", " -   ", " -   ", new BigDecimal("596469100"), amount);
  }

  /**
   * Required Passes: C447 Element Tested: CMV Concentration (bkt 16) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC458() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15, S_CMV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC458", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 16)",
        "S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15,S_CMV_15", "C447", "Total", " -   ", " 73,561,074 ", " 1,695,697 ", " -   ", " -   ",
        new BigDecimal("75256771"), amount);
  }

  /**
   * Required Passes: C445 Element Tested: CMV Concentration (bkt 17) Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC459() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13,
        S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13, S_CMV_13);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC459", "Commodities", "Vega & Curvature", "CMV Concentration (bkt 17)",
        "S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13,S_CMV_13",
        "C445", "Total", " -   ", " 70,342,777 ", " 540,504 ", " -   ", " -   ", new BigDecimal("70883281"), amount);
  }

  /**
   * Required Passes: C436 Element Tested: "CMV Aggregate (diff bucket, opposite sign)" Risk Measure: Vega & Curvature
   * Group: Commodities
   */
  @Test
  public void testC460() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_4, S_CMV_8);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC460", "Commodities", "Vega & Curvature", "CMV Aggregate (diff bucket, opposite sign)", "S_CMV_4,S_CMV_8", "C436", "Total", " -   ",
        " 222,608,569 ", " 1,872,168 ", " -   ", " -   ", new BigDecimal("224480738"), amount);
  }

  /**
   * Required Passes: Element Tested: "CMV Aggregate (same qualifier, pos)" Risk Measure: Vega & Curvature Group:
   * Commodities
   */
  @Test
  public void testC461() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_4, S_CMV_17);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC461", "Commodities", "Vega & Curvature", "CMV Aggregate (same qualifier, pos)", "S_CMV_4,S_CMV_17", "", "Total", " -   ", " 83,675,722 ",
        " 367,630,700 ", " -   ", " -   ", new BigDecimal("451306422"), amount);
  }

  /**
   * Required Passes: Element Tested: "CMV Aggregate (same qualifier, neg)" Risk Measure: Vega & Curvature Group:
   * Commodities
   */
  @Test
  public void testC462() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_3, S_CMV_18);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC462", "Commodities", "Vega & Curvature", "CMV Aggregate (same qualifier, neg)", "S_CMV_3,S_CMV_18", "", "Total", " -   ", " -   ",
        " -   ", " -   ", " -   ", new BigDecimal("0"), amount);
  }

  /**
   * Required Passes: "C433,C434,C449" Element Tested: "CMV Intra-bucket Correlation (same sign, pos)" Risk Measure:
   * Vega & Curvature Group: Commodities
   */
  @Test
  public void testC463() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_1, S_CMV_2);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC463", "Commodities", "Vega & Curvature", "CMV Intra-bucket Correlation (same sign, pos)", "S_CMV_1,S_CMV_2", "C433,C434,C449", "Total",
        " -   ", " 46,344,298 ", " 106,030,312 ", " -   ", " -   ", new BigDecimal("152374610"), amount);
  }

  /**
   * Required Passes: "C436,C437,C450" Element Tested: "CMV Intra-bucket Correlation (same sign, neg)" Risk Measure:
   * Vega & Curvature Group: Commodities
   */
  @Test
  public void testC464() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_4, S_CMV_5);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC464", "Commodities", "Vega & Curvature", "CMV Intra-bucket Correlation (same sign, neg)", "S_CMV_4,S_CMV_5", "C436,C437,C450", "Total",
        " -   ", " 291,800,543 ", " -   ", " -   ", " -   ", new BigDecimal("291800543"), amount);
  }

  /**
   * Required Passes: "C434,C435" Element Tested: CMV Intra-bucket Correlation (diff sign) Risk Measure: Vega &
   * Curvature Group: Commodities
   */
  @Test
  public void testC465() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_13, S_CMV_14);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC465", "Commodities", "Vega & Curvature", "CMV Intra-bucket Correlation (diff sign)", "S_CMV_13,S_CMV_14", "C434,C435", "Total", " -   ",
        " 7,325,679 ", " 30,634 ", " -   ", " -   ", new BigDecimal("7356313"), amount);
  }

  /**
   * Required Passes: "C433,C435,C449" Element Tested: CMV Intra-bucket Correlation (exceeds concentration threshold)
   * Risk Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC466() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_1, S_CMV_3);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC466", "Commodities", "Vega & Curvature", "CMV Intra-bucket Correlation (exceeds concentration threshold)",
        "S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_1,S_CMV_3", "C433,C435,C449", "Total", " -   ", " 258,718,874 ", " 821,793,583 ", " -   ",
        " -   ", new BigDecimal("1080512457"), amount);
  }

  /**
   * Required Passes: "C433,C438,C449,C451" Element Tested: CMV Inter-bucket Correlation (same sign) Risk Measure: Vega
   * & Curvature Group: Commodities
   */
  @Test
  public void testC467() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_1, S_CMV_6);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC467", "Commodities", "Vega & Curvature", "CMV Inter-bucket Correlation (same sign)", "S_CMV_1,S_CMV_6", "C433,C438,C449,C451", "Total",
        " -   ", " 48,184,966 ", " 83,282,293 ", " -   ", " -   ", new BigDecimal("131467259"), amount);
  }

  /**
   * Required Passes: "C434,C441,C454" Element Tested: CMV Inter-bucket Correlation (diff sign) Risk Measure: Vega &
   * Curvature Group: Commodities
   */
  @Test
  public void testC468() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_2, S_CMV_9);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC468", "Commodities", "Vega & Curvature", "CMV Inter-bucket Correlation (diff sign)", "S_CMV_2,S_CMV_9", "C434,C441,C454", "Total",
        " -   ", " 26,363,394 ", " 28,642,833 ", " -   ", " -   ", new BigDecimal("55006227"), amount);
  }

  /**
   * Required Passes: "C434,C441,C447,C454,C458,C468" Element Tested: CMV Inter-bucket Correlation (w/residual) Risk
   * Measure: Vega & Curvature Group: Commodities
   */
  @Test
  public void testC469() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_CMV_2, S_CMV_9, S_CMV_15);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC469", "Commodities", "Vega & Curvature", "CMV Inter-bucket Correlation (w/residual)", "S_CMV_2,S_CMV_9,S_CMV_15",
        "C434,C441,C447,C454,C458,C468", "Total", " -   ", " 27,370,438 ", " 28,668,817 ", " -   ", " -   ", new BigDecimal("56039255"), amount);
  }

  /**
   * Required Passes: C433-C469 Element Tested: All Commodity Vol Sensitivities Risk Measure: Vega & Curvature Group:
   * Commodities
   */
  @Test
  public void testC470() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC470", "Commodities", "Vega & Curvature", "All Commodity Vol Sensitivities", "All S_CMV", "C433-C469", "Total", " -   ", " 233,811,736 ",
        " 399,913,490 ", " -   ", " -   ", new BigDecimal("633725226"), amount);
  }

  /**
   * Required Passes: C299-C470 Element Tested: All Vega Sensitivities (no multiplier) Risk Measure: Vega & Curvature
   * Group: Global
   */
  @Test
  public void testC471() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC471", "Global", "Vega & Curvature", "All Vega Sensitivities (no multiplier)", "All S_IRV,S_FXV,S_CRV,S_CNV,S_EQV,S_CMV", "C299-C470",
        "Total", " -   ", " 773,709,018 ", " 594,387,928 ", " -   ", " -   ", new BigDecimal("1337684934"), amount);
  }

  /**
   * Required Passes: C299-C471 Element Tested: All Vega Sensitivities (with multipliers) Risk Measure: Vega & Curvature
   * Group: Global
   */
  @Test
  public void testC472() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = new ArrayList<ProductMultiplier>();
    multipliers.addAll(S_MUL);

    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC472", "Global", "Vega & Curvature", "All Vega Sensitivities (with multipliers)", "All S_IRV,S_FXV,S_CRV,S_CNV,S_EQV,S_CMV,S_MUL",
        "C299-C471", "Total", " -   ", " 773,709,018 ", " 594,387,928 ", " -   ", " 120,166,283 ", new BigDecimal("1457851217"), amount);
  }

  /**
   * Required Passes: None Element Tested: One Trade Risk Measure: Notional Group: AddOn
   */
  @Test
  public void testC473() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Arrays.asList(S_AN_1);
    List<Notional> notional = Arrays.asList(S_AN_3);
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Collections.emptyList();
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC473", "AddOn", "Notional", "One Trade", "S_AN_1,S_AN_3", "None", "Total", " -   ", " -   ", " -   ", " -   ", " 10,000,000 ",
        new BigDecimal("10000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: Multi Trades Risk Measure: Notional Group: AddOn
   */
  @Test
  public void testC474() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Arrays.asList(S_AN_2);
    List<Notional> notional = Arrays.asList(S_AN_4, S_AN_5);
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Collections.emptyList();
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC474", "AddOn", "Notional", "Multi Trades", "S_AN_2,S_AN_4,S_AN_5", "None", "Total", " -   ", " -   ", " -   ", " -   ", " 40,000,000 ",
        new BigDecimal("40000000"), amount);
  }

  /**
   * Required Passes: None Element Tested: Fixed Amount Risk Measure: Notional Group: AddOn
   */
  @Test
  public void testC475() {
    List<FixedAmount> fixed = Arrays.asList(S_AN_7, S_AN_8);
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Collections.emptyList();
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC475", "AddOn", "Notional", "Fixed Amount", "S_AN_7,S_AN_8", "None", "Total", " -   ", " -   ", " -   ", " -   ", " 30,000,000 ",
        new BigDecimal("30000000"), amount);
  }

  /**
   * Required Passes: C473-C475 Element Tested: All Notional Risk Measure: Notional Group: AddOn
   */
  @Test
  public void testC476() {
    List<FixedAmount> fixed = new ArrayList<FixedAmount>();
    fixed.addAll(S_AN_FIXED);

    List<NotionalFactor> factors = new ArrayList<NotionalFactor>();
    factors.addAll(S_AN_FACTORS);

    List<Notional> notional = new ArrayList<Notional>();
    notional.addAll(S_AN);

    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Collections.emptyList();
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC476", "AddOn", "Notional", "All Notional", "All S_AN", "C473-C475", "Total", " -   ", " -   ", " -   ", " -   ", " 80,000,000 ",
        new BigDecimal("80000000"), amount);
  }

  /**
   * Required Passes: "C41,C82,C134,C189,C256" Element Tested: Risk Class Correlations Risk Measure: All Group: Global
   */
  @Test
  public void testC477() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = Arrays.asList(S_IR_41, S_FX_11, S_CRQ_1, S_CRNQ_1, S_EQ_25, S_CM_33);
    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC477", "Global", "All", "Risk Class Correlations", "S_IR_41,S_FX_11,S_CRQ_1,S_CRNQ_1,S_EQ_25,S_CM_33", "C41,C82,C134,C189,C256", "Total",
        " 736,362,989 ", " -   ", " -   ", " -   ", " -   ", new BigDecimal("736362989"), amount);
  }

  /**
   * Required Passes: "C1-C472,C477" Element Tested: Combination (All w/o Multipliers and Notionals) Risk Measure: All
   * Group: Global
   */
  @Test
  public void testC478() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_EQ);
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC478", "Global", "All", "Combination (All w/o Multipliers and Notionals)",
        "All S_IR,S_CRQ,S_CRNQ,S_CM,S_FX,S_EQ,S_IRV,S_FXV,S_CRV,S_CNV,S_EQV,S_CMV", "C1-C472,C477", "Total", " 35,133,910,819 ", " 773,709,018 ", " 594,387,928 ", " 1,386,542 ",
        " -   ", new BigDecimal("36415210241"), amount);
  }

  /**
   * Required Passes: "C1-C472,C477,C478" Element Tested: Combination (All w/Multiplier) Risk Measure: All Group: Global
   */
  @Test
  public void testC479() {
    List<FixedAmount> fixed = Collections.emptyList();
    List<NotionalFactor> factors = Collections.emptyList();
    List<Notional> notional = Collections.emptyList();
    List<ProductMultiplier> multipliers = new ArrayList<ProductMultiplier>();
    multipliers.addAll(S_MUL);

    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_EQ);
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC479", "Global", "All", "Combination (All w/Multiplier)", "All S_IR,S_CRQ,S_CRNQ,S_CM,S_FX,S_EQ,S_IRV,S_FXV,S_CRV,S_CNV,S_EQV,S_CMV,S_MUL",
        "C1-C472,C477,C478", "Total", " 35,133,910,819 ", " 773,709,018 ", " 594,387,928 ", " 1,386,542 ", " 2,839,208,184 ", new BigDecimal("39254418424"), amount);
  }

  /**
   * Required Passes: C1-C479 Element Tested: Combination (All w/Notionals Risk Measure: All Group: Global
   */
  @Test
  public void testC480() {
    List<FixedAmount> fixed = new ArrayList<FixedAmount>();
    fixed.addAll(S_AN_FIXED);

    List<NotionalFactor> factors = new ArrayList<NotionalFactor>();
    factors.addAll(S_AN_FACTORS);

    List<Notional> notional = new ArrayList<Notional>();
    notional.addAll(S_AN);

    List<ProductMultiplier> multipliers = Collections.emptyList();
    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_EQ);
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC480", "Global", "All", "Combination (All w/Notionals", "All S_IR,S_CRQ,S_CRNQ,S_CM,S_FX,S_EQ,S_IRV,S_FXV,S_CRV,S_CNV,S_EQV,S_CMV,S_AN",
        "C1-C479", "Total", " 35,133,910,819 ", " 773,709,018 ", " 594,387,928 ", " 1,386,542 ", " 80,000,000 ", new BigDecimal("36495210241"), amount);
  }

  /**
   * Required Passes: C1-C480 Element Tested: Combination (All) Risk Measure: All Group: Global
   */
  @Test
  public void testC481() {
    List<FixedAmount> fixed = new ArrayList<FixedAmount>();
    fixed.addAll(S_AN_FIXED);

    List<NotionalFactor> factors = new ArrayList<NotionalFactor>();
    factors.addAll(S_AN_FACTORS);

    List<Notional> notional = new ArrayList<Notional>();
    notional.addAll(S_AN);

    List<ProductMultiplier> multipliers = new ArrayList<ProductMultiplier>();
    multipliers.addAll(S_MUL);

    List<Sensitivity> sensitivities = new ArrayList<Sensitivity>();
    sensitivities.addAll(S_IR);
    sensitivities.addAll(S_FX);
    sensitivities.addAll(S_CRQ);
    sensitivities.addAll(S_CRNQ);
    sensitivities.addAll(S_EQ);
    sensitivities.addAll(S_CM);
    sensitivities.addAll(S_IRV);
    sensitivities.addAll(S_CRV);
    sensitivities.addAll(S_CNV);
    sensitivities.addAll(S_EQV);
    sensitivities.addAll(S_FXV);
    sensitivities.addAll(S_CMV);

    BigDecimal amount = Simm.calculateTotal(sensitivities, multipliers, factors, notional, fixed, FxRate.USD, HoldingPeriod.ONE_DAY);
    AssertUtils.assertEquals(false, "testC481", "Global", "All", "Combination (All)", "All S_", "C1-C480", "Total", " 35,133,910,819 ", " 773,709,018 ", " 594,387,928 ",
        " 1,386,542 ", " 2,919,208,184 ", new BigDecimal("39334418424"), amount);
  }

}
